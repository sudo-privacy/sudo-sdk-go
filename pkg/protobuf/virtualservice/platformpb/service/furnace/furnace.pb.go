// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.1
// source: protobuf/mpc_virtual_service/platform/service/furnace.proto

package platformpb

import (
	context "context"
	_ "github.com/sudo-privacy/sudo-sdk-go/pkg/protobuf/basic/protobuf/virtualservice/platformpb/options"
	online_service "github.com/sudo-privacy/sudo-sdk-go/pkg/protobuf/online_service"
	apiusage "github.com/sudo-privacy/sudo-sdk-go/pkg/protobuf/virtualservice/platformpb/apiusage"
	cron "github.com/sudo-privacy/sudo-sdk-go/pkg/protobuf/virtualservice/platformpb/cron"
	furnacestatus "github.com/sudo-privacy/sudo-sdk-go/pkg/protobuf/virtualservice/platformpb/furnacestatus"
	pir "github.com/sudo-privacy/sudo-sdk-go/pkg/protobuf/virtualservice/platformpb/pir"
	token "github.com/sudo-privacy/sudo-sdk-go/pkg/protobuf/virtualservice/platformpb/token"
	vtable "github.com/sudo-privacy/sudo-sdk-go/pkg/protobuf/virtualservice/platformpb/vtable"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_protobuf_mpc_virtual_service_platform_service_furnace_proto protoreflect.FileDescriptor

var file_protobuf_mpc_virtual_service_platform_service_furnace_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x70, 0x63, 0x5f, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x66, 0x75, 0x72, 0x6e, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x30, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x70, 0x63, 0x5f,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x70,
	0x63, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x66, 0x75, 0x72, 0x6e, 0x61,
	0x63, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x31, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x34, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x70, 0x63,
	0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x33, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x32, 0xa3, 0x21, 0x0a, 0x07, 0x46, 0x75, 0x72, 0x6e, 0x61, 0x63, 0x65, 0x12, 0x86, 0x01,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0xc2, 0x3e, 0x03, 0x0a, 0x01, 0x04, 0x12, 0x9a, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62,
	0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x22, 0x09, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x6f, 0x6e,
	0x3a, 0x01, 0x2a, 0x12, 0x7d, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x4a,
	0x6f, 0x62, 0x73, 0x12, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72,
	0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x6f,
	0x6e, 0x73, 0x12, 0x68, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e,
	0x4a, 0x6f, 0x62, 0x12, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0b, 0x2a, 0x09, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x12, 0x8e, 0x01, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x46, 0x75, 0x72, 0x6e, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x66, 0x75, 0x72, 0x6e, 0x61, 0x63, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x66, 0x75, 0x72, 0x6e, 0x61, 0x63, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d,
	0x12, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x89, 0x01,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xad, 0x01, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x26, 0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x76, 0x63, 0x2f, 0x70, 0x69, 0x72, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x91, 0x01, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x1a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x76, 0x63, 0x2f, 0x70, 0x69, 0x72, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xa5, 0x01,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x69, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x24, 0x12, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x76,
	0x63, 0x2f, 0x70, 0x69, 0x72, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x69, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x26, 0x2a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x76, 0x63, 0x2f, 0x70, 0x69, 0x72, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xbd, 0x01, 0x0a, 0x1a, 0x50, 0x69,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61,
	0x6b, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61,
	0x6b, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22,
	0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x76, 0x63, 0x2f,
	0x70, 0x69, 0x72, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x6b, 0x65, 0x2d,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xb7, 0x01, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x76, 0x63, 0x2f, 0x70, 0x69, 0x72, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x01, 0x2a, 0xc2, 0x3e, 0x03,
	0x0a, 0x01, 0x08, 0x12, 0xa1, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x69, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21,
	0x12, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x76, 0x63,
	0x2f, 0x70, 0x69, 0x72, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0xc2, 0x3e, 0x03, 0x0a, 0x01, 0x07, 0x12, 0x98, 0x01, 0x0a, 0x14, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x69, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x6e, 0x50, 0x69, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2b, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x76,
	0x63, 0x2f, 0x70, 0x69, 0x72, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0xc2, 0x3e, 0x03, 0x0a,
	0x01, 0x07, 0x12, 0xb3, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x72,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x34, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x72, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x69, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x26, 0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x76, 0x63, 0x2f, 0x70, 0x69, 0x72, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x94, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x69, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x69, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x1a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x76, 0x63, 0x2f, 0x70, 0x69, 0x72, 0x2d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12,
	0xaa, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x69, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x69, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x69, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x69, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x76, 0x63, 0x2f, 0x70, 0x69, 0x72, 0x2d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x91, 0x01, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x2a, 0x21, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x76, 0x63, 0x2f, 0x70, 0x69, 0x72, 0x2d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x01, 0x2a,
	0x12, 0xbd, 0x01, 0x0a, 0x1a, 0x50, 0x69, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x6b, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x76, 0x63, 0x2f, 0x70, 0x69, 0x72, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x74, 0x61, 0x6b, 0x65, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a,
	0x12, 0x9d, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x69, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x76, 0x63, 0x2f, 0x70,
	0x69, 0x72, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x9d, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x69, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x76, 0x63, 0x2f, 0x70,
	0x69, 0x72, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x7a, 0x0a, 0x0a, 0x50, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x50, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x50, 0x69, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x70, 0x69, 0x72, 0x2f, 0x7b,
	0x73, 0x75, 0x62, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xb5, 0x01, 0x0a,
	0x19, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x39, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x50,
	0x49, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x50, 0x49, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x70, 0x69, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x3a, 0x01, 0x2a, 0x12, 0x89, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x50, 0x49,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x50, 0x49, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x50, 0x49, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0xa7, 0x01, 0x0a, 0x13, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x53, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x33, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x53,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x33, 0x53, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x66, 0x33, 0x73, 0x2f, 0x7b, 0x73, 0x75,
	0x62, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x9d, 0x01, 0x0a, 0x19, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x53, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x79, 0x73,
	0x71, 0x6c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x31, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x47, 0x57, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x47,
	0x57, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x33,
	0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x9a, 0x01, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x76, 0x63, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x42, 0x30, 0x5a, 0x2e, 0x70, 0x61, 0x61, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var file_protobuf_mpc_virtual_service_platform_service_furnace_proto_goTypes = []interface{}{
	(*vtable.ListVtablesRequest)(nil),               // 0: protobuf.platform.vtable.ListVtablesRequest
	(*cron.CreateOrUpdateCronJobRequest)(nil),       // 1: protobuf.platform.cron.CreateOrUpdateCronJobRequest
	(*cron.ListCronJobsRequest)(nil),                // 2: protobuf.platform.cron.ListCronJobsRequest
	(*cron.DeleteCronJobRequest)(nil),               // 3: protobuf.platform.cron.DeleteCronJobRequest
	(*furnacestatus.GetStatusRequest)(nil),          // 4: protobuf.platform.furnacestatus.GetStatusRequest
	(*vtable.CreateVtablesRequest)(nil),             // 5: protobuf.platform.vtable.CreateVtablesRequest
	(*pir.CreateServerServiceRequest)(nil),          // 6: protobuf.platform.pir.CreateServerServiceRequest
	(*pir.UpdateServerServiceRequest)(nil),          // 7: protobuf.platform.pir.UpdateServerServiceRequest
	(*pir.GetServerServicesRequest)(nil),            // 8: protobuf.platform.pir.GetServerServicesRequest
	(*pir.DeleteServerServiceRequest)(nil),          // 9: protobuf.platform.pir.DeleteServerServiceRequest
	(*pir.ServerServiceTakeActionRequest)(nil),      // 10: protobuf.platform.pir.ServerServiceTakeActionRequest
	(*token.GenerateTokenForPartyRequest)(nil),      // 11: protobuf.platform.token.GenerateTokenForPartyRequest
	(*token.GetPartyTokenRequest)(nil),              // 12: protobuf.platform.token.GetPartyTokenRequest
	(*token.ActionOnPirServerToken)(nil),            // 13: protobuf.platform.token.ActionOnPirServerToken
	(*pir.CreatePirClientServiceRequest)(nil),       // 14: protobuf.platform.pir.CreatePirClientServiceRequest
	(*pir.UpdatePirClientServiceRequest)(nil),       // 15: protobuf.platform.pir.UpdatePirClientServiceRequest
	(*pir.GetPirClientServicesRequst)(nil),          // 16: protobuf.platform.pir.GetPirClientServicesRequst
	(*pir.DeleteClientServiceRequest)(nil),          // 17: protobuf.platform.pir.DeleteClientServiceRequest
	(*pir.ClientServiceTakeActionRequest)(nil),      // 18: protobuf.platform.pir.ClientServiceTakeActionRequest
	(*pir.GetServerUsagesRequest)(nil),              // 19: protobuf.platform.pir.GetServerUsagesRequest
	(*pir.GetClientUsagesRequest)(nil),              // 20: protobuf.platform.pir.GetClientUsagesRequest
	(*pir.PirRequest)(nil),                          // 21: protobuf.platform.pir.PirRequest
	(*apiusage.UpsertAPIUsageReceiverRequest)(nil),  // 22: protobuf.platform.apiusage.UpsertAPIUsageReceiverRequest
	(*apiusage.ListAPIUsagesRequest)(nil),           // 23: protobuf.platform.apiusage.ListAPIUsagesRequest
	(*online_service.Factor3SVerifyRequest)(nil),    // 24: infra_adapter.online_service.Factor3SVerifyRequest
	(*online_service.GrpcGWDeployRequest)(nil),      // 25: infra_adapter.online_service.GrpcGWDeployRequest
	(*pir.UpdateServerDataRequest)(nil),             // 26: protobuf.platform.pir.UpdateServerDataRequest
	(*vtable.ListVtablesResponse)(nil),              // 27: protobuf.platform.vtable.ListVtablesResponse
	(*cron.CreateOrUpdateCronJobResponse)(nil),      // 28: protobuf.platform.cron.CreateOrUpdateCronJobResponse
	(*cron.ListCronJobsResponse)(nil),               // 29: protobuf.platform.cron.ListCronJobsResponse
	(*emptypb.Empty)(nil),                           // 30: google.protobuf.Empty
	(*furnacestatus.GetStatusResponse)(nil),         // 31: protobuf.platform.furnacestatus.GetStatusResponse
	(*vtable.CreateVtablesResponse)(nil),            // 32: protobuf.platform.vtable.CreateVtablesResponse
	(*pir.CreateServerServiceResponse)(nil),         // 33: protobuf.platform.pir.CreateServerServiceResponse
	(*pir.GetServerServicesResponse)(nil),           // 34: protobuf.platform.pir.GetServerServicesResponse
	(*pir.ServerServiceTakeActionResponse)(nil),     // 35: protobuf.platform.pir.ServerServiceTakeActionResponse
	(*token.GenerateTokenForPartyResponse)(nil),     // 36: protobuf.platform.token.GenerateTokenForPartyResponse
	(*token.GetPartyTokenResponse)(nil),             // 37: protobuf.platform.token.GetPartyTokenResponse
	(*pir.CreatePirClientServiceResponse)(nil),      // 38: protobuf.platform.pir.CreatePirClientServiceResponse
	(*pir.GetPirClientServicesResponse)(nil),        // 39: protobuf.platform.pir.GetPirClientServicesResponse
	(*pir.ClientServiceTakeActionResponse)(nil),     // 40: protobuf.platform.pir.ClientServiceTakeActionResponse
	(*pir.GetServerUsagesResponse)(nil),             // 41: protobuf.platform.pir.GetServerUsagesResponse
	(*pir.GetClientUsagesResponse)(nil),             // 42: protobuf.platform.pir.GetClientUsagesResponse
	(*pir.PirResponse)(nil),                         // 43: protobuf.platform.pir.PirResponse
	(*apiusage.UpsertAPIUsageReceiverResponse)(nil), // 44: protobuf.platform.apiusage.UpsertAPIUsageReceiverResponse
	(*apiusage.ListAPIUsagesResponse)(nil),          // 45: protobuf.platform.apiusage.ListAPIUsagesResponse
	(*online_service.Factor3SVerifyResponse)(nil),   // 46: infra_adapter.online_service.Factor3SVerifyResponse
	(*online_service.GrpcGWDeployResponse)(nil),     // 47: infra_adapter.online_service.GrpcGWDeployResponse
	(*pir.UpdateServerDataResponse)(nil),            // 48: protobuf.platform.pir.UpdateServerDataResponse
}
var file_protobuf_mpc_virtual_service_platform_service_furnace_proto_depIdxs = []int32{
	0,  // 0: protobuf.platform.service.Furnace.ListVtables:input_type -> protobuf.platform.vtable.ListVtablesRequest
	1,  // 1: protobuf.platform.service.Furnace.CreateOrUpdateCronJob:input_type -> protobuf.platform.cron.CreateOrUpdateCronJobRequest
	2,  // 2: protobuf.platform.service.Furnace.ListCronJobs:input_type -> protobuf.platform.cron.ListCronJobsRequest
	3,  // 3: protobuf.platform.service.Furnace.DeleteCronJob:input_type -> protobuf.platform.cron.DeleteCronJobRequest
	4,  // 4: protobuf.platform.service.Furnace.GetFurnaceStatus:input_type -> protobuf.platform.furnacestatus.GetStatusRequest
	5,  // 5: protobuf.platform.service.Furnace.CreateVtables:input_type -> protobuf.platform.vtable.CreateVtablesRequest
	6,  // 6: protobuf.platform.service.Furnace.CreatePirServerService:input_type -> protobuf.platform.pir.CreateServerServiceRequest
	7,  // 7: protobuf.platform.service.Furnace.UpdatePirServerService:input_type -> protobuf.platform.pir.UpdateServerServiceRequest
	8,  // 8: protobuf.platform.service.Furnace.GetPirServerServices:input_type -> protobuf.platform.pir.GetServerServicesRequest
	9,  // 9: protobuf.platform.service.Furnace.DeletePirServerService:input_type -> protobuf.platform.pir.DeleteServerServiceRequest
	10, // 10: protobuf.platform.service.Furnace.PirServerServiceTakeAction:input_type -> protobuf.platform.pir.ServerServiceTakeActionRequest
	11, // 11: protobuf.platform.service.Furnace.CreatePirServerToken:input_type -> protobuf.platform.token.GenerateTokenForPartyRequest
	12, // 12: protobuf.platform.service.Furnace.GetPirServerToken:input_type -> protobuf.platform.token.GetPartyTokenRequest
	13, // 13: protobuf.platform.service.Furnace.EnablePirServerToken:input_type -> protobuf.platform.token.ActionOnPirServerToken
	14, // 14: protobuf.platform.service.Furnace.CreatePirClientService:input_type -> protobuf.platform.pir.CreatePirClientServiceRequest
	15, // 15: protobuf.platform.service.Furnace.UpdatePirClientService:input_type -> protobuf.platform.pir.UpdatePirClientServiceRequest
	16, // 16: protobuf.platform.service.Furnace.GetPirClientServices:input_type -> protobuf.platform.pir.GetPirClientServicesRequst
	17, // 17: protobuf.platform.service.Furnace.DeletePirClientService:input_type -> protobuf.platform.pir.DeleteClientServiceRequest
	18, // 18: protobuf.platform.service.Furnace.PirClientServiceTakeAction:input_type -> protobuf.platform.pir.ClientServiceTakeActionRequest
	19, // 19: protobuf.platform.service.Furnace.GetPirServerUsages:input_type -> protobuf.platform.pir.GetServerUsagesRequest
	20, // 20: protobuf.platform.service.Furnace.GetPirClientUsages:input_type -> protobuf.platform.pir.GetClientUsagesRequest
	21, // 21: protobuf.platform.service.Furnace.PirRequest:input_type -> protobuf.platform.pir.PirRequest
	22, // 22: protobuf.platform.service.Furnace.UpsertUsageNotifyReceiver:input_type -> protobuf.platform.apiusage.UpsertAPIUsageReceiverRequest
	23, // 23: protobuf.platform.service.Furnace.ListAPIUsages:input_type -> protobuf.platform.apiusage.ListAPIUsagesRequest
	24, // 24: protobuf.platform.service.Furnace.Factor3SVerifyQuery:input_type -> infra_adapter.online_service.Factor3SVerifyRequest
	25, // 25: protobuf.platform.service.Furnace.Factor3SVerifyMysqlDeploy:input_type -> infra_adapter.online_service.GrpcGWDeployRequest
	26, // 26: protobuf.platform.service.Furnace.UpdateServerData:input_type -> protobuf.platform.pir.UpdateServerDataRequest
	27, // 27: protobuf.platform.service.Furnace.ListVtables:output_type -> protobuf.platform.vtable.ListVtablesResponse
	28, // 28: protobuf.platform.service.Furnace.CreateOrUpdateCronJob:output_type -> protobuf.platform.cron.CreateOrUpdateCronJobResponse
	29, // 29: protobuf.platform.service.Furnace.ListCronJobs:output_type -> protobuf.platform.cron.ListCronJobsResponse
	30, // 30: protobuf.platform.service.Furnace.DeleteCronJob:output_type -> google.protobuf.Empty
	31, // 31: protobuf.platform.service.Furnace.GetFurnaceStatus:output_type -> protobuf.platform.furnacestatus.GetStatusResponse
	32, // 32: protobuf.platform.service.Furnace.CreateVtables:output_type -> protobuf.platform.vtable.CreateVtablesResponse
	33, // 33: protobuf.platform.service.Furnace.CreatePirServerService:output_type -> protobuf.platform.pir.CreateServerServiceResponse
	30, // 34: protobuf.platform.service.Furnace.UpdatePirServerService:output_type -> google.protobuf.Empty
	34, // 35: protobuf.platform.service.Furnace.GetPirServerServices:output_type -> protobuf.platform.pir.GetServerServicesResponse
	30, // 36: protobuf.platform.service.Furnace.DeletePirServerService:output_type -> google.protobuf.Empty
	35, // 37: protobuf.platform.service.Furnace.PirServerServiceTakeAction:output_type -> protobuf.platform.pir.ServerServiceTakeActionResponse
	36, // 38: protobuf.platform.service.Furnace.CreatePirServerToken:output_type -> protobuf.platform.token.GenerateTokenForPartyResponse
	37, // 39: protobuf.platform.service.Furnace.GetPirServerToken:output_type -> protobuf.platform.token.GetPartyTokenResponse
	30, // 40: protobuf.platform.service.Furnace.EnablePirServerToken:output_type -> google.protobuf.Empty
	38, // 41: protobuf.platform.service.Furnace.CreatePirClientService:output_type -> protobuf.platform.pir.CreatePirClientServiceResponse
	30, // 42: protobuf.platform.service.Furnace.UpdatePirClientService:output_type -> google.protobuf.Empty
	39, // 43: protobuf.platform.service.Furnace.GetPirClientServices:output_type -> protobuf.platform.pir.GetPirClientServicesResponse
	30, // 44: protobuf.platform.service.Furnace.DeletePirClientService:output_type -> google.protobuf.Empty
	40, // 45: protobuf.platform.service.Furnace.PirClientServiceTakeAction:output_type -> protobuf.platform.pir.ClientServiceTakeActionResponse
	41, // 46: protobuf.platform.service.Furnace.GetPirServerUsages:output_type -> protobuf.platform.pir.GetServerUsagesResponse
	42, // 47: protobuf.platform.service.Furnace.GetPirClientUsages:output_type -> protobuf.platform.pir.GetClientUsagesResponse
	43, // 48: protobuf.platform.service.Furnace.PirRequest:output_type -> protobuf.platform.pir.PirResponse
	44, // 49: protobuf.platform.service.Furnace.UpsertUsageNotifyReceiver:output_type -> protobuf.platform.apiusage.UpsertAPIUsageReceiverResponse
	45, // 50: protobuf.platform.service.Furnace.ListAPIUsages:output_type -> protobuf.platform.apiusage.ListAPIUsagesResponse
	46, // 51: protobuf.platform.service.Furnace.Factor3SVerifyQuery:output_type -> infra_adapter.online_service.Factor3SVerifyResponse
	47, // 52: protobuf.platform.service.Furnace.Factor3SVerifyMysqlDeploy:output_type -> infra_adapter.online_service.GrpcGWDeployResponse
	48, // 53: protobuf.platform.service.Furnace.UpdateServerData:output_type -> protobuf.platform.pir.UpdateServerDataResponse
	27, // [27:54] is the sub-list for method output_type
	0,  // [0:27] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_protobuf_mpc_virtual_service_platform_service_furnace_proto_init() }
func file_protobuf_mpc_virtual_service_platform_service_furnace_proto_init() {
	if File_protobuf_mpc_virtual_service_platform_service_furnace_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_mpc_virtual_service_platform_service_furnace_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protobuf_mpc_virtual_service_platform_service_furnace_proto_goTypes,
		DependencyIndexes: file_protobuf_mpc_virtual_service_platform_service_furnace_proto_depIdxs,
	}.Build()
	File_protobuf_mpc_virtual_service_platform_service_furnace_proto = out.File
	file_protobuf_mpc_virtual_service_platform_service_furnace_proto_rawDesc = nil
	file_protobuf_mpc_virtual_service_platform_service_furnace_proto_goTypes = nil
	file_protobuf_mpc_virtual_service_platform_service_furnace_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FurnaceClient is the client API for Furnace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FurnaceClient interface {
	ListVtables(ctx context.Context, in *vtable.ListVtablesRequest, opts ...grpc.CallOption) (*vtable.ListVtablesResponse, error)
	CreateOrUpdateCronJob(ctx context.Context, in *cron.CreateOrUpdateCronJobRequest, opts ...grpc.CallOption) (*cron.CreateOrUpdateCronJobResponse, error)
	ListCronJobs(ctx context.Context, in *cron.ListCronJobsRequest, opts ...grpc.CallOption) (*cron.ListCronJobsResponse, error)
	DeleteCronJob(ctx context.Context, in *cron.DeleteCronJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFurnaceStatus(ctx context.Context, in *furnacestatus.GetStatusRequest, opts ...grpc.CallOption) (*furnacestatus.GetStatusResponse, error)
	CreateVtables(ctx context.Context, in *vtable.CreateVtablesRequest, opts ...grpc.CallOption) (*vtable.CreateVtablesResponse, error)
	CreatePirServerService(ctx context.Context, in *pir.CreateServerServiceRequest, opts ...grpc.CallOption) (*pir.CreateServerServiceResponse, error)
	UpdatePirServerService(ctx context.Context, in *pir.UpdateServerServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPirServerServices(ctx context.Context, in *pir.GetServerServicesRequest, opts ...grpc.CallOption) (*pir.GetServerServicesResponse, error)
	DeletePirServerService(ctx context.Context, in *pir.DeleteServerServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PirServerServiceTakeAction(ctx context.Context, in *pir.ServerServiceTakeActionRequest, opts ...grpc.CallOption) (*pir.ServerServiceTakeActionResponse, error)
	CreatePirServerToken(ctx context.Context, in *token.GenerateTokenForPartyRequest, opts ...grpc.CallOption) (*token.GenerateTokenForPartyResponse, error)
	GetPirServerToken(ctx context.Context, in *token.GetPartyTokenRequest, opts ...grpc.CallOption) (*token.GetPartyTokenResponse, error)
	EnablePirServerToken(ctx context.Context, in *token.ActionOnPirServerToken, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreatePirClientService(ctx context.Context, in *pir.CreatePirClientServiceRequest, opts ...grpc.CallOption) (*pir.CreatePirClientServiceResponse, error)
	UpdatePirClientService(ctx context.Context, in *pir.UpdatePirClientServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPirClientServices(ctx context.Context, in *pir.GetPirClientServicesRequst, opts ...grpc.CallOption) (*pir.GetPirClientServicesResponse, error)
	DeletePirClientService(ctx context.Context, in *pir.DeleteClientServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PirClientServiceTakeAction(ctx context.Context, in *pir.ClientServiceTakeActionRequest, opts ...grpc.CallOption) (*pir.ClientServiceTakeActionResponse, error)
	GetPirServerUsages(ctx context.Context, in *pir.GetServerUsagesRequest, opts ...grpc.CallOption) (*pir.GetServerUsagesResponse, error)
	GetPirClientUsages(ctx context.Context, in *pir.GetClientUsagesRequest, opts ...grpc.CallOption) (*pir.GetClientUsagesResponse, error)
	PirRequest(ctx context.Context, in *pir.PirRequest, opts ...grpc.CallOption) (*pir.PirResponse, error)
	UpsertUsageNotifyReceiver(ctx context.Context, in *apiusage.UpsertAPIUsageReceiverRequest, opts ...grpc.CallOption) (*apiusage.UpsertAPIUsageReceiverResponse, error)
	ListAPIUsages(ctx context.Context, in *apiusage.ListAPIUsagesRequest, opts ...grpc.CallOption) (*apiusage.ListAPIUsagesResponse, error)
	// 用于前端查询的grpcgw service
	Factor3SVerifyQuery(ctx context.Context, in *online_service.Factor3SVerifyRequest, opts ...grpc.CallOption) (*online_service.Factor3SVerifyResponse, error)
	// 用于前端部署三要素server的grpcgw service -- 不再使用，统一使用take action
	Factor3SVerifyMysqlDeploy(ctx context.Context, in *online_service.GrpcGWDeployRequest, opts ...grpc.CallOption) (*online_service.GrpcGWDeployResponse, error)
	// 更新在线服务server端输入数据
	UpdateServerData(ctx context.Context, in *pir.UpdateServerDataRequest, opts ...grpc.CallOption) (*pir.UpdateServerDataResponse, error)
}

type furnaceClient struct {
	cc grpc.ClientConnInterface
}

func NewFurnaceClient(cc grpc.ClientConnInterface) FurnaceClient {
	return &furnaceClient{cc}
}

func (c *furnaceClient) ListVtables(ctx context.Context, in *vtable.ListVtablesRequest, opts ...grpc.CallOption) (*vtable.ListVtablesResponse, error) {
	out := new(vtable.ListVtablesResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/ListVtables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) CreateOrUpdateCronJob(ctx context.Context, in *cron.CreateOrUpdateCronJobRequest, opts ...grpc.CallOption) (*cron.CreateOrUpdateCronJobResponse, error) {
	out := new(cron.CreateOrUpdateCronJobResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/CreateOrUpdateCronJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) ListCronJobs(ctx context.Context, in *cron.ListCronJobsRequest, opts ...grpc.CallOption) (*cron.ListCronJobsResponse, error) {
	out := new(cron.ListCronJobsResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/ListCronJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) DeleteCronJob(ctx context.Context, in *cron.DeleteCronJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/DeleteCronJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) GetFurnaceStatus(ctx context.Context, in *furnacestatus.GetStatusRequest, opts ...grpc.CallOption) (*furnacestatus.GetStatusResponse, error) {
	out := new(furnacestatus.GetStatusResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/GetFurnaceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) CreateVtables(ctx context.Context, in *vtable.CreateVtablesRequest, opts ...grpc.CallOption) (*vtable.CreateVtablesResponse, error) {
	out := new(vtable.CreateVtablesResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/CreateVtables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) CreatePirServerService(ctx context.Context, in *pir.CreateServerServiceRequest, opts ...grpc.CallOption) (*pir.CreateServerServiceResponse, error) {
	out := new(pir.CreateServerServiceResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/CreatePirServerService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) UpdatePirServerService(ctx context.Context, in *pir.UpdateServerServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/UpdatePirServerService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) GetPirServerServices(ctx context.Context, in *pir.GetServerServicesRequest, opts ...grpc.CallOption) (*pir.GetServerServicesResponse, error) {
	out := new(pir.GetServerServicesResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/GetPirServerServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) DeletePirServerService(ctx context.Context, in *pir.DeleteServerServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/DeletePirServerService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) PirServerServiceTakeAction(ctx context.Context, in *pir.ServerServiceTakeActionRequest, opts ...grpc.CallOption) (*pir.ServerServiceTakeActionResponse, error) {
	out := new(pir.ServerServiceTakeActionResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/PirServerServiceTakeAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) CreatePirServerToken(ctx context.Context, in *token.GenerateTokenForPartyRequest, opts ...grpc.CallOption) (*token.GenerateTokenForPartyResponse, error) {
	out := new(token.GenerateTokenForPartyResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/CreatePirServerToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) GetPirServerToken(ctx context.Context, in *token.GetPartyTokenRequest, opts ...grpc.CallOption) (*token.GetPartyTokenResponse, error) {
	out := new(token.GetPartyTokenResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/GetPirServerToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) EnablePirServerToken(ctx context.Context, in *token.ActionOnPirServerToken, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/EnablePirServerToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) CreatePirClientService(ctx context.Context, in *pir.CreatePirClientServiceRequest, opts ...grpc.CallOption) (*pir.CreatePirClientServiceResponse, error) {
	out := new(pir.CreatePirClientServiceResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/CreatePirClientService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) UpdatePirClientService(ctx context.Context, in *pir.UpdatePirClientServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/UpdatePirClientService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) GetPirClientServices(ctx context.Context, in *pir.GetPirClientServicesRequst, opts ...grpc.CallOption) (*pir.GetPirClientServicesResponse, error) {
	out := new(pir.GetPirClientServicesResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/GetPirClientServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) DeletePirClientService(ctx context.Context, in *pir.DeleteClientServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/DeletePirClientService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) PirClientServiceTakeAction(ctx context.Context, in *pir.ClientServiceTakeActionRequest, opts ...grpc.CallOption) (*pir.ClientServiceTakeActionResponse, error) {
	out := new(pir.ClientServiceTakeActionResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/PirClientServiceTakeAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) GetPirServerUsages(ctx context.Context, in *pir.GetServerUsagesRequest, opts ...grpc.CallOption) (*pir.GetServerUsagesResponse, error) {
	out := new(pir.GetServerUsagesResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/GetPirServerUsages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) GetPirClientUsages(ctx context.Context, in *pir.GetClientUsagesRequest, opts ...grpc.CallOption) (*pir.GetClientUsagesResponse, error) {
	out := new(pir.GetClientUsagesResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/GetPirClientUsages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) PirRequest(ctx context.Context, in *pir.PirRequest, opts ...grpc.CallOption) (*pir.PirResponse, error) {
	out := new(pir.PirResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/PirRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) UpsertUsageNotifyReceiver(ctx context.Context, in *apiusage.UpsertAPIUsageReceiverRequest, opts ...grpc.CallOption) (*apiusage.UpsertAPIUsageReceiverResponse, error) {
	out := new(apiusage.UpsertAPIUsageReceiverResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/UpsertUsageNotifyReceiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) ListAPIUsages(ctx context.Context, in *apiusage.ListAPIUsagesRequest, opts ...grpc.CallOption) (*apiusage.ListAPIUsagesResponse, error) {
	out := new(apiusage.ListAPIUsagesResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/ListAPIUsages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) Factor3SVerifyQuery(ctx context.Context, in *online_service.Factor3SVerifyRequest, opts ...grpc.CallOption) (*online_service.Factor3SVerifyResponse, error) {
	out := new(online_service.Factor3SVerifyResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/Factor3SVerifyQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) Factor3SVerifyMysqlDeploy(ctx context.Context, in *online_service.GrpcGWDeployRequest, opts ...grpc.CallOption) (*online_service.GrpcGWDeployResponse, error) {
	out := new(online_service.GrpcGWDeployResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/Factor3SVerifyMysqlDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) UpdateServerData(ctx context.Context, in *pir.UpdateServerDataRequest, opts ...grpc.CallOption) (*pir.UpdateServerDataResponse, error) {
	out := new(pir.UpdateServerDataResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/UpdateServerData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FurnaceServer is the server API for Furnace service.
type FurnaceServer interface {
	ListVtables(context.Context, *vtable.ListVtablesRequest) (*vtable.ListVtablesResponse, error)
	CreateOrUpdateCronJob(context.Context, *cron.CreateOrUpdateCronJobRequest) (*cron.CreateOrUpdateCronJobResponse, error)
	ListCronJobs(context.Context, *cron.ListCronJobsRequest) (*cron.ListCronJobsResponse, error)
	DeleteCronJob(context.Context, *cron.DeleteCronJobRequest) (*emptypb.Empty, error)
	GetFurnaceStatus(context.Context, *furnacestatus.GetStatusRequest) (*furnacestatus.GetStatusResponse, error)
	CreateVtables(context.Context, *vtable.CreateVtablesRequest) (*vtable.CreateVtablesResponse, error)
	CreatePirServerService(context.Context, *pir.CreateServerServiceRequest) (*pir.CreateServerServiceResponse, error)
	UpdatePirServerService(context.Context, *pir.UpdateServerServiceRequest) (*emptypb.Empty, error)
	GetPirServerServices(context.Context, *pir.GetServerServicesRequest) (*pir.GetServerServicesResponse, error)
	DeletePirServerService(context.Context, *pir.DeleteServerServiceRequest) (*emptypb.Empty, error)
	PirServerServiceTakeAction(context.Context, *pir.ServerServiceTakeActionRequest) (*pir.ServerServiceTakeActionResponse, error)
	CreatePirServerToken(context.Context, *token.GenerateTokenForPartyRequest) (*token.GenerateTokenForPartyResponse, error)
	GetPirServerToken(context.Context, *token.GetPartyTokenRequest) (*token.GetPartyTokenResponse, error)
	EnablePirServerToken(context.Context, *token.ActionOnPirServerToken) (*emptypb.Empty, error)
	CreatePirClientService(context.Context, *pir.CreatePirClientServiceRequest) (*pir.CreatePirClientServiceResponse, error)
	UpdatePirClientService(context.Context, *pir.UpdatePirClientServiceRequest) (*emptypb.Empty, error)
	GetPirClientServices(context.Context, *pir.GetPirClientServicesRequst) (*pir.GetPirClientServicesResponse, error)
	DeletePirClientService(context.Context, *pir.DeleteClientServiceRequest) (*emptypb.Empty, error)
	PirClientServiceTakeAction(context.Context, *pir.ClientServiceTakeActionRequest) (*pir.ClientServiceTakeActionResponse, error)
	GetPirServerUsages(context.Context, *pir.GetServerUsagesRequest) (*pir.GetServerUsagesResponse, error)
	GetPirClientUsages(context.Context, *pir.GetClientUsagesRequest) (*pir.GetClientUsagesResponse, error)
	PirRequest(context.Context, *pir.PirRequest) (*pir.PirResponse, error)
	UpsertUsageNotifyReceiver(context.Context, *apiusage.UpsertAPIUsageReceiverRequest) (*apiusage.UpsertAPIUsageReceiverResponse, error)
	ListAPIUsages(context.Context, *apiusage.ListAPIUsagesRequest) (*apiusage.ListAPIUsagesResponse, error)
	// 用于前端查询的grpcgw service
	Factor3SVerifyQuery(context.Context, *online_service.Factor3SVerifyRequest) (*online_service.Factor3SVerifyResponse, error)
	// 用于前端部署三要素server的grpcgw service -- 不再使用，统一使用take action
	Factor3SVerifyMysqlDeploy(context.Context, *online_service.GrpcGWDeployRequest) (*online_service.GrpcGWDeployResponse, error)
	// 更新在线服务server端输入数据
	UpdateServerData(context.Context, *pir.UpdateServerDataRequest) (*pir.UpdateServerDataResponse, error)
}

// UnimplementedFurnaceServer can be embedded to have forward compatible implementations.
type UnimplementedFurnaceServer struct {
}

func (*UnimplementedFurnaceServer) ListVtables(context.Context, *vtable.ListVtablesRequest) (*vtable.ListVtablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVtables not implemented")
}
func (*UnimplementedFurnaceServer) CreateOrUpdateCronJob(context.Context, *cron.CreateOrUpdateCronJobRequest) (*cron.CreateOrUpdateCronJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateCronJob not implemented")
}
func (*UnimplementedFurnaceServer) ListCronJobs(context.Context, *cron.ListCronJobsRequest) (*cron.ListCronJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCronJobs not implemented")
}
func (*UnimplementedFurnaceServer) DeleteCronJob(context.Context, *cron.DeleteCronJobRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCronJob not implemented")
}
func (*UnimplementedFurnaceServer) GetFurnaceStatus(context.Context, *furnacestatus.GetStatusRequest) (*furnacestatus.GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFurnaceStatus not implemented")
}
func (*UnimplementedFurnaceServer) CreateVtables(context.Context, *vtable.CreateVtablesRequest) (*vtable.CreateVtablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVtables not implemented")
}
func (*UnimplementedFurnaceServer) CreatePirServerService(context.Context, *pir.CreateServerServiceRequest) (*pir.CreateServerServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePirServerService not implemented")
}
func (*UnimplementedFurnaceServer) UpdatePirServerService(context.Context, *pir.UpdateServerServiceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePirServerService not implemented")
}
func (*UnimplementedFurnaceServer) GetPirServerServices(context.Context, *pir.GetServerServicesRequest) (*pir.GetServerServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPirServerServices not implemented")
}
func (*UnimplementedFurnaceServer) DeletePirServerService(context.Context, *pir.DeleteServerServiceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePirServerService not implemented")
}
func (*UnimplementedFurnaceServer) PirServerServiceTakeAction(context.Context, *pir.ServerServiceTakeActionRequest) (*pir.ServerServiceTakeActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PirServerServiceTakeAction not implemented")
}
func (*UnimplementedFurnaceServer) CreatePirServerToken(context.Context, *token.GenerateTokenForPartyRequest) (*token.GenerateTokenForPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePirServerToken not implemented")
}
func (*UnimplementedFurnaceServer) GetPirServerToken(context.Context, *token.GetPartyTokenRequest) (*token.GetPartyTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPirServerToken not implemented")
}
func (*UnimplementedFurnaceServer) EnablePirServerToken(context.Context, *token.ActionOnPirServerToken) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnablePirServerToken not implemented")
}
func (*UnimplementedFurnaceServer) CreatePirClientService(context.Context, *pir.CreatePirClientServiceRequest) (*pir.CreatePirClientServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePirClientService not implemented")
}
func (*UnimplementedFurnaceServer) UpdatePirClientService(context.Context, *pir.UpdatePirClientServiceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePirClientService not implemented")
}
func (*UnimplementedFurnaceServer) GetPirClientServices(context.Context, *pir.GetPirClientServicesRequst) (*pir.GetPirClientServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPirClientServices not implemented")
}
func (*UnimplementedFurnaceServer) DeletePirClientService(context.Context, *pir.DeleteClientServiceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePirClientService not implemented")
}
func (*UnimplementedFurnaceServer) PirClientServiceTakeAction(context.Context, *pir.ClientServiceTakeActionRequest) (*pir.ClientServiceTakeActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PirClientServiceTakeAction not implemented")
}
func (*UnimplementedFurnaceServer) GetPirServerUsages(context.Context, *pir.GetServerUsagesRequest) (*pir.GetServerUsagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPirServerUsages not implemented")
}
func (*UnimplementedFurnaceServer) GetPirClientUsages(context.Context, *pir.GetClientUsagesRequest) (*pir.GetClientUsagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPirClientUsages not implemented")
}
func (*UnimplementedFurnaceServer) PirRequest(context.Context, *pir.PirRequest) (*pir.PirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PirRequest not implemented")
}
func (*UnimplementedFurnaceServer) UpsertUsageNotifyReceiver(context.Context, *apiusage.UpsertAPIUsageReceiverRequest) (*apiusage.UpsertAPIUsageReceiverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertUsageNotifyReceiver not implemented")
}
func (*UnimplementedFurnaceServer) ListAPIUsages(context.Context, *apiusage.ListAPIUsagesRequest) (*apiusage.ListAPIUsagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPIUsages not implemented")
}
func (*UnimplementedFurnaceServer) Factor3SVerifyQuery(context.Context, *online_service.Factor3SVerifyRequest) (*online_service.Factor3SVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Factor3SVerifyQuery not implemented")
}
func (*UnimplementedFurnaceServer) Factor3SVerifyMysqlDeploy(context.Context, *online_service.GrpcGWDeployRequest) (*online_service.GrpcGWDeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Factor3SVerifyMysqlDeploy not implemented")
}
func (*UnimplementedFurnaceServer) UpdateServerData(context.Context, *pir.UpdateServerDataRequest) (*pir.UpdateServerDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerData not implemented")
}

func RegisterFurnaceServer(s *grpc.Server, srv FurnaceServer) {
	s.RegisterService(&_Furnace_serviceDesc, srv)
}

func _Furnace_ListVtables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vtable.ListVtablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).ListVtables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/ListVtables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).ListVtables(ctx, req.(*vtable.ListVtablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_CreateOrUpdateCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cron.CreateOrUpdateCronJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).CreateOrUpdateCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/CreateOrUpdateCronJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).CreateOrUpdateCronJob(ctx, req.(*cron.CreateOrUpdateCronJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_ListCronJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cron.ListCronJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).ListCronJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/ListCronJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).ListCronJobs(ctx, req.(*cron.ListCronJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_DeleteCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cron.DeleteCronJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).DeleteCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/DeleteCronJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).DeleteCronJob(ctx, req.(*cron.DeleteCronJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_GetFurnaceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(furnacestatus.GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).GetFurnaceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/GetFurnaceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).GetFurnaceStatus(ctx, req.(*furnacestatus.GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_CreateVtables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vtable.CreateVtablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).CreateVtables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/CreateVtables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).CreateVtables(ctx, req.(*vtable.CreateVtablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_CreatePirServerService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pir.CreateServerServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).CreatePirServerService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/CreatePirServerService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).CreatePirServerService(ctx, req.(*pir.CreateServerServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_UpdatePirServerService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pir.UpdateServerServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).UpdatePirServerService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/UpdatePirServerService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).UpdatePirServerService(ctx, req.(*pir.UpdateServerServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_GetPirServerServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pir.GetServerServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).GetPirServerServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/GetPirServerServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).GetPirServerServices(ctx, req.(*pir.GetServerServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_DeletePirServerService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pir.DeleteServerServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).DeletePirServerService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/DeletePirServerService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).DeletePirServerService(ctx, req.(*pir.DeleteServerServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_PirServerServiceTakeAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pir.ServerServiceTakeActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).PirServerServiceTakeAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/PirServerServiceTakeAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).PirServerServiceTakeAction(ctx, req.(*pir.ServerServiceTakeActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_CreatePirServerToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(token.GenerateTokenForPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).CreatePirServerToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/CreatePirServerToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).CreatePirServerToken(ctx, req.(*token.GenerateTokenForPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_GetPirServerToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(token.GetPartyTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).GetPirServerToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/GetPirServerToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).GetPirServerToken(ctx, req.(*token.GetPartyTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_EnablePirServerToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(token.ActionOnPirServerToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).EnablePirServerToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/EnablePirServerToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).EnablePirServerToken(ctx, req.(*token.ActionOnPirServerToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_CreatePirClientService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pir.CreatePirClientServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).CreatePirClientService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/CreatePirClientService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).CreatePirClientService(ctx, req.(*pir.CreatePirClientServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_UpdatePirClientService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pir.UpdatePirClientServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).UpdatePirClientService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/UpdatePirClientService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).UpdatePirClientService(ctx, req.(*pir.UpdatePirClientServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_GetPirClientServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pir.GetPirClientServicesRequst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).GetPirClientServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/GetPirClientServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).GetPirClientServices(ctx, req.(*pir.GetPirClientServicesRequst))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_DeletePirClientService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pir.DeleteClientServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).DeletePirClientService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/DeletePirClientService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).DeletePirClientService(ctx, req.(*pir.DeleteClientServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_PirClientServiceTakeAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pir.ClientServiceTakeActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).PirClientServiceTakeAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/PirClientServiceTakeAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).PirClientServiceTakeAction(ctx, req.(*pir.ClientServiceTakeActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_GetPirServerUsages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pir.GetServerUsagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).GetPirServerUsages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/GetPirServerUsages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).GetPirServerUsages(ctx, req.(*pir.GetServerUsagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_GetPirClientUsages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pir.GetClientUsagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).GetPirClientUsages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/GetPirClientUsages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).GetPirClientUsages(ctx, req.(*pir.GetClientUsagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_PirRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pir.PirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).PirRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/PirRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).PirRequest(ctx, req.(*pir.PirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_UpsertUsageNotifyReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(apiusage.UpsertAPIUsageReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).UpsertUsageNotifyReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/UpsertUsageNotifyReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).UpsertUsageNotifyReceiver(ctx, req.(*apiusage.UpsertAPIUsageReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_ListAPIUsages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(apiusage.ListAPIUsagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).ListAPIUsages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/ListAPIUsages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).ListAPIUsages(ctx, req.(*apiusage.ListAPIUsagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_Factor3SVerifyQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(online_service.Factor3SVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).Factor3SVerifyQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/Factor3SVerifyQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).Factor3SVerifyQuery(ctx, req.(*online_service.Factor3SVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_Factor3SVerifyMysqlDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(online_service.GrpcGWDeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).Factor3SVerifyMysqlDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/Factor3SVerifyMysqlDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).Factor3SVerifyMysqlDeploy(ctx, req.(*online_service.GrpcGWDeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_UpdateServerData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pir.UpdateServerDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).UpdateServerData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/UpdateServerData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).UpdateServerData(ctx, req.(*pir.UpdateServerDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Furnace_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.platform.service.Furnace",
	HandlerType: (*FurnaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVtables",
			Handler:    _Furnace_ListVtables_Handler,
		},
		{
			MethodName: "CreateOrUpdateCronJob",
			Handler:    _Furnace_CreateOrUpdateCronJob_Handler,
		},
		{
			MethodName: "ListCronJobs",
			Handler:    _Furnace_ListCronJobs_Handler,
		},
		{
			MethodName: "DeleteCronJob",
			Handler:    _Furnace_DeleteCronJob_Handler,
		},
		{
			MethodName: "GetFurnaceStatus",
			Handler:    _Furnace_GetFurnaceStatus_Handler,
		},
		{
			MethodName: "CreateVtables",
			Handler:    _Furnace_CreateVtables_Handler,
		},
		{
			MethodName: "CreatePirServerService",
			Handler:    _Furnace_CreatePirServerService_Handler,
		},
		{
			MethodName: "UpdatePirServerService",
			Handler:    _Furnace_UpdatePirServerService_Handler,
		},
		{
			MethodName: "GetPirServerServices",
			Handler:    _Furnace_GetPirServerServices_Handler,
		},
		{
			MethodName: "DeletePirServerService",
			Handler:    _Furnace_DeletePirServerService_Handler,
		},
		{
			MethodName: "PirServerServiceTakeAction",
			Handler:    _Furnace_PirServerServiceTakeAction_Handler,
		},
		{
			MethodName: "CreatePirServerToken",
			Handler:    _Furnace_CreatePirServerToken_Handler,
		},
		{
			MethodName: "GetPirServerToken",
			Handler:    _Furnace_GetPirServerToken_Handler,
		},
		{
			MethodName: "EnablePirServerToken",
			Handler:    _Furnace_EnablePirServerToken_Handler,
		},
		{
			MethodName: "CreatePirClientService",
			Handler:    _Furnace_CreatePirClientService_Handler,
		},
		{
			MethodName: "UpdatePirClientService",
			Handler:    _Furnace_UpdatePirClientService_Handler,
		},
		{
			MethodName: "GetPirClientServices",
			Handler:    _Furnace_GetPirClientServices_Handler,
		},
		{
			MethodName: "DeletePirClientService",
			Handler:    _Furnace_DeletePirClientService_Handler,
		},
		{
			MethodName: "PirClientServiceTakeAction",
			Handler:    _Furnace_PirClientServiceTakeAction_Handler,
		},
		{
			MethodName: "GetPirServerUsages",
			Handler:    _Furnace_GetPirServerUsages_Handler,
		},
		{
			MethodName: "GetPirClientUsages",
			Handler:    _Furnace_GetPirClientUsages_Handler,
		},
		{
			MethodName: "PirRequest",
			Handler:    _Furnace_PirRequest_Handler,
		},
		{
			MethodName: "UpsertUsageNotifyReceiver",
			Handler:    _Furnace_UpsertUsageNotifyReceiver_Handler,
		},
		{
			MethodName: "ListAPIUsages",
			Handler:    _Furnace_ListAPIUsages_Handler,
		},
		{
			MethodName: "Factor3SVerifyQuery",
			Handler:    _Furnace_Factor3SVerifyQuery_Handler,
		},
		{
			MethodName: "Factor3SVerifyMysqlDeploy",
			Handler:    _Furnace_Factor3SVerifyMysqlDeploy_Handler,
		},
		{
			MethodName: "UpdateServerData",
			Handler:    _Furnace_UpdateServerData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/mpc_virtual_service/platform/service/furnace.proto",
}
