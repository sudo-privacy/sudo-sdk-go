// Copyright 2022 Sudo Technology Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.1
// source: sudo/protobuf/mpc_virtual_service/platform/service/furnace.proto

package platformpb

import (
	context "context"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protobuf "github.com/sudo-privacy/sudo-sdk-go/pkg/protobuf/basic/protobuf"
	datasource "github.com/sudo-privacy/sudo-sdk-go/pkg/protobuf/basic/protobuf/virtualservice/platformpb/datasource"
	misc "github.com/sudo-privacy/sudo-sdk-go/pkg/protobuf/basic/protobuf/virtualservice/platformpb/misc"
	_ "github.com/sudo-privacy/sudo-sdk-go/pkg/protobuf/basic/protobuf/virtualservice/platformpb/options"
	resource "github.com/sudo-privacy/sudo-sdk-go/pkg/protobuf/basic/protobuf/virtualservice/platformpb/resource"
	vtable "github.com/sudo-privacy/sudo-sdk-go/pkg/protobuf/basic/protobuf/virtualservice/platformpb/vtable"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_sudo_protobuf_mpc_virtual_service_platform_service_furnace_proto protoreflect.FileDescriptor

var file_sudo_protobuf_mpc_virtual_service_platform_service_furnace_proto_rawDesc = []byte{
	0x0a, 0x40, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x66, 0x75, 0x72, 0x6e, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x73,
	0x75, 0x64, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3c,
	0x73, 0x75, 0x64, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x70,
	0x63, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x73, 0x75,
	0x64, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x70, 0x63, 0x5f,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x69, 0x73, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x73,
	0x75, 0x64, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x70, 0x63,
	0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x32, 0xb7, 0x23, 0x0a, 0x07, 0x46, 0x75, 0x72, 0x6e, 0x61, 0x63, 0x65, 0x12, 0x77, 0x0a,
	0x04, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x28, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6d,
	0x69, 0x73, 0x63, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6d, 0x69, 0x73, 0x63, 0x2e, 0x45, 0x63,
	0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0b, 0x12, 0x09, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x63, 0x68, 0x6f, 0x92, 0x41, 0x06,
	0x0a, 0x04, 0x4d, 0x69, 0x73, 0x63, 0x12, 0x9b, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x73, 0x75, 0x64, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0xc2, 0x3e, 0x03, 0x0a, 0x01, 0x04, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x56, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x73, 0x75, 0x64, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x56, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x9f, 0x01, 0x0a, 0x15, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x56, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3b, 0x2e, 0x73, 0x75,
	0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x65, 0x72, 0x6d, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x32,
	0x70, 0x72, 0x6f, 0x6a, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x56, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x56, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3b, 0x2e,
	0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x44, 0x65,
	0x74, 0x61, 0x63, 0x68, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x65, 0x72, 0x6d, 0x2f, 0x72, 0x6d, 0x2d, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x32, 0x70, 0x72, 0x6f, 0x6a, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x56, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x2a, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0xc2, 0x3e, 0x03, 0x0a, 0x01, 0x03, 0x92, 0x41, 0x08, 0x0a,
	0x06, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x73,
	0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x1a, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x56, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x56, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x30, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x3a, 0x01, 0x2a, 0xc2, 0x3e, 0x03, 0x0a, 0x01, 0x05,
	0x92, 0x41, 0x08, 0x0a, 0x06, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x3d, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x33,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x2d, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x2d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x56, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x56, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x37, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xb5,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x3c, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x72, 0x63, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0xc4, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x3f, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x40, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x1a, 0x0f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41,
	0x0c, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0xc6, 0x01,
	0x0a, 0x15, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3d, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x3c, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0xbe, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3b, 0x2e, 0x73,
	0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x73, 0x75, 0x64, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22,
	0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0xca, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3e, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3f, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x41, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x32, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a,
	0x01, 0x2a, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x97, 0x01, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x38, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0a, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0xb0, 0x01, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x39, 0x2e, 0x73,
	0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x92, 0x41, 0x0c,
	0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0xbf, 0x01, 0x0a,
	0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x3b, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c,
	0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0xc2, 0x3e, 0x03, 0x0a, 0x01, 0x03, 0x92,
	0x41, 0x0c, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x99,
	0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x3b, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15,
	0x1a, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x3a, 0x01, 0x2a, 0xc2, 0x3e, 0x03, 0x0a, 0x01, 0x03, 0x92, 0x41, 0x0c, 0x0a, 0x0a,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x3b, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x2a, 0x10, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x01,
	0x2a, 0xc2, 0x3e, 0x03, 0x0a, 0x01, 0x03, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0xb6, 0x01, 0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x12, 0x38, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x68,
	0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0xc2, 0x3e, 0x03, 0x0a, 0x01, 0x02,
	0x92, 0x41, 0x0c, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0xaa, 0x01, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x35,
	0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0xc2, 0x3e, 0x03, 0x0a, 0x01, 0x02, 0x92, 0x41, 0x0c,
	0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0xa7, 0x01, 0x0a,
	0x09, 0x44, 0x65, 0x73, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x2e, 0x73, 0x75, 0x64,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12,
	0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0xc2, 0x3e, 0x03, 0x0a, 0x01, 0x02, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x07, 0x57, 0x61, 0x6c, 0x6b, 0x44,
	0x69, 0x72, 0x12, 0x2b, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x2e, 0x57, 0x61, 0x6c, 0x6b, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x57, 0x61,
	0x6c, 0x6b, 0x44, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x66, 0x73,
	0x2f, 0x77, 0x61, 0x6c, 0x6b, 0x64, 0x69, 0x72, 0xc2, 0x3e, 0x03, 0x0a, 0x01, 0x02, 0x92, 0x41,
	0x0c, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0xab, 0x01,
	0x0a, 0x0c, 0x44, 0x65, 0x73, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x37,
	0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x12, 0x12, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x66, 0x73, 0x2f, 0x64, 0x65,
	0x73, 0x63, 0x66, 0x69, 0x6c, 0x65, 0xc2, 0x3e, 0x03, 0x0a, 0x01, 0x02, 0x92, 0x41, 0x0c, 0x0a,
	0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x81, 0x06, 0x5a, 0x29,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x70, 0x62, 0x92, 0x41, 0xd2, 0x05, 0x12, 0xb5, 0x03,
	0x0a, 0x0c, 0x50, 0x72, 0x69, 0x76, 0x4d, 0x65, 0x73, 0x68, 0x20, 0x41, 0x50, 0x49, 0x12, 0x87,
	0x02, 0xe9, 0x9a, 0x90, 0xe7, 0xa7, 0x81, 0xe8, 0xae, 0xa1, 0xe7, 0xae, 0x97, 0xe5, 0xb9, 0xb3,
	0xe5, 0x8f, 0xb0, 0xe7, 0x9a, 0x84, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe5, 0x8d, 0x95, 0xe5,
	0x85, 0x83, 0xef, 0xbc, 0x8c, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe9, 0x9a, 0x90, 0xe7, 0xa7,
	0x81, 0xe8, 0xae, 0xa1, 0xe7, 0xae, 0x97, 0xe4, 0xbb, 0xa5, 0xe5, 0x8f, 0x8a, 0xe7, 0x9b, 0xb8,
	0xe5, 0x85, 0xb3, 0xe7, 0x9a, 0x84, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe3, 0x80, 0x81, 0xe5,
	0x8f, 0x82, 0xe4, 0xb8, 0x8e, 0xe6, 0x96, 0xb9, 0xe7, 0xad, 0x89, 0xe7, 0x9b, 0xb8, 0xe5, 0x85,
	0xb3, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0xe7, 0x9a, 0x84, 0x41, 0x50, 0x49, 0xef, 0xbc, 0x8c,
	0xe6, 0x98, 0xaf, 0x50, 0x72, 0x69, 0x76, 0x6d, 0x65, 0x73, 0x68, 0xe5, 0xaf, 0xb9, 0xe5, 0xa4,
	0x96, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe9, 0x9a, 0x90, 0xe7, 0xa7, 0x81, 0xe8, 0xae, 0xa1,
	0xe7, 0xae, 0x97, 0xe8, 0x83, 0xbd, 0xe5, 0x8a, 0x9b, 0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0xbb, 0xe8,
	0xa6, 0x81, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8e, 0xe5, 0x89,
	0x8d, 0xe7, 0xab, 0xaf, 0x57, 0x65, 0x62, 0x20, 0x55, 0x49, 0xe4, 0xba, 0xa4, 0xe4, 0xba, 0x92,
	0xe7, 0x9a, 0x84, 0xe5, 0x90, 0x8e, 0xe7, 0xab, 0xaf, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xef,
	0xbc, 0x8c, 0xe4, 0xbb, 0xa5, 0xe5, 0x8f, 0x8a, 0x53, 0x44, 0x4b, 0xe7, 0xad, 0x89, 0xe5, 0x85,
	0xb6, 0xe5, 0xae, 0x83, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9a, 0x90, 0xe7, 0xa7, 0x81,
	0xe8, 0xae, 0xa1, 0xe7, 0xae, 0x97, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0xe7, 0x9a, 0x84, 0xe5,
	0x85, 0xa5, 0xe5, 0x8f, 0xa3, 0xe3, 0x80, 0x82, 0x22, 0x43, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x76,
	0x4d, 0x65, 0x73, 0x68, 0x12, 0x1b, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x6d, 0x65, 0x73,
	0x68, 0x1a, 0x1a, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x40, 0x73, 0x75,
	0x64, 0x6f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x2a, 0x4f, 0x0a,
	0x12, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2d, 0x32, 0x2e, 0x30, 0x20, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x6d, 0x65, 0x73, 0x68,
	0x2f, 0x73, 0x75, 0x64, 0x6f, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x32, 0x05,
	0x31, 0x2e, 0x30, 0x2e, 0x30, 0x2a, 0x02, 0x02, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0xce, 0x01,
	0x0a, 0x1d, 0x0a, 0x06, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x13, 0x08, 0x02, 0x1a, 0x0d,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x0a,
	0xac, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x2d, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x12, 0x9a, 0x01, 0x08, 0x02, 0x12, 0x81, 0x01, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe5,
	0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe7, 0x9a, 0x84, 0xe5, 0x8f,
	0x82, 0xe4, 0xb8, 0x8e, 0xe6, 0x96, 0xb9, 0x69, 0x64, 0xef, 0xbc, 0x9b, 0xe5, 0x8f, 0xaa, 0xe6,
	0x9c, 0x89, 0xe5, 0xbd, 0x93, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe7, 0xab, 0xaf, 0xe9, 0x85,
	0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xb8, 0xad, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x60, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x44, 0x60, 0xe6, 0x97, 0xb6, 0xe6, 0x89, 0x8d, 0xe4, 0xbc, 0x9a, 0xe7, 0x94, 0x9f, 0xe6,
	0x95, 0x88, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x80, 0xe8, 0x88, 0xac, 0xe7, 0x94, 0xa8, 0xe4, 0xba,
	0x8e, 0xe8, 0xb0, 0x83, 0xe8, 0xaf, 0x95, 0xe3, 0x80, 0x82, 0x1a, 0x10, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x2d, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2d, 0x49, 0x44, 0x20, 0x02, 0x62, 0x1f,
	0x0a, 0x0a, 0x0a, 0x06, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x00, 0x0a, 0x11, 0x0a, 0x0d,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x2d, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x00, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_sudo_protobuf_mpc_virtual_service_platform_service_furnace_proto_goTypes = []interface{}{
	(*misc.EchoRequest)(nil),                          // 0: sudo.protobuf.platform.misc.EchoRequest
	(*vtable.ListVtablesRequest)(nil),                 // 1: sudo.protobuf.platform.vtable.ListVtablesRequest
	(*vtable.CreateVtableRequest)(nil),                // 2: sudo.protobuf.platform.vtable.CreateVtableRequest
	(*vtable.AttachVtableToProjectRequest)(nil),       // 3: sudo.protobuf.platform.vtable.AttachVtableToProjectRequest
	(*vtable.DetachVtableToProjectRequest)(nil),       // 4: sudo.protobuf.platform.vtable.DetachVtableToProjectRequest
	(*vtable.DeleteVtableRequest)(nil),                // 5: sudo.protobuf.platform.vtable.DeleteVtableRequest
	(*vtable.UpdateVtableRequest)(nil),                // 6: sudo.protobuf.platform.vtable.UpdateVtableRequest
	(*vtable.SyncVtableRequest)(nil),                  // 7: sudo.protobuf.platform.vtable.SyncVtableRequest
	(*emptypb.Empty)(nil),                             // 8: google.protobuf.Empty
	(*vtable.GetVtableRawDataRequest)(nil),            // 9: sudo.protobuf.platform.vtable.GetVtableRawDataRequest
	(*datasource.GetAllDataSourcesRequest)(nil),       // 10: sudo.protobuf.platform.data_source.GetAllDataSourcesRequest
	(*datasource.SendFileToDataSourceRequest)(nil),    // 11: sudo.protobuf.platform.data_source.SendFileToDataSourceRequest
	(*resource.AllocatePartyResourceRequest)(nil),     // 12: sudo.protobuf.platform.resource.AllocatePartyResourceRequest
	(*resource.ReleasePartyResourceRequest)(nil),      // 13: sudo.protobuf.platform.resource.ReleasePartyResourceRequest
	(*resource.DeployPartyResourceRequest)(nil),       // 14: sudo.protobuf.platform.resource.DeployPartyResourceRequest
	(*resource.GetPartyResourceStatusRequest)(nil),    // 15: sudo.protobuf.platform.resource.GetPartyResourceStatusRequest
	(*resource.UpdatePartyResourceStatusRequest)(nil), // 16: sudo.protobuf.platform.resource.UpdatePartyResourceStatusRequest
	(*resource.FinishPartyBlockRequest)(nil),          // 17: sudo.protobuf.platform.resource.FinishPartyBlockRequest
	(*datasource.GetDataSourcesRequest)(nil),          // 18: sudo.protobuf.platform.data_source.GetDataSourcesRequest
	(*datasource.CreateDataSourceRequest)(nil),        // 19: sudo.protobuf.platform.data_source.CreateDataSourceRequest
	(*datasource.UpdateDataSourceRequest)(nil),        // 20: sudo.protobuf.platform.data_source.UpdateDataSourceRequest
	(*datasource.DeleteDataSourceRequest)(nil),        // 21: sudo.protobuf.platform.data_source.DeleteDataSourceRequest
	(*datasource.ShowDatabasesRequest)(nil),           // 22: sudo.protobuf.platform.data_source.ShowDatabasesRequest
	(*datasource.ShowTablesRequest)(nil),              // 23: sudo.protobuf.platform.data_source.ShowTablesRequest
	(*datasource.DescTableRequest)(nil),               // 24: sudo.protobuf.platform.data_source.DescTableRequest
	(*protobuf.WalkDirRequest)(nil),                   // 25: sudo.protobuf.infra_adapter.WalkDirRequest
	(*datasource.DescFileNodeRequest)(nil),            // 26: sudo.protobuf.platform.data_source.DescFileNodeRequest
	(*misc.EchoResponse)(nil),                         // 27: sudo.protobuf.platform.misc.EchoResponse
	(*vtable.ListVtablesResponse)(nil),                // 28: sudo.protobuf.platform.vtable.ListVtablesResponse
	(*vtable.CreateVtableResponse)(nil),               // 29: sudo.protobuf.platform.vtable.CreateVtableResponse
	(*vtable.UpdateVtableResponse)(nil),               // 30: sudo.protobuf.platform.vtable.UpdateVtableResponse
	(*vtable.VtableColumnsVisibilitySetting)(nil),     // 31: sudo.protobuf.platform.vtable.VtableColumnsVisibilitySetting
	(*vtable.GetVtableRawDataResponse)(nil),           // 32: sudo.protobuf.platform.vtable.GetVtableRawDataResponse
	(*datasource.GetAllDataSourcesResponse)(nil),      // 33: sudo.protobuf.platform.data_source.GetAllDataSourcesResponse
	(*datasource.SendFileToDataSourceResponse)(nil),   // 34: sudo.protobuf.platform.data_source.SendFileToDataSourceResponse
	(*resource.AllocatePartyResourceResponse)(nil),    // 35: sudo.protobuf.platform.resource.AllocatePartyResourceResponse
	(*resource.DeployPartyResourceResponse)(nil),      // 36: sudo.protobuf.platform.resource.DeployPartyResourceResponse
	(*resource.GetPartyResourceStatusResponse)(nil),   // 37: sudo.protobuf.platform.resource.GetPartyResourceStatusResponse
	(*datasource.GetDataSourcesResponse)(nil),         // 38: sudo.protobuf.platform.data_source.GetDataSourcesResponse
	(*datasource.CreateDataSourceResponse)(nil),       // 39: sudo.protobuf.platform.data_source.CreateDataSourceResponse
	(*datasource.ShowDatabasesResponse)(nil),          // 40: sudo.protobuf.platform.data_source.ShowDatabasesResponse
	(*datasource.ShowTablesResponse)(nil),             // 41: sudo.protobuf.platform.data_source.ShowTablesResponse
	(*datasource.DescTableResponse)(nil),              // 42: sudo.protobuf.platform.data_source.DescTableResponse
	(*protobuf.WalkDirResponse)(nil),                  // 43: sudo.protobuf.infra_adapter.WalkDirResponse
	(*protobuf.DescFileNodeResponse)(nil),             // 44: sudo.protobuf.infra_adapter.DescFileNodeResponse
}
var file_sudo_protobuf_mpc_virtual_service_platform_service_furnace_proto_depIdxs = []int32{
	0,  // 0: sudo.protobuf.platform.service.Furnace.Echo:input_type -> sudo.protobuf.platform.misc.EchoRequest
	1,  // 1: sudo.protobuf.platform.service.Furnace.ListVtables:input_type -> sudo.protobuf.platform.vtable.ListVtablesRequest
	2,  // 2: sudo.protobuf.platform.service.Furnace.CreateVtable:input_type -> sudo.protobuf.platform.vtable.CreateVtableRequest
	3,  // 3: sudo.protobuf.platform.service.Furnace.AttachVtableToProject:input_type -> sudo.protobuf.platform.vtable.AttachVtableToProjectRequest
	4,  // 4: sudo.protobuf.platform.service.Furnace.DetachVtableToProject:input_type -> sudo.protobuf.platform.vtable.DetachVtableToProjectRequest
	5,  // 5: sudo.protobuf.platform.service.Furnace.DeleteVtable:input_type -> sudo.protobuf.platform.vtable.DeleteVtableRequest
	6,  // 6: sudo.protobuf.platform.service.Furnace.UpdateVtable:input_type -> sudo.protobuf.platform.vtable.UpdateVtableRequest
	7,  // 7: sudo.protobuf.platform.service.Furnace.SyncVtable:input_type -> sudo.protobuf.platform.vtable.SyncVtableRequest
	8,  // 8: sudo.protobuf.platform.service.Furnace.GetVisibleVtableColumns:input_type -> google.protobuf.Empty
	9,  // 9: sudo.protobuf.platform.service.Furnace.GetVtableRawData:input_type -> sudo.protobuf.platform.vtable.GetVtableRawDataRequest
	10, // 10: sudo.protobuf.platform.service.Furnace.GetAllDataSources:input_type -> sudo.protobuf.platform.data_source.GetAllDataSourcesRequest
	11, // 11: sudo.protobuf.platform.service.Furnace.SendFileToDataSource:input_type -> sudo.protobuf.platform.data_source.SendFileToDataSourceRequest
	12, // 12: sudo.protobuf.platform.service.Furnace.AllocatePartyResource:input_type -> sudo.protobuf.platform.resource.AllocatePartyResourceRequest
	13, // 13: sudo.protobuf.platform.service.Furnace.ReleasePartyResource:input_type -> sudo.protobuf.platform.resource.ReleasePartyResourceRequest
	14, // 14: sudo.protobuf.platform.service.Furnace.DeployPartyResource:input_type -> sudo.protobuf.platform.resource.DeployPartyResourceRequest
	15, // 15: sudo.protobuf.platform.service.Furnace.GetPartyResourceStatus:input_type -> sudo.protobuf.platform.resource.GetPartyResourceStatusRequest
	16, // 16: sudo.protobuf.platform.service.Furnace.UpdatePartyResourceStatus:input_type -> sudo.protobuf.platform.resource.UpdatePartyResourceStatusRequest
	17, // 17: sudo.protobuf.platform.service.Furnace.FinishPartyBlock:input_type -> sudo.protobuf.platform.resource.FinishPartyBlockRequest
	18, // 18: sudo.protobuf.platform.service.Furnace.GetDataSources:input_type -> sudo.protobuf.platform.data_source.GetDataSourcesRequest
	19, // 19: sudo.protobuf.platform.service.Furnace.CreateDataSource:input_type -> sudo.protobuf.platform.data_source.CreateDataSourceRequest
	20, // 20: sudo.protobuf.platform.service.Furnace.UpdateDataSource:input_type -> sudo.protobuf.platform.data_source.UpdateDataSourceRequest
	21, // 21: sudo.protobuf.platform.service.Furnace.DeleteDataSource:input_type -> sudo.protobuf.platform.data_source.DeleteDataSourceRequest
	22, // 22: sudo.protobuf.platform.service.Furnace.ShowDatabases:input_type -> sudo.protobuf.platform.data_source.ShowDatabasesRequest
	23, // 23: sudo.protobuf.platform.service.Furnace.ShowTables:input_type -> sudo.protobuf.platform.data_source.ShowTablesRequest
	24, // 24: sudo.protobuf.platform.service.Furnace.DescTable:input_type -> sudo.protobuf.platform.data_source.DescTableRequest
	25, // 25: sudo.protobuf.platform.service.Furnace.WalkDir:input_type -> sudo.protobuf.infra_adapter.WalkDirRequest
	26, // 26: sudo.protobuf.platform.service.Furnace.DescFileNode:input_type -> sudo.protobuf.platform.data_source.DescFileNodeRequest
	27, // 27: sudo.protobuf.platform.service.Furnace.Echo:output_type -> sudo.protobuf.platform.misc.EchoResponse
	28, // 28: sudo.protobuf.platform.service.Furnace.ListVtables:output_type -> sudo.protobuf.platform.vtable.ListVtablesResponse
	29, // 29: sudo.protobuf.platform.service.Furnace.CreateVtable:output_type -> sudo.protobuf.platform.vtable.CreateVtableResponse
	8,  // 30: sudo.protobuf.platform.service.Furnace.AttachVtableToProject:output_type -> google.protobuf.Empty
	8,  // 31: sudo.protobuf.platform.service.Furnace.DetachVtableToProject:output_type -> google.protobuf.Empty
	8,  // 32: sudo.protobuf.platform.service.Furnace.DeleteVtable:output_type -> google.protobuf.Empty
	30, // 33: sudo.protobuf.platform.service.Furnace.UpdateVtable:output_type -> sudo.protobuf.platform.vtable.UpdateVtableResponse
	8,  // 34: sudo.protobuf.platform.service.Furnace.SyncVtable:output_type -> google.protobuf.Empty
	31, // 35: sudo.protobuf.platform.service.Furnace.GetVisibleVtableColumns:output_type -> sudo.protobuf.platform.vtable.VtableColumnsVisibilitySetting
	32, // 36: sudo.protobuf.platform.service.Furnace.GetVtableRawData:output_type -> sudo.protobuf.platform.vtable.GetVtableRawDataResponse
	33, // 37: sudo.protobuf.platform.service.Furnace.GetAllDataSources:output_type -> sudo.protobuf.platform.data_source.GetAllDataSourcesResponse
	34, // 38: sudo.protobuf.platform.service.Furnace.SendFileToDataSource:output_type -> sudo.protobuf.platform.data_source.SendFileToDataSourceResponse
	35, // 39: sudo.protobuf.platform.service.Furnace.AllocatePartyResource:output_type -> sudo.protobuf.platform.resource.AllocatePartyResourceResponse
	8,  // 40: sudo.protobuf.platform.service.Furnace.ReleasePartyResource:output_type -> google.protobuf.Empty
	36, // 41: sudo.protobuf.platform.service.Furnace.DeployPartyResource:output_type -> sudo.protobuf.platform.resource.DeployPartyResourceResponse
	37, // 42: sudo.protobuf.platform.service.Furnace.GetPartyResourceStatus:output_type -> sudo.protobuf.platform.resource.GetPartyResourceStatusResponse
	8,  // 43: sudo.protobuf.platform.service.Furnace.UpdatePartyResourceStatus:output_type -> google.protobuf.Empty
	8,  // 44: sudo.protobuf.platform.service.Furnace.FinishPartyBlock:output_type -> google.protobuf.Empty
	38, // 45: sudo.protobuf.platform.service.Furnace.GetDataSources:output_type -> sudo.protobuf.platform.data_source.GetDataSourcesResponse
	39, // 46: sudo.protobuf.platform.service.Furnace.CreateDataSource:output_type -> sudo.protobuf.platform.data_source.CreateDataSourceResponse
	8,  // 47: sudo.protobuf.platform.service.Furnace.UpdateDataSource:output_type -> google.protobuf.Empty
	8,  // 48: sudo.protobuf.platform.service.Furnace.DeleteDataSource:output_type -> google.protobuf.Empty
	40, // 49: sudo.protobuf.platform.service.Furnace.ShowDatabases:output_type -> sudo.protobuf.platform.data_source.ShowDatabasesResponse
	41, // 50: sudo.protobuf.platform.service.Furnace.ShowTables:output_type -> sudo.protobuf.platform.data_source.ShowTablesResponse
	42, // 51: sudo.protobuf.platform.service.Furnace.DescTable:output_type -> sudo.protobuf.platform.data_source.DescTableResponse
	43, // 52: sudo.protobuf.platform.service.Furnace.WalkDir:output_type -> sudo.protobuf.infra_adapter.WalkDirResponse
	44, // 53: sudo.protobuf.platform.service.Furnace.DescFileNode:output_type -> sudo.protobuf.infra_adapter.DescFileNodeResponse
	27, // [27:54] is the sub-list for method output_type
	0,  // [0:27] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_sudo_protobuf_mpc_virtual_service_platform_service_furnace_proto_init() }
func file_sudo_protobuf_mpc_virtual_service_platform_service_furnace_proto_init() {
	if File_sudo_protobuf_mpc_virtual_service_platform_service_furnace_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sudo_protobuf_mpc_virtual_service_platform_service_furnace_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sudo_protobuf_mpc_virtual_service_platform_service_furnace_proto_goTypes,
		DependencyIndexes: file_sudo_protobuf_mpc_virtual_service_platform_service_furnace_proto_depIdxs,
	}.Build()
	File_sudo_protobuf_mpc_virtual_service_platform_service_furnace_proto = out.File
	file_sudo_protobuf_mpc_virtual_service_platform_service_furnace_proto_rawDesc = nil
	file_sudo_protobuf_mpc_virtual_service_platform_service_furnace_proto_goTypes = nil
	file_sudo_protobuf_mpc_virtual_service_platform_service_furnace_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FurnaceClient is the client API for Furnace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FurnaceClient interface {
	Echo(ctx context.Context, in *misc.EchoRequest, opts ...grpc.CallOption) (*misc.EchoResponse, error)
	ListVtables(ctx context.Context, in *vtable.ListVtablesRequest, opts ...grpc.CallOption) (*vtable.ListVtablesResponse, error)
	CreateVtable(ctx context.Context, in *vtable.CreateVtableRequest, opts ...grpc.CallOption) (*vtable.CreateVtableResponse, error)
	AttachVtableToProject(ctx context.Context, in *vtable.AttachVtableToProjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DetachVtableToProject(ctx context.Context, in *vtable.DetachVtableToProjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteVtable(ctx context.Context, in *vtable.DeleteVtableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新Vtable信息
	//
	// 根据请求详情，更新vtable的具体信息记录。
	UpdateVtable(ctx context.Context, in *vtable.UpdateVtableRequest, opts ...grpc.CallOption) (*vtable.UpdateVtableResponse, error)
	// 刷新Vtable信息
	//
	// 根据Vtable指向的数据的实际情况，刷新Vtable的信息。
	SyncVtable(ctx context.Context, in *vtable.SyncVtableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取vtable可见信息
	//
	// 返回请求用户对vtable可见的具体信息。
	GetVisibleVtableColumns(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*vtable.VtableColumnsVisibilitySetting, error)
	// 获取原始数据
	//
	// 给定vtable和相关信息，返回vtable的原始数据和相关元数据。
	GetVtableRawData(ctx context.Context, in *vtable.GetVtableRawDataRequest, opts ...grpc.CallOption) (*vtable.GetVtableRawDataResponse, error)
	GetAllDataSources(ctx context.Context, in *datasource.GetAllDataSourcesRequest, opts ...grpc.CallOption) (*datasource.GetAllDataSourcesResponse, error)
	SendFileToDataSource(ctx context.Context, in *datasource.SendFileToDataSourceRequest, opts ...grpc.CallOption) (*datasource.SendFileToDataSourceResponse, error)
	// 分配资源
	//
	// 通常由Coordinator发起请求，向某个计算方为某个计算任务预留相应的计算资源。
	AllocatePartyResource(ctx context.Context, in *resource.AllocatePartyResourceRequest, opts ...grpc.CallOption) (*resource.AllocatePartyResourceResponse, error)
	ReleasePartyResource(ctx context.Context, in *resource.ReleasePartyResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeployPartyResource(ctx context.Context, in *resource.DeployPartyResourceRequest, opts ...grpc.CallOption) (*resource.DeployPartyResourceResponse, error)
	GetPartyResourceStatus(ctx context.Context, in *resource.GetPartyResourceStatusRequest, opts ...grpc.CallOption) (*resource.GetPartyResourceStatusResponse, error)
	UpdatePartyResourceStatus(ctx context.Context, in *resource.UpdatePartyResourceStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FinishPartyBlock(ctx context.Context, in *resource.FinishPartyBlockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetDataSources(ctx context.Context, in *datasource.GetDataSourcesRequest, opts ...grpc.CallOption) (*datasource.GetDataSourcesResponse, error)
	CreateDataSource(ctx context.Context, in *datasource.CreateDataSourceRequest, opts ...grpc.CallOption) (*datasource.CreateDataSourceResponse, error)
	UpdateDataSource(ctx context.Context, in *datasource.UpdateDataSourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteDataSource(ctx context.Context, in *datasource.DeleteDataSourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ShowDatabases(ctx context.Context, in *datasource.ShowDatabasesRequest, opts ...grpc.CallOption) (*datasource.ShowDatabasesResponse, error)
	ShowTables(ctx context.Context, in *datasource.ShowTablesRequest, opts ...grpc.CallOption) (*datasource.ShowTablesResponse, error)
	DescTable(ctx context.Context, in *datasource.DescTableRequest, opts ...grpc.CallOption) (*datasource.DescTableResponse, error)
	// 获取文件列表
	//
	// 给定数据源和文件路径，返回该路径下的文件列表，以及列表中各文件的详细信息。
	WalkDir(ctx context.Context, in *protobuf.WalkDirRequest, opts ...grpc.CallOption) (*protobuf.WalkDirResponse, error)
	// 获取文件详情
	//
	// 给定数据源和文件路径，返回文件的详细情况，如大小、行数等。
	DescFileNode(ctx context.Context, in *datasource.DescFileNodeRequest, opts ...grpc.CallOption) (*protobuf.DescFileNodeResponse, error)
}

type furnaceClient struct {
	cc grpc.ClientConnInterface
}

func NewFurnaceClient(cc grpc.ClientConnInterface) FurnaceClient {
	return &furnaceClient{cc}
}

func (c *furnaceClient) Echo(ctx context.Context, in *misc.EchoRequest, opts ...grpc.CallOption) (*misc.EchoResponse, error) {
	out := new(misc.EchoResponse)
	err := c.cc.Invoke(ctx, "/sudo.protobuf.platform.service.Furnace/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) ListVtables(ctx context.Context, in *vtable.ListVtablesRequest, opts ...grpc.CallOption) (*vtable.ListVtablesResponse, error) {
	out := new(vtable.ListVtablesResponse)
	err := c.cc.Invoke(ctx, "/sudo.protobuf.platform.service.Furnace/ListVtables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) CreateVtable(ctx context.Context, in *vtable.CreateVtableRequest, opts ...grpc.CallOption) (*vtable.CreateVtableResponse, error) {
	out := new(vtable.CreateVtableResponse)
	err := c.cc.Invoke(ctx, "/sudo.protobuf.platform.service.Furnace/CreateVtable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) AttachVtableToProject(ctx context.Context, in *vtable.AttachVtableToProjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/sudo.protobuf.platform.service.Furnace/AttachVtableToProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) DetachVtableToProject(ctx context.Context, in *vtable.DetachVtableToProjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/sudo.protobuf.platform.service.Furnace/DetachVtableToProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) DeleteVtable(ctx context.Context, in *vtable.DeleteVtableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/sudo.protobuf.platform.service.Furnace/DeleteVtable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) UpdateVtable(ctx context.Context, in *vtable.UpdateVtableRequest, opts ...grpc.CallOption) (*vtable.UpdateVtableResponse, error) {
	out := new(vtable.UpdateVtableResponse)
	err := c.cc.Invoke(ctx, "/sudo.protobuf.platform.service.Furnace/UpdateVtable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) SyncVtable(ctx context.Context, in *vtable.SyncVtableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/sudo.protobuf.platform.service.Furnace/SyncVtable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) GetVisibleVtableColumns(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*vtable.VtableColumnsVisibilitySetting, error) {
	out := new(vtable.VtableColumnsVisibilitySetting)
	err := c.cc.Invoke(ctx, "/sudo.protobuf.platform.service.Furnace/GetVisibleVtableColumns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) GetVtableRawData(ctx context.Context, in *vtable.GetVtableRawDataRequest, opts ...grpc.CallOption) (*vtable.GetVtableRawDataResponse, error) {
	out := new(vtable.GetVtableRawDataResponse)
	err := c.cc.Invoke(ctx, "/sudo.protobuf.platform.service.Furnace/GetVtableRawData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) GetAllDataSources(ctx context.Context, in *datasource.GetAllDataSourcesRequest, opts ...grpc.CallOption) (*datasource.GetAllDataSourcesResponse, error) {
	out := new(datasource.GetAllDataSourcesResponse)
	err := c.cc.Invoke(ctx, "/sudo.protobuf.platform.service.Furnace/GetAllDataSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) SendFileToDataSource(ctx context.Context, in *datasource.SendFileToDataSourceRequest, opts ...grpc.CallOption) (*datasource.SendFileToDataSourceResponse, error) {
	out := new(datasource.SendFileToDataSourceResponse)
	err := c.cc.Invoke(ctx, "/sudo.protobuf.platform.service.Furnace/SendFileToDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) AllocatePartyResource(ctx context.Context, in *resource.AllocatePartyResourceRequest, opts ...grpc.CallOption) (*resource.AllocatePartyResourceResponse, error) {
	out := new(resource.AllocatePartyResourceResponse)
	err := c.cc.Invoke(ctx, "/sudo.protobuf.platform.service.Furnace/AllocatePartyResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) ReleasePartyResource(ctx context.Context, in *resource.ReleasePartyResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/sudo.protobuf.platform.service.Furnace/ReleasePartyResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) DeployPartyResource(ctx context.Context, in *resource.DeployPartyResourceRequest, opts ...grpc.CallOption) (*resource.DeployPartyResourceResponse, error) {
	out := new(resource.DeployPartyResourceResponse)
	err := c.cc.Invoke(ctx, "/sudo.protobuf.platform.service.Furnace/DeployPartyResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) GetPartyResourceStatus(ctx context.Context, in *resource.GetPartyResourceStatusRequest, opts ...grpc.CallOption) (*resource.GetPartyResourceStatusResponse, error) {
	out := new(resource.GetPartyResourceStatusResponse)
	err := c.cc.Invoke(ctx, "/sudo.protobuf.platform.service.Furnace/GetPartyResourceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) UpdatePartyResourceStatus(ctx context.Context, in *resource.UpdatePartyResourceStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/sudo.protobuf.platform.service.Furnace/UpdatePartyResourceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) FinishPartyBlock(ctx context.Context, in *resource.FinishPartyBlockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/sudo.protobuf.platform.service.Furnace/FinishPartyBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) GetDataSources(ctx context.Context, in *datasource.GetDataSourcesRequest, opts ...grpc.CallOption) (*datasource.GetDataSourcesResponse, error) {
	out := new(datasource.GetDataSourcesResponse)
	err := c.cc.Invoke(ctx, "/sudo.protobuf.platform.service.Furnace/GetDataSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) CreateDataSource(ctx context.Context, in *datasource.CreateDataSourceRequest, opts ...grpc.CallOption) (*datasource.CreateDataSourceResponse, error) {
	out := new(datasource.CreateDataSourceResponse)
	err := c.cc.Invoke(ctx, "/sudo.protobuf.platform.service.Furnace/CreateDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) UpdateDataSource(ctx context.Context, in *datasource.UpdateDataSourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/sudo.protobuf.platform.service.Furnace/UpdateDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) DeleteDataSource(ctx context.Context, in *datasource.DeleteDataSourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/sudo.protobuf.platform.service.Furnace/DeleteDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) ShowDatabases(ctx context.Context, in *datasource.ShowDatabasesRequest, opts ...grpc.CallOption) (*datasource.ShowDatabasesResponse, error) {
	out := new(datasource.ShowDatabasesResponse)
	err := c.cc.Invoke(ctx, "/sudo.protobuf.platform.service.Furnace/ShowDatabases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) ShowTables(ctx context.Context, in *datasource.ShowTablesRequest, opts ...grpc.CallOption) (*datasource.ShowTablesResponse, error) {
	out := new(datasource.ShowTablesResponse)
	err := c.cc.Invoke(ctx, "/sudo.protobuf.platform.service.Furnace/ShowTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) DescTable(ctx context.Context, in *datasource.DescTableRequest, opts ...grpc.CallOption) (*datasource.DescTableResponse, error) {
	out := new(datasource.DescTableResponse)
	err := c.cc.Invoke(ctx, "/sudo.protobuf.platform.service.Furnace/DescTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) WalkDir(ctx context.Context, in *protobuf.WalkDirRequest, opts ...grpc.CallOption) (*protobuf.WalkDirResponse, error) {
	out := new(protobuf.WalkDirResponse)
	err := c.cc.Invoke(ctx, "/sudo.protobuf.platform.service.Furnace/WalkDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) DescFileNode(ctx context.Context, in *datasource.DescFileNodeRequest, opts ...grpc.CallOption) (*protobuf.DescFileNodeResponse, error) {
	out := new(protobuf.DescFileNodeResponse)
	err := c.cc.Invoke(ctx, "/sudo.protobuf.platform.service.Furnace/DescFileNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FurnaceServer is the server API for Furnace service.
type FurnaceServer interface {
	Echo(context.Context, *misc.EchoRequest) (*misc.EchoResponse, error)
	ListVtables(context.Context, *vtable.ListVtablesRequest) (*vtable.ListVtablesResponse, error)
	CreateVtable(context.Context, *vtable.CreateVtableRequest) (*vtable.CreateVtableResponse, error)
	AttachVtableToProject(context.Context, *vtable.AttachVtableToProjectRequest) (*emptypb.Empty, error)
	DetachVtableToProject(context.Context, *vtable.DetachVtableToProjectRequest) (*emptypb.Empty, error)
	DeleteVtable(context.Context, *vtable.DeleteVtableRequest) (*emptypb.Empty, error)
	// 更新Vtable信息
	//
	// 根据请求详情，更新vtable的具体信息记录。
	UpdateVtable(context.Context, *vtable.UpdateVtableRequest) (*vtable.UpdateVtableResponse, error)
	// 刷新Vtable信息
	//
	// 根据Vtable指向的数据的实际情况，刷新Vtable的信息。
	SyncVtable(context.Context, *vtable.SyncVtableRequest) (*emptypb.Empty, error)
	// 获取vtable可见信息
	//
	// 返回请求用户对vtable可见的具体信息。
	GetVisibleVtableColumns(context.Context, *emptypb.Empty) (*vtable.VtableColumnsVisibilitySetting, error)
	// 获取原始数据
	//
	// 给定vtable和相关信息，返回vtable的原始数据和相关元数据。
	GetVtableRawData(context.Context, *vtable.GetVtableRawDataRequest) (*vtable.GetVtableRawDataResponse, error)
	GetAllDataSources(context.Context, *datasource.GetAllDataSourcesRequest) (*datasource.GetAllDataSourcesResponse, error)
	SendFileToDataSource(context.Context, *datasource.SendFileToDataSourceRequest) (*datasource.SendFileToDataSourceResponse, error)
	// 分配资源
	//
	// 通常由Coordinator发起请求，向某个计算方为某个计算任务预留相应的计算资源。
	AllocatePartyResource(context.Context, *resource.AllocatePartyResourceRequest) (*resource.AllocatePartyResourceResponse, error)
	ReleasePartyResource(context.Context, *resource.ReleasePartyResourceRequest) (*emptypb.Empty, error)
	DeployPartyResource(context.Context, *resource.DeployPartyResourceRequest) (*resource.DeployPartyResourceResponse, error)
	GetPartyResourceStatus(context.Context, *resource.GetPartyResourceStatusRequest) (*resource.GetPartyResourceStatusResponse, error)
	UpdatePartyResourceStatus(context.Context, *resource.UpdatePartyResourceStatusRequest) (*emptypb.Empty, error)
	FinishPartyBlock(context.Context, *resource.FinishPartyBlockRequest) (*emptypb.Empty, error)
	GetDataSources(context.Context, *datasource.GetDataSourcesRequest) (*datasource.GetDataSourcesResponse, error)
	CreateDataSource(context.Context, *datasource.CreateDataSourceRequest) (*datasource.CreateDataSourceResponse, error)
	UpdateDataSource(context.Context, *datasource.UpdateDataSourceRequest) (*emptypb.Empty, error)
	DeleteDataSource(context.Context, *datasource.DeleteDataSourceRequest) (*emptypb.Empty, error)
	ShowDatabases(context.Context, *datasource.ShowDatabasesRequest) (*datasource.ShowDatabasesResponse, error)
	ShowTables(context.Context, *datasource.ShowTablesRequest) (*datasource.ShowTablesResponse, error)
	DescTable(context.Context, *datasource.DescTableRequest) (*datasource.DescTableResponse, error)
	// 获取文件列表
	//
	// 给定数据源和文件路径，返回该路径下的文件列表，以及列表中各文件的详细信息。
	WalkDir(context.Context, *protobuf.WalkDirRequest) (*protobuf.WalkDirResponse, error)
	// 获取文件详情
	//
	// 给定数据源和文件路径，返回文件的详细情况，如大小、行数等。
	DescFileNode(context.Context, *datasource.DescFileNodeRequest) (*protobuf.DescFileNodeResponse, error)
}

// UnimplementedFurnaceServer can be embedded to have forward compatible implementations.
type UnimplementedFurnaceServer struct {
}

func (*UnimplementedFurnaceServer) Echo(context.Context, *misc.EchoRequest) (*misc.EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (*UnimplementedFurnaceServer) ListVtables(context.Context, *vtable.ListVtablesRequest) (*vtable.ListVtablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVtables not implemented")
}
func (*UnimplementedFurnaceServer) CreateVtable(context.Context, *vtable.CreateVtableRequest) (*vtable.CreateVtableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVtable not implemented")
}
func (*UnimplementedFurnaceServer) AttachVtableToProject(context.Context, *vtable.AttachVtableToProjectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachVtableToProject not implemented")
}
func (*UnimplementedFurnaceServer) DetachVtableToProject(context.Context, *vtable.DetachVtableToProjectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachVtableToProject not implemented")
}
func (*UnimplementedFurnaceServer) DeleteVtable(context.Context, *vtable.DeleteVtableRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVtable not implemented")
}
func (*UnimplementedFurnaceServer) UpdateVtable(context.Context, *vtable.UpdateVtableRequest) (*vtable.UpdateVtableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVtable not implemented")
}
func (*UnimplementedFurnaceServer) SyncVtable(context.Context, *vtable.SyncVtableRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncVtable not implemented")
}
func (*UnimplementedFurnaceServer) GetVisibleVtableColumns(context.Context, *emptypb.Empty) (*vtable.VtableColumnsVisibilitySetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVisibleVtableColumns not implemented")
}
func (*UnimplementedFurnaceServer) GetVtableRawData(context.Context, *vtable.GetVtableRawDataRequest) (*vtable.GetVtableRawDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVtableRawData not implemented")
}
func (*UnimplementedFurnaceServer) GetAllDataSources(context.Context, *datasource.GetAllDataSourcesRequest) (*datasource.GetAllDataSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDataSources not implemented")
}
func (*UnimplementedFurnaceServer) SendFileToDataSource(context.Context, *datasource.SendFileToDataSourceRequest) (*datasource.SendFileToDataSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFileToDataSource not implemented")
}
func (*UnimplementedFurnaceServer) AllocatePartyResource(context.Context, *resource.AllocatePartyResourceRequest) (*resource.AllocatePartyResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocatePartyResource not implemented")
}
func (*UnimplementedFurnaceServer) ReleasePartyResource(context.Context, *resource.ReleasePartyResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleasePartyResource not implemented")
}
func (*UnimplementedFurnaceServer) DeployPartyResource(context.Context, *resource.DeployPartyResourceRequest) (*resource.DeployPartyResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployPartyResource not implemented")
}
func (*UnimplementedFurnaceServer) GetPartyResourceStatus(context.Context, *resource.GetPartyResourceStatusRequest) (*resource.GetPartyResourceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartyResourceStatus not implemented")
}
func (*UnimplementedFurnaceServer) UpdatePartyResourceStatus(context.Context, *resource.UpdatePartyResourceStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePartyResourceStatus not implemented")
}
func (*UnimplementedFurnaceServer) FinishPartyBlock(context.Context, *resource.FinishPartyBlockRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishPartyBlock not implemented")
}
func (*UnimplementedFurnaceServer) GetDataSources(context.Context, *datasource.GetDataSourcesRequest) (*datasource.GetDataSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataSources not implemented")
}
func (*UnimplementedFurnaceServer) CreateDataSource(context.Context, *datasource.CreateDataSourceRequest) (*datasource.CreateDataSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataSource not implemented")
}
func (*UnimplementedFurnaceServer) UpdateDataSource(context.Context, *datasource.UpdateDataSourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataSource not implemented")
}
func (*UnimplementedFurnaceServer) DeleteDataSource(context.Context, *datasource.DeleteDataSourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataSource not implemented")
}
func (*UnimplementedFurnaceServer) ShowDatabases(context.Context, *datasource.ShowDatabasesRequest) (*datasource.ShowDatabasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowDatabases not implemented")
}
func (*UnimplementedFurnaceServer) ShowTables(context.Context, *datasource.ShowTablesRequest) (*datasource.ShowTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowTables not implemented")
}
func (*UnimplementedFurnaceServer) DescTable(context.Context, *datasource.DescTableRequest) (*datasource.DescTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescTable not implemented")
}
func (*UnimplementedFurnaceServer) WalkDir(context.Context, *protobuf.WalkDirRequest) (*protobuf.WalkDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalkDir not implemented")
}
func (*UnimplementedFurnaceServer) DescFileNode(context.Context, *datasource.DescFileNodeRequest) (*protobuf.DescFileNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescFileNode not implemented")
}

func RegisterFurnaceServer(s *grpc.Server, srv FurnaceServer) {
	s.RegisterService(&_Furnace_serviceDesc, srv)
}

func _Furnace_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(misc.EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.protobuf.platform.service.Furnace/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).Echo(ctx, req.(*misc.EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_ListVtables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vtable.ListVtablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).ListVtables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.protobuf.platform.service.Furnace/ListVtables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).ListVtables(ctx, req.(*vtable.ListVtablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_CreateVtable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vtable.CreateVtableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).CreateVtable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.protobuf.platform.service.Furnace/CreateVtable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).CreateVtable(ctx, req.(*vtable.CreateVtableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_AttachVtableToProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vtable.AttachVtableToProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).AttachVtableToProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.protobuf.platform.service.Furnace/AttachVtableToProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).AttachVtableToProject(ctx, req.(*vtable.AttachVtableToProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_DetachVtableToProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vtable.DetachVtableToProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).DetachVtableToProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.protobuf.platform.service.Furnace/DetachVtableToProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).DetachVtableToProject(ctx, req.(*vtable.DetachVtableToProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_DeleteVtable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vtable.DeleteVtableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).DeleteVtable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.protobuf.platform.service.Furnace/DeleteVtable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).DeleteVtable(ctx, req.(*vtable.DeleteVtableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_UpdateVtable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vtable.UpdateVtableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).UpdateVtable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.protobuf.platform.service.Furnace/UpdateVtable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).UpdateVtable(ctx, req.(*vtable.UpdateVtableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_SyncVtable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vtable.SyncVtableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).SyncVtable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.protobuf.platform.service.Furnace/SyncVtable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).SyncVtable(ctx, req.(*vtable.SyncVtableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_GetVisibleVtableColumns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).GetVisibleVtableColumns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.protobuf.platform.service.Furnace/GetVisibleVtableColumns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).GetVisibleVtableColumns(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_GetVtableRawData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vtable.GetVtableRawDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).GetVtableRawData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.protobuf.platform.service.Furnace/GetVtableRawData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).GetVtableRawData(ctx, req.(*vtable.GetVtableRawDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_GetAllDataSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(datasource.GetAllDataSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).GetAllDataSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.protobuf.platform.service.Furnace/GetAllDataSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).GetAllDataSources(ctx, req.(*datasource.GetAllDataSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_SendFileToDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(datasource.SendFileToDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).SendFileToDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.protobuf.platform.service.Furnace/SendFileToDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).SendFileToDataSource(ctx, req.(*datasource.SendFileToDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_AllocatePartyResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resource.AllocatePartyResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).AllocatePartyResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.protobuf.platform.service.Furnace/AllocatePartyResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).AllocatePartyResource(ctx, req.(*resource.AllocatePartyResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_ReleasePartyResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resource.ReleasePartyResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).ReleasePartyResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.protobuf.platform.service.Furnace/ReleasePartyResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).ReleasePartyResource(ctx, req.(*resource.ReleasePartyResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_DeployPartyResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resource.DeployPartyResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).DeployPartyResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.protobuf.platform.service.Furnace/DeployPartyResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).DeployPartyResource(ctx, req.(*resource.DeployPartyResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_GetPartyResourceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resource.GetPartyResourceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).GetPartyResourceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.protobuf.platform.service.Furnace/GetPartyResourceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).GetPartyResourceStatus(ctx, req.(*resource.GetPartyResourceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_UpdatePartyResourceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resource.UpdatePartyResourceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).UpdatePartyResourceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.protobuf.platform.service.Furnace/UpdatePartyResourceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).UpdatePartyResourceStatus(ctx, req.(*resource.UpdatePartyResourceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_FinishPartyBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resource.FinishPartyBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).FinishPartyBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.protobuf.platform.service.Furnace/FinishPartyBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).FinishPartyBlock(ctx, req.(*resource.FinishPartyBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_GetDataSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(datasource.GetDataSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).GetDataSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.protobuf.platform.service.Furnace/GetDataSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).GetDataSources(ctx, req.(*datasource.GetDataSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_CreateDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(datasource.CreateDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).CreateDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.protobuf.platform.service.Furnace/CreateDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).CreateDataSource(ctx, req.(*datasource.CreateDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_UpdateDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(datasource.UpdateDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).UpdateDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.protobuf.platform.service.Furnace/UpdateDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).UpdateDataSource(ctx, req.(*datasource.UpdateDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_DeleteDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(datasource.DeleteDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).DeleteDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.protobuf.platform.service.Furnace/DeleteDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).DeleteDataSource(ctx, req.(*datasource.DeleteDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_ShowDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(datasource.ShowDatabasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).ShowDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.protobuf.platform.service.Furnace/ShowDatabases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).ShowDatabases(ctx, req.(*datasource.ShowDatabasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_ShowTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(datasource.ShowTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).ShowTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.protobuf.platform.service.Furnace/ShowTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).ShowTables(ctx, req.(*datasource.ShowTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_DescTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(datasource.DescTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).DescTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.protobuf.platform.service.Furnace/DescTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).DescTable(ctx, req.(*datasource.DescTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_WalkDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.WalkDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).WalkDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.protobuf.platform.service.Furnace/WalkDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).WalkDir(ctx, req.(*protobuf.WalkDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_DescFileNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(datasource.DescFileNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).DescFileNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.protobuf.platform.service.Furnace/DescFileNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).DescFileNode(ctx, req.(*datasource.DescFileNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Furnace_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sudo.protobuf.platform.service.Furnace",
	HandlerType: (*FurnaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Furnace_Echo_Handler,
		},
		{
			MethodName: "ListVtables",
			Handler:    _Furnace_ListVtables_Handler,
		},
		{
			MethodName: "CreateVtable",
			Handler:    _Furnace_CreateVtable_Handler,
		},
		{
			MethodName: "AttachVtableToProject",
			Handler:    _Furnace_AttachVtableToProject_Handler,
		},
		{
			MethodName: "DetachVtableToProject",
			Handler:    _Furnace_DetachVtableToProject_Handler,
		},
		{
			MethodName: "DeleteVtable",
			Handler:    _Furnace_DeleteVtable_Handler,
		},
		{
			MethodName: "UpdateVtable",
			Handler:    _Furnace_UpdateVtable_Handler,
		},
		{
			MethodName: "SyncVtable",
			Handler:    _Furnace_SyncVtable_Handler,
		},
		{
			MethodName: "GetVisibleVtableColumns",
			Handler:    _Furnace_GetVisibleVtableColumns_Handler,
		},
		{
			MethodName: "GetVtableRawData",
			Handler:    _Furnace_GetVtableRawData_Handler,
		},
		{
			MethodName: "GetAllDataSources",
			Handler:    _Furnace_GetAllDataSources_Handler,
		},
		{
			MethodName: "SendFileToDataSource",
			Handler:    _Furnace_SendFileToDataSource_Handler,
		},
		{
			MethodName: "AllocatePartyResource",
			Handler:    _Furnace_AllocatePartyResource_Handler,
		},
		{
			MethodName: "ReleasePartyResource",
			Handler:    _Furnace_ReleasePartyResource_Handler,
		},
		{
			MethodName: "DeployPartyResource",
			Handler:    _Furnace_DeployPartyResource_Handler,
		},
		{
			MethodName: "GetPartyResourceStatus",
			Handler:    _Furnace_GetPartyResourceStatus_Handler,
		},
		{
			MethodName: "UpdatePartyResourceStatus",
			Handler:    _Furnace_UpdatePartyResourceStatus_Handler,
		},
		{
			MethodName: "FinishPartyBlock",
			Handler:    _Furnace_FinishPartyBlock_Handler,
		},
		{
			MethodName: "GetDataSources",
			Handler:    _Furnace_GetDataSources_Handler,
		},
		{
			MethodName: "CreateDataSource",
			Handler:    _Furnace_CreateDataSource_Handler,
		},
		{
			MethodName: "UpdateDataSource",
			Handler:    _Furnace_UpdateDataSource_Handler,
		},
		{
			MethodName: "DeleteDataSource",
			Handler:    _Furnace_DeleteDataSource_Handler,
		},
		{
			MethodName: "ShowDatabases",
			Handler:    _Furnace_ShowDatabases_Handler,
		},
		{
			MethodName: "ShowTables",
			Handler:    _Furnace_ShowTables_Handler,
		},
		{
			MethodName: "DescTable",
			Handler:    _Furnace_DescTable_Handler,
		},
		{
			MethodName: "WalkDir",
			Handler:    _Furnace_WalkDir_Handler,
		},
		{
			MethodName: "DescFileNode",
			Handler:    _Furnace_DescFileNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sudo/protobuf/mpc_virtual_service/platform/service/furnace.proto",
}
