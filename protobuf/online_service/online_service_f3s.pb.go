// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.1
// source: service/online_service_f3s.proto

package online_service

import (
	context "context"
	protobuf "github.com/sudo-privacy/sudo-sdk-go/protobuf/basic/protobuf"
	infra_adapter "github.com/sudo-privacy/sudo-sdk-go/protobuf/basic/protobuf/infra_adapter"
	service "github.com/sudo-privacy/sudo-sdk-go/protobuf/basic/protobuf/service"
	enums "github.com/sudo-privacy/sudo-sdk-go/protobuf/basic/protobuf/service/enums"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 三要素核验查询 （用于前端与paas后端）
type Factor3SVerifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 手机号md5,必填
	PhoneMd5 string `protobuf:"bytes,1,opt,name=phoneMd5,proto3" json:"phoneMd5,omitempty"`
	// 身份证md5
	IdMd5 string `protobuf:"bytes,2,opt,name=idMd5,proto3" json:"idMd5,omitempty"`
	// 姓名md5
	NameMd5 string `protobuf:"bytes,3,opt,name=nameMd5,proto3" json:"nameMd5,omitempty"`
	// 手机号前三位
	Prefix uint64 `protobuf:"varint,4,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// 三要素核验在线服务子路径
	SubPath string `protobuf:"bytes,5,opt,name=sub_path,json=subPath,proto3" json:"sub_path,omitempty"`
}

func (x *Factor3SVerifyRequest) Reset() {
	*x = Factor3SVerifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_online_service_f3s_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Factor3SVerifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Factor3SVerifyRequest) ProtoMessage() {}

func (x *Factor3SVerifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_online_service_f3s_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Factor3SVerifyRequest.ProtoReflect.Descriptor instead.
func (*Factor3SVerifyRequest) Descriptor() ([]byte, []int) {
	return file_service_online_service_f3s_proto_rawDescGZIP(), []int{0}
}

func (x *Factor3SVerifyRequest) GetPhoneMd5() string {
	if x != nil {
		return x.PhoneMd5
	}
	return ""
}

func (x *Factor3SVerifyRequest) GetIdMd5() string {
	if x != nil {
		return x.IdMd5
	}
	return ""
}

func (x *Factor3SVerifyRequest) GetNameMd5() string {
	if x != nil {
		return x.NameMd5
	}
	return ""
}

func (x *Factor3SVerifyRequest) GetPrefix() uint64 {
	if x != nil {
		return x.Prefix
	}
	return 0
}

func (x *Factor3SVerifyRequest) GetSubPath() string {
	if x != nil {
		return x.SubPath
	}
	return ""
}

// 三要素核验结果样例
//{
//"code":"00",
//"errorDesc":"请求成功",
//"checkResult":"00"
//}
type Factor3SVerifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回结果码，有返回码对照表一一对应
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// 返回错误描述，有返回码对照表一一对应
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// 可为空
	// 00: 手机号、证件号、姓名均一致
	// 01: 手机号一致，证件号和姓名不一致
	// 02: 手机号和证件号一致，姓名不一致
	// 03: 手机号和姓名一致，证件号不一致
	// 04: 其他不一致
	// 09: 手机号未查得
	// 97: 当前运营商侧针对本银行三要素核验功能关闭
	// 98: 银行测关闭三要素核验功能
	// 99: 计费中心网络故障
	CheckResult string `protobuf:"bytes,3,opt,name=checkResult,proto3" json:"checkResult,omitempty"`
}

func (x *Factor3SVerifyResponse) Reset() {
	*x = Factor3SVerifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_online_service_f3s_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Factor3SVerifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Factor3SVerifyResponse) ProtoMessage() {}

func (x *Factor3SVerifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_online_service_f3s_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Factor3SVerifyResponse.ProtoReflect.Descriptor instead.
func (*Factor3SVerifyResponse) Descriptor() ([]byte, []int) {
	return file_service_online_service_f3s_proto_rawDescGZIP(), []int{1}
}

func (x *Factor3SVerifyResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Factor3SVerifyResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *Factor3SVerifyResponse) GetCheckResult() string {
	if x != nil {
		return x.CheckResult
	}
	return ""
}

type Factor3SVerifyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 0:  手机号、证件号、姓名均一致
	// 1:  手机号一致，证件号和姓名不一致
	// 2:  手机号和证件号一致，姓名不一致
	// 3:  手机号和姓名一致，证件号不一致
	// 4:  其他不一致
	// 9:  手机号未查得
	// 97: 当前运营商侧针对本银行三要素核验功能关闭(算子侧不会返回该错误码)
	// 98: 银行侧关闭三要素核验功能
	// 99: 计费中心网络故障
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Factor3SVerifyResult) Reset() {
	*x = Factor3SVerifyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_online_service_f3s_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Factor3SVerifyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Factor3SVerifyResult) ProtoMessage() {}

func (x *Factor3SVerifyResult) ProtoReflect() protoreflect.Message {
	mi := &file_service_online_service_f3s_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Factor3SVerifyResult.ProtoReflect.Descriptor instead.
func (*Factor3SVerifyResult) Descriptor() ([]byte, []int) {
	return file_service_online_service_f3s_proto_rawDescGZIP(), []int{2}
}

func (x *Factor3SVerifyResult) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type F3SDeployServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId uint64 `protobuf:"varint,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// 原始数据路径 e.g. db1.bank_0109
	OriginData *infra_adapter.DataLocation `protobuf:"bytes,2,opt,name=origin_data,json=originData,proto3" json:"origin_data,omitempty"`
	// 预处理后可存放的数据路径  e.g. sudo_output.bank_0109
	OutputData *infra_adapter.DataLocation `protobuf:"bytes,3,opt,name=output_data,json=outputData,proto3" json:"output_data,omitempty"`
	// 匹配列
	KeyColumns []string `protobuf:"bytes,4,rep,name=key_columns,json=keyColumns,proto3" json:"key_columns,omitempty"`
	// 不可区分度
	IndiscernibilityDegree uint64 `protobuf:"varint,5,opt,name=indiscernibility_degree,json=indiscernibilityDegree,proto3" json:"indiscernibility_degree,omitempty"`
}

func (x *F3SDeployServerRequest) Reset() {
	*x = F3SDeployServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_online_service_f3s_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F3SDeployServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F3SDeployServerRequest) ProtoMessage() {}

func (x *F3SDeployServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_online_service_f3s_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F3SDeployServerRequest.ProtoReflect.Descriptor instead.
func (*F3SDeployServerRequest) Descriptor() ([]byte, []int) {
	return file_service_online_service_f3s_proto_rawDescGZIP(), []int{3}
}

func (x *F3SDeployServerRequest) GetServiceId() uint64 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *F3SDeployServerRequest) GetOriginData() *infra_adapter.DataLocation {
	if x != nil {
		return x.OriginData
	}
	return nil
}

func (x *F3SDeployServerRequest) GetOutputData() *infra_adapter.DataLocation {
	if x != nil {
		return x.OutputData
	}
	return nil
}

func (x *F3SDeployServerRequest) GetKeyColumns() []string {
	if x != nil {
		return x.KeyColumns
	}
	return nil
}

func (x *F3SDeployServerRequest) GetIndiscernibilityDegree() uint64 {
	if x != nil {
		return x.IndiscernibilityDegree
	}
	return 0
}

type F3SDeployClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId uint64              `protobuf:"varint,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Token     string              `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	PartyInfo *protobuf.PartyInfo `protobuf:"bytes,3,opt,name=party_info,json=partyInfo,proto3" json:"party_info,omitempty"`
}

func (x *F3SDeployClientRequest) Reset() {
	*x = F3SDeployClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_online_service_f3s_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F3SDeployClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F3SDeployClientRequest) ProtoMessage() {}

func (x *F3SDeployClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_online_service_f3s_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F3SDeployClientRequest.ProtoReflect.Descriptor instead.
func (*F3SDeployClientRequest) Descriptor() ([]byte, []int) {
	return file_service_online_service_f3s_proto_rawDescGZIP(), []int{4}
}

func (x *F3SDeployClientRequest) GetServiceId() uint64 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *F3SDeployClientRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *F3SDeployClientRequest) GetPartyInfo() *protobuf.PartyInfo {
	if x != nil {
		return x.PartyInfo
	}
	return nil
}

// 提供所有这个参与方需要知道的非业务信息
type PartyKnowledge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyInfo *protobuf.PartyInfo `protobuf:"bytes,1,opt,name=party_info,json=partyInfo,proto3" json:"party_info,omitempty"`
	// 原始数据路径 e.g. db1.bank_0109
	OriginData *infra_adapter.DataLocation `protobuf:"bytes,2,opt,name=origin_data,json=originData,proto3" json:"origin_data,omitempty"`
	// 预处理后可存放的数据路径  e.g. sudo_output.bank_0109
	OutputData *infra_adapter.DataLocation `protobuf:"bytes,3,opt,name=output_data,json=outputData,proto3" json:"output_data,omitempty"`
	// 存放业务属性
	//
	// 桶总数，deploy完成返回: ["bucket_num","10"]，
	// id_col_name : ["id_col_name": "exampleName"]
	// phone col name: ["phone_col_name": "exampleName"]
	// name col name: ["name_col_name": "exampleName"]
	// feature names(,concat) : ["feature_names": "exampleFeature1,exampleFeature2"]
	// factor3s detail : ["factor3s_detail": "true"],true 代表做多次psi，false 代表只做一次psi，仅对三要素有效
	Context map[string]string `protobuf:"bytes,4,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PartyKnowledge) Reset() {
	*x = PartyKnowledge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_online_service_f3s_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyKnowledge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyKnowledge) ProtoMessage() {}

func (x *PartyKnowledge) ProtoReflect() protoreflect.Message {
	mi := &file_service_online_service_f3s_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyKnowledge.ProtoReflect.Descriptor instead.
func (*PartyKnowledge) Descriptor() ([]byte, []int) {
	return file_service_online_service_f3s_proto_rawDescGZIP(), []int{5}
}

func (x *PartyKnowledge) GetPartyInfo() *protobuf.PartyInfo {
	if x != nil {
		return x.PartyInfo
	}
	return nil
}

func (x *PartyKnowledge) GetOriginData() *infra_adapter.DataLocation {
	if x != nil {
		return x.OriginData
	}
	return nil
}

func (x *PartyKnowledge) GetOutputData() *infra_adapter.DataLocation {
	if x != nil {
		return x.OutputData
	}
	return nil
}

func (x *PartyKnowledge) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

type Factor3SVerifyParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneMd5 string `protobuf:"bytes,1,opt,name=phone_md5,json=phoneMd5,proto3" json:"phone_md5,omitempty"`
	IdMd5    string `protobuf:"bytes,2,opt,name=id_md5,json=idMd5,proto3" json:"id_md5,omitempty"`
	NameMd5  string `protobuf:"bytes,3,opt,name=name_md5,json=nameMd5,proto3" json:"name_md5,omitempty"`
}

func (x *Factor3SVerifyParam) Reset() {
	*x = Factor3SVerifyParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_online_service_f3s_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Factor3SVerifyParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Factor3SVerifyParam) ProtoMessage() {}

func (x *Factor3SVerifyParam) ProtoReflect() protoreflect.Message {
	mi := &file_service_online_service_f3s_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Factor3SVerifyParam.ProtoReflect.Descriptor instead.
func (*Factor3SVerifyParam) Descriptor() ([]byte, []int) {
	return file_service_online_service_f3s_proto_rawDescGZIP(), []int{6}
}

func (x *Factor3SVerifyParam) GetPhoneMd5() string {
	if x != nil {
		return x.PhoneMd5
	}
	return ""
}

func (x *Factor3SVerifyParam) GetIdMd5() string {
	if x != nil {
		return x.IdMd5
	}
	return ""
}

func (x *Factor3SVerifyParam) GetNameMd5() string {
	if x != nil {
		return x.NameMd5
	}
	return ""
}

type F3SRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId uint64                 `protobuf:"varint,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Token     string                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Knowledge *PartyKnowledge        `protobuf:"bytes,3,opt,name=knowledge,proto3" json:"knowledge,omitempty"`
	Params    []*Factor3SVerifyParam `protobuf:"bytes,4,rep,name=params,proto3" json:"params,omitempty"`
	DataMode  enums.DataMode         `protobuf:"varint,5,opt,name=data_mode,json=dataMode,proto3,enum=sudo.protobuf.service.enums.DataMode" json:"data_mode,omitempty"`
	RequestId string                 `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *F3SRequest) Reset() {
	*x = F3SRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_online_service_f3s_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F3SRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F3SRequest) ProtoMessage() {}

func (x *F3SRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_online_service_f3s_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F3SRequest.ProtoReflect.Descriptor instead.
func (*F3SRequest) Descriptor() ([]byte, []int) {
	return file_service_online_service_f3s_proto_rawDescGZIP(), []int{7}
}

func (x *F3SRequest) GetServiceId() uint64 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *F3SRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *F3SRequest) GetKnowledge() *PartyKnowledge {
	if x != nil {
		return x.Knowledge
	}
	return nil
}

func (x *F3SRequest) GetParams() []*Factor3SVerifyParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *F3SRequest) GetDataMode() enums.DataMode {
	if x != nil {
		return x.DataMode
	}
	return enums.DataMode_UNKNOWN_DATA_MODE
}

func (x *F3SRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type F3SResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*Factor3SVerifyResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *F3SResponse) Reset() {
	*x = F3SResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_online_service_f3s_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F3SResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F3SResponse) ProtoMessage() {}

func (x *F3SResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_online_service_f3s_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F3SResponse.ProtoReflect.Descriptor instead.
func (*F3SResponse) Descriptor() ([]byte, []int) {
	return file_service_online_service_f3s_proto_rawDescGZIP(), []int{8}
}

func (x *F3SResponse) GetResults() []*Factor3SVerifyResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type F3SDeployResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId uint64 `protobuf:"varint,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// 桶总数,deploy完成返回;存于PartyKnowledge的context字段中
	BucketNum uint64 `protobuf:"varint,2,opt,name=bucket_num,json=bucketNum,proto3" json:"bucket_num,omitempty"`
}

func (x *F3SDeployResponse) Reset() {
	*x = F3SDeployResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_online_service_f3s_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F3SDeployResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F3SDeployResponse) ProtoMessage() {}

func (x *F3SDeployResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_online_service_f3s_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F3SDeployResponse.ProtoReflect.Descriptor instead.
func (*F3SDeployResponse) Descriptor() ([]byte, []int) {
	return file_service_online_service_f3s_proto_rawDescGZIP(), []int{9}
}

func (x *F3SDeployResponse) GetServiceId() uint64 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *F3SDeployResponse) GetBucketNum() uint64 {
	if x != nil {
		return x.BucketNum
	}
	return 0
}

var File_service_online_service_f3s_proto protoreflect.FileDescriptor

var file_service_online_service_f3s_proto_rawDesc = []byte{
	0x0a, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x33, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1c, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x1a, 0x26, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x73, 0x76, 0x63, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x28, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x01, 0x0a, 0x15, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x33, 0x53, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4d, 0x64, 0x35, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4d, 0x64, 0x35, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x64, 0x4d, 0x64, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x64, 0x4d, 0x64, 0x35, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x64, 0x35,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x64, 0x35, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x50, 0x61,
	0x74, 0x68, 0x22, 0x60, 0x0a, 0x16, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x53, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x2a, 0x0a, 0x14, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x73,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0xc1, 0x02, 0x0a, 0x16, 0x46, 0x33, 0x53, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0b, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x53, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x17, 0x69, 0x6e, 0x64, 0x69, 0x73, 0x63, 0x65,
	0x72, 0x6e, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x69, 0x6e, 0x64, 0x69, 0x73, 0x63, 0x65, 0x72,
	0x6e, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x4a, 0x04,
	0x08, 0x06, 0x10, 0x07, 0x22, 0x9a, 0x01, 0x0a, 0x16, 0x46, 0x33, 0x53, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61,
	0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4a, 0x04, 0x08, 0x04, 0x10,
	0x05, 0x22, 0x92, 0x03, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61,
	0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x53, 0x0a, 0x0b, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x53, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61,
	0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x64, 0x0a, 0x13, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x33, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6d, 0x64, 0x35, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x64,
	0x5f, 0x6d, 0x64, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x4d, 0x64,
	0x35, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x64, 0x35, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x64, 0x35, 0x22, 0xbb, 0x02, 0x0a,
	0x0a, 0x46, 0x33, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x4a, 0x0a, 0x09, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x52, 0x09, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x33, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x64,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x0b, 0x46, 0x33,
	0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x33, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x51, 0x0a, 0x11, 0x46, 0x33, 0x53, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x32, 0xdc, 0x02, 0x0a, 0x18, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x46, 0x33, 0x53, 0x12, 0x78, 0x0a, 0x0f, 0x46, 0x33, 0x53, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x33, 0x53, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x46, 0x33, 0x53, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5a, 0x0a, 0x03, 0x46, 0x33, 0x53, 0x12, 0x28, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x33, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x46, 0x33, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a,
	0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2b,
	0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x75,
	0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_service_online_service_f3s_proto_rawDescOnce sync.Once
	file_service_online_service_f3s_proto_rawDescData = file_service_online_service_f3s_proto_rawDesc
)

func file_service_online_service_f3s_proto_rawDescGZIP() []byte {
	file_service_online_service_f3s_proto_rawDescOnce.Do(func() {
		file_service_online_service_f3s_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_online_service_f3s_proto_rawDescData)
	})
	return file_service_online_service_f3s_proto_rawDescData
}

var file_service_online_service_f3s_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_service_online_service_f3s_proto_goTypes = []interface{}{
	(*Factor3SVerifyRequest)(nil),         // 0: infra_adapter.online_service.Factor3SVerifyRequest
	(*Factor3SVerifyResponse)(nil),        // 1: infra_adapter.online_service.Factor3SVerifyResponse
	(*Factor3SVerifyResult)(nil),          // 2: infra_adapter.online_service.Factor3sVerifyResult
	(*F3SDeployServerRequest)(nil),        // 3: infra_adapter.online_service.F3SDeployServerRequest
	(*F3SDeployClientRequest)(nil),        // 4: infra_adapter.online_service.F3SDeployClientRequest
	(*PartyKnowledge)(nil),                // 5: infra_adapter.online_service.PartyKnowledge
	(*Factor3SVerifyParam)(nil),           // 6: infra_adapter.online_service.Factor3sVerifyParam
	(*F3SRequest)(nil),                    // 7: infra_adapter.online_service.F3SRequest
	(*F3SResponse)(nil),                   // 8: infra_adapter.online_service.F3SResponse
	(*F3SDeployResponse)(nil),             // 9: infra_adapter.online_service.F3SDeployResponse
	nil,                                   // 10: infra_adapter.online_service.PartyKnowledge.ContextEntry
	(*infra_adapter.DataLocation)(nil),    // 11: sudo.protobuf.infra_adapter.location.DataLocation
	(*protobuf.PartyInfo)(nil),            // 12: sudo.protobuf.infra_adapter.PartyInfo
	(enums.DataMode)(0),                   // 13: sudo.protobuf.service.enums.DataMode
	(*service.ValidateTokenRequest)(nil),  // 14: sudo.protobuf.service.ValidateTokenRequest
	(*service.ValidateTokenResponse)(nil), // 15: sudo.protobuf.service.ValidateTokenResponse
}
var file_service_online_service_f3s_proto_depIdxs = []int32{
	11, // 0: infra_adapter.online_service.F3SDeployServerRequest.origin_data:type_name -> sudo.protobuf.infra_adapter.location.DataLocation
	11, // 1: infra_adapter.online_service.F3SDeployServerRequest.output_data:type_name -> sudo.protobuf.infra_adapter.location.DataLocation
	12, // 2: infra_adapter.online_service.F3SDeployClientRequest.party_info:type_name -> sudo.protobuf.infra_adapter.PartyInfo
	12, // 3: infra_adapter.online_service.PartyKnowledge.party_info:type_name -> sudo.protobuf.infra_adapter.PartyInfo
	11, // 4: infra_adapter.online_service.PartyKnowledge.origin_data:type_name -> sudo.protobuf.infra_adapter.location.DataLocation
	11, // 5: infra_adapter.online_service.PartyKnowledge.output_data:type_name -> sudo.protobuf.infra_adapter.location.DataLocation
	10, // 6: infra_adapter.online_service.PartyKnowledge.context:type_name -> infra_adapter.online_service.PartyKnowledge.ContextEntry
	5,  // 7: infra_adapter.online_service.F3SRequest.knowledge:type_name -> infra_adapter.online_service.PartyKnowledge
	6,  // 8: infra_adapter.online_service.F3SRequest.params:type_name -> infra_adapter.online_service.Factor3sVerifyParam
	13, // 9: infra_adapter.online_service.F3SRequest.data_mode:type_name -> sudo.protobuf.service.enums.DataMode
	2,  // 10: infra_adapter.online_service.F3SResponse.results:type_name -> infra_adapter.online_service.Factor3sVerifyResult
	3,  // 11: infra_adapter.online_service.OperatorOnlineServiceF3S.F3SDeployServer:input_type -> infra_adapter.online_service.F3SDeployServerRequest
	7,  // 12: infra_adapter.online_service.OperatorOnlineServiceF3S.F3S:input_type -> infra_adapter.online_service.F3SRequest
	14, // 13: infra_adapter.online_service.OperatorOnlineServiceF3S.ValidateToken:input_type -> sudo.protobuf.service.ValidateTokenRequest
	9,  // 14: infra_adapter.online_service.OperatorOnlineServiceF3S.F3SDeployServer:output_type -> infra_adapter.online_service.F3SDeployResponse
	8,  // 15: infra_adapter.online_service.OperatorOnlineServiceF3S.F3S:output_type -> infra_adapter.online_service.F3SResponse
	15, // 16: infra_adapter.online_service.OperatorOnlineServiceF3S.ValidateToken:output_type -> sudo.protobuf.service.ValidateTokenResponse
	14, // [14:17] is the sub-list for method output_type
	11, // [11:14] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_service_online_service_f3s_proto_init() }
func file_service_online_service_f3s_proto_init() {
	if File_service_online_service_f3s_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_online_service_f3s_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Factor3SVerifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_online_service_f3s_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Factor3SVerifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_online_service_f3s_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Factor3SVerifyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_online_service_f3s_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F3SDeployServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_online_service_f3s_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F3SDeployClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_online_service_f3s_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyKnowledge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_online_service_f3s_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Factor3SVerifyParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_online_service_f3s_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F3SRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_online_service_f3s_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F3SResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_online_service_f3s_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F3SDeployResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_online_service_f3s_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_online_service_f3s_proto_goTypes,
		DependencyIndexes: file_service_online_service_f3s_proto_depIdxs,
		MessageInfos:      file_service_online_service_f3s_proto_msgTypes,
	}.Build()
	File_service_online_service_f3s_proto = out.File
	file_service_online_service_f3s_proto_rawDesc = nil
	file_service_online_service_f3s_proto_goTypes = nil
	file_service_online_service_f3s_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OperatorOnlineServiceF3SClient is the client API for OperatorOnlineServiceF3S service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OperatorOnlineServiceF3SClient interface {
	// 部署server端
	F3SDeployServer(ctx context.Context, in *F3SDeployServerRequest, opts ...grpc.CallOption) (*F3SDeployResponse, error)
	// F3S
	F3S(ctx context.Context, in *F3SRequest, opts ...grpc.CallOption) (*F3SResponse, error)
	// validate token，对于一个client对应同一个server的多个token的情况，不要重复调用deploy，而是校验token即可
	ValidateToken(ctx context.Context, in *service.ValidateTokenRequest, opts ...grpc.CallOption) (*service.ValidateTokenResponse, error)
}

type operatorOnlineServiceF3SClient struct {
	cc grpc.ClientConnInterface
}

func NewOperatorOnlineServiceF3SClient(cc grpc.ClientConnInterface) OperatorOnlineServiceF3SClient {
	return &operatorOnlineServiceF3SClient{cc}
}

func (c *operatorOnlineServiceF3SClient) F3SDeployServer(ctx context.Context, in *F3SDeployServerRequest, opts ...grpc.CallOption) (*F3SDeployResponse, error) {
	out := new(F3SDeployResponse)
	err := c.cc.Invoke(ctx, "/infra_adapter.online_service.OperatorOnlineServiceF3S/F3SDeployServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorOnlineServiceF3SClient) F3S(ctx context.Context, in *F3SRequest, opts ...grpc.CallOption) (*F3SResponse, error) {
	out := new(F3SResponse)
	err := c.cc.Invoke(ctx, "/infra_adapter.online_service.OperatorOnlineServiceF3S/F3S", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorOnlineServiceF3SClient) ValidateToken(ctx context.Context, in *service.ValidateTokenRequest, opts ...grpc.CallOption) (*service.ValidateTokenResponse, error) {
	out := new(service.ValidateTokenResponse)
	err := c.cc.Invoke(ctx, "/infra_adapter.online_service.OperatorOnlineServiceF3S/ValidateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperatorOnlineServiceF3SServer is the server API for OperatorOnlineServiceF3S service.
type OperatorOnlineServiceF3SServer interface {
	// 部署server端
	F3SDeployServer(context.Context, *F3SDeployServerRequest) (*F3SDeployResponse, error)
	// F3S
	F3S(context.Context, *F3SRequest) (*F3SResponse, error)
	// validate token，对于一个client对应同一个server的多个token的情况，不要重复调用deploy，而是校验token即可
	ValidateToken(context.Context, *service.ValidateTokenRequest) (*service.ValidateTokenResponse, error)
}

// UnimplementedOperatorOnlineServiceF3SServer can be embedded to have forward compatible implementations.
type UnimplementedOperatorOnlineServiceF3SServer struct {
}

func (*UnimplementedOperatorOnlineServiceF3SServer) F3SDeployServer(context.Context, *F3SDeployServerRequest) (*F3SDeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method F3SDeployServer not implemented")
}
func (*UnimplementedOperatorOnlineServiceF3SServer) F3S(context.Context, *F3SRequest) (*F3SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method F3S not implemented")
}
func (*UnimplementedOperatorOnlineServiceF3SServer) ValidateToken(context.Context, *service.ValidateTokenRequest) (*service.ValidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}

func RegisterOperatorOnlineServiceF3SServer(s *grpc.Server, srv OperatorOnlineServiceF3SServer) {
	s.RegisterService(&_OperatorOnlineServiceF3S_serviceDesc, srv)
}

func _OperatorOnlineServiceF3S_F3SDeployServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(F3SDeployServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorOnlineServiceF3SServer).F3SDeployServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra_adapter.online_service.OperatorOnlineServiceF3S/F3SDeployServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorOnlineServiceF3SServer).F3SDeployServer(ctx, req.(*F3SDeployServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorOnlineServiceF3S_F3S_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(F3SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorOnlineServiceF3SServer).F3S(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra_adapter.online_service.OperatorOnlineServiceF3S/F3S",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorOnlineServiceF3SServer).F3S(ctx, req.(*F3SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorOnlineServiceF3S_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(service.ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorOnlineServiceF3SServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra_adapter.online_service.OperatorOnlineServiceF3S/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorOnlineServiceF3SServer).ValidateToken(ctx, req.(*service.ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OperatorOnlineServiceF3S_serviceDesc = grpc.ServiceDesc{
	ServiceName: "infra_adapter.online_service.OperatorOnlineServiceF3S",
	HandlerType: (*OperatorOnlineServiceF3SServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "F3SDeployServer",
			Handler:    _OperatorOnlineServiceF3S_F3SDeployServer_Handler,
		},
		{
			MethodName: "F3S",
			Handler:    _OperatorOnlineServiceF3S_F3S_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _OperatorOnlineServiceF3S_ValidateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/online_service_f3s.proto",
}
