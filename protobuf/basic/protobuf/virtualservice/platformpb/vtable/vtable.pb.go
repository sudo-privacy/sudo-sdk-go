// Copyright 2022 Sudo Technology Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.1
// source: sudo/protobuf/mpc_virtual_service/platform/vtable.proto

package vtable

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	protobuf "sudoprivacy.com/go/sudosdk/protobuf/basic/protobuf"
	enums "sudoprivacy.com/go/sudosdk/protobuf/basic/protobuf/enums"
	datasource "sudoprivacy.com/go/sudosdk/protobuf/basic/protobuf/virtualservice/platformpb/datasource"
	_ "sudoprivacy.com/go/sudosdk/protobuf/basic/protobuf/virtualservice/platformpb/options"
	paginator "sudoprivacy.com/go/sudosdk/protobuf/basic/protobuf/virtualservice/platformpb/paginator"
	user "sudoprivacy.com/go/sudosdk/protobuf/basic/protobuf/virtualservice/platformpb/user"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VtableQueryOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64                           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ids                []uint64                         `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Name               string                           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	FuzzyText          string                           `protobuf:"bytes,4,opt,name=fuzzy_text,json=fuzzyText,proto3" json:"fuzzy_text,omitempty"`
	DataSrcId          uint64                           `protobuf:"varint,5,opt,name=data_src_id,json=dataSrcId,proto3" json:"data_src_id,omitempty"`
	DatasrcName        string                           `protobuf:"bytes,6,opt,name=datasrc_name,json=datasrcName,proto3" json:"datasrc_name,omitempty"`
	DatasrcType        int32                            `protobuf:"varint,7,opt,name=datasrc_type,json=datasrcType,proto3" json:"datasrc_type,omitempty"`
	DatasrcTypeStr     string                           `protobuf:"bytes,8,opt,name=datasrc_type_str,json=datasrcTypeStr,proto3" json:"datasrc_type_str,omitempty"`
	CreatedAfterTs     uint64                           `protobuf:"varint,9,opt,name=created_after_ts,json=createdAfterTs,proto3" json:"created_after_ts,omitempty"`
	CreatedBeforeTs    uint64                           `protobuf:"varint,10,opt,name=created_before_ts,json=createdBeforeTs,proto3" json:"created_before_ts,omitempty"`
	LastUpdateAfterTs  uint64                           `protobuf:"varint,11,opt,name=last_update_after_ts,json=lastUpdateAfterTs,proto3" json:"last_update_after_ts,omitempty"`
	LastUpdateBeforeTs uint64                           `protobuf:"varint,12,opt,name=last_update_before_ts,json=lastUpdateBeforeTs,proto3" json:"last_update_before_ts,omitempty"`
	PageSize           uint32                           `protobuf:"varint,13,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageNum            uint32                           `protobuf:"varint,14,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	Offset             uint32                           `protobuf:"varint,15,opt,name=offset,proto3" json:"offset,omitempty"`
	Status             int32                            `protobuf:"varint,16,opt,name=status,proto3" json:"status,omitempty"`
	StatusStr          string                           `protobuf:"bytes,17,opt,name=status_str,json=statusStr,proto3" json:"status_str,omitempty"`
	ExcludeStatus      enums.VirtualTable_Status        `protobuf:"varint,18,opt,name=exclude_status,json=excludeStatus,proto3,enum=sudo.protobuf.enums.VirtualTable_Status" json:"exclude_status,omitempty"`
	TagList            string                           `protobuf:"bytes,19,opt,name=tag_list,json=tagList,proto3" json:"tag_list,omitempty"`
	WithDatasrc        bool                             `protobuf:"varint,20,opt,name=with_datasrc,json=withDatasrc,proto3" json:"with_datasrc,omitempty"`
	NotDesc            bool                             `protobuf:"varint,21,opt,name=not_desc,json=notDesc,proto3" json:"not_desc,omitempty"`
	SortKey            string                           `protobuf:"bytes,22,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
	PartyId            string                           `protobuf:"bytes,23,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	CallerPartyId      string                           `protobuf:"bytes,24,opt,name=caller_party_id,json=callerPartyId,proto3" json:"caller_party_id,omitempty"`
	ProjectId          uint64                           `protobuf:"varint,25,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	OriginalOnly       bool                             `protobuf:"varint,26,opt,name=original_only,json=originalOnly,proto3" json:"original_only,omitempty"`
	AutogenedOnly      bool                             `protobuf:"varint,27,opt,name=autogened_only,json=autogenedOnly,proto3" json:"autogened_only,omitempty"`
	GeneratedType      enums.VirtualTable_SourceType    `protobuf:"varint,28,opt,name=generated_type,json=generatedType,proto3,enum=sudo.protobuf.enums.VirtualTable_SourceType" json:"generated_type,omitempty"`
	FindProjects       bool                             `protobuf:"varint,29,opt,name=find_projects,json=findProjects,proto3" json:"find_projects,omitempty"`
	FindOwner          bool                             `protobuf:"varint,30,opt,name=find_owner,json=findOwner,proto3" json:"find_owner,omitempty"`
	FromClient         bool                             `protobuf:"varint,31,opt,name=from_client,json=fromClient,proto3" json:"from_client,omitempty"`
	WithAssetStatus    bool                             `protobuf:"varint,32,opt,name=with_asset_status,json=withAssetStatus,proto3" json:"with_asset_status,omitempty"`
	ExcludeProjectId   uint64                           `protobuf:"varint,33,opt,name=exclude_project_id,json=excludeProjectId,proto3" json:"exclude_project_id,omitempty"`
	WithSegmentation   bool                             `protobuf:"varint,34,opt,name=with_segmentation,json=withSegmentation,proto3" json:"with_segmentation,omitempty"`
	OriginalParty      string                           `protobuf:"bytes,35,opt,name=original_party,json=originalParty,proto3" json:"original_party,omitempty"`
	ColumnShared       enums.VirtualTable_ShareFiltrate `protobuf:"varint,36,opt,name=column_shared,json=columnShared,proto3,enum=sudo.protobuf.enums.VirtualTable_ShareFiltrate" json:"column_shared,omitempty"`
	EmbodyDeleted      bool                             `protobuf:"varint,37,opt,name=embody_deleted,json=embodyDeleted,proto3" json:"embody_deleted,omitempty"`
	SkipSyncColumns    bool                             `protobuf:"varint,38,opt,name=skip_sync_columns,json=skipSyncColumns,proto3" json:"skip_sync_columns,omitempty"`
	OwnerUserId        uint64                           `protobuf:"varint,39,opt,name=owner_user_id,json=ownerUserId,proto3" json:"owner_user_id,omitempty"`
	NotPaging          bool                             `protobuf:"varint,40,opt,name=not_paging,json=notPaging,proto3" json:"not_paging,omitempty"`
	WithAdditional     bool                             `protobuf:"varint,41,opt,name=with_additional,json=withAdditional,proto3" json:"with_additional,omitempty"`
	IsMockData         bool                             `protobuf:"varint,42,opt,name=is_mock_data,json=isMockData,proto3" json:"is_mock_data,omitempty"`
}

func (x *VtableQueryOptions) Reset() {
	*x = VtableQueryOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VtableQueryOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VtableQueryOptions) ProtoMessage() {}

func (x *VtableQueryOptions) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VtableQueryOptions.ProtoReflect.Descriptor instead.
func (*VtableQueryOptions) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDescGZIP(), []int{0}
}

func (x *VtableQueryOptions) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VtableQueryOptions) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *VtableQueryOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VtableQueryOptions) GetFuzzyText() string {
	if x != nil {
		return x.FuzzyText
	}
	return ""
}

func (x *VtableQueryOptions) GetDataSrcId() uint64 {
	if x != nil {
		return x.DataSrcId
	}
	return 0
}

func (x *VtableQueryOptions) GetDatasrcName() string {
	if x != nil {
		return x.DatasrcName
	}
	return ""
}

func (x *VtableQueryOptions) GetDatasrcType() int32 {
	if x != nil {
		return x.DatasrcType
	}
	return 0
}

func (x *VtableQueryOptions) GetDatasrcTypeStr() string {
	if x != nil {
		return x.DatasrcTypeStr
	}
	return ""
}

func (x *VtableQueryOptions) GetCreatedAfterTs() uint64 {
	if x != nil {
		return x.CreatedAfterTs
	}
	return 0
}

func (x *VtableQueryOptions) GetCreatedBeforeTs() uint64 {
	if x != nil {
		return x.CreatedBeforeTs
	}
	return 0
}

func (x *VtableQueryOptions) GetLastUpdateAfterTs() uint64 {
	if x != nil {
		return x.LastUpdateAfterTs
	}
	return 0
}

func (x *VtableQueryOptions) GetLastUpdateBeforeTs() uint64 {
	if x != nil {
		return x.LastUpdateBeforeTs
	}
	return 0
}

func (x *VtableQueryOptions) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *VtableQueryOptions) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *VtableQueryOptions) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *VtableQueryOptions) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *VtableQueryOptions) GetStatusStr() string {
	if x != nil {
		return x.StatusStr
	}
	return ""
}

func (x *VtableQueryOptions) GetExcludeStatus() enums.VirtualTable_Status {
	if x != nil {
		return x.ExcludeStatus
	}
	return enums.VirtualTable_UNKNOWN_STATUS
}

func (x *VtableQueryOptions) GetTagList() string {
	if x != nil {
		return x.TagList
	}
	return ""
}

func (x *VtableQueryOptions) GetWithDatasrc() bool {
	if x != nil {
		return x.WithDatasrc
	}
	return false
}

func (x *VtableQueryOptions) GetNotDesc() bool {
	if x != nil {
		return x.NotDesc
	}
	return false
}

func (x *VtableQueryOptions) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

func (x *VtableQueryOptions) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *VtableQueryOptions) GetCallerPartyId() string {
	if x != nil {
		return x.CallerPartyId
	}
	return ""
}

func (x *VtableQueryOptions) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *VtableQueryOptions) GetOriginalOnly() bool {
	if x != nil {
		return x.OriginalOnly
	}
	return false
}

func (x *VtableQueryOptions) GetAutogenedOnly() bool {
	if x != nil {
		return x.AutogenedOnly
	}
	return false
}

func (x *VtableQueryOptions) GetGeneratedType() enums.VirtualTable_SourceType {
	if x != nil {
		return x.GeneratedType
	}
	return enums.VirtualTable_ALL_SOURCE
}

func (x *VtableQueryOptions) GetFindProjects() bool {
	if x != nil {
		return x.FindProjects
	}
	return false
}

func (x *VtableQueryOptions) GetFindOwner() bool {
	if x != nil {
		return x.FindOwner
	}
	return false
}

func (x *VtableQueryOptions) GetFromClient() bool {
	if x != nil {
		return x.FromClient
	}
	return false
}

func (x *VtableQueryOptions) GetWithAssetStatus() bool {
	if x != nil {
		return x.WithAssetStatus
	}
	return false
}

func (x *VtableQueryOptions) GetExcludeProjectId() uint64 {
	if x != nil {
		return x.ExcludeProjectId
	}
	return 0
}

func (x *VtableQueryOptions) GetWithSegmentation() bool {
	if x != nil {
		return x.WithSegmentation
	}
	return false
}

func (x *VtableQueryOptions) GetOriginalParty() string {
	if x != nil {
		return x.OriginalParty
	}
	return ""
}

func (x *VtableQueryOptions) GetColumnShared() enums.VirtualTable_ShareFiltrate {
	if x != nil {
		return x.ColumnShared
	}
	return enums.VirtualTable_ALL_RECORD
}

func (x *VtableQueryOptions) GetEmbodyDeleted() bool {
	if x != nil {
		return x.EmbodyDeleted
	}
	return false
}

func (x *VtableQueryOptions) GetSkipSyncColumns() bool {
	if x != nil {
		return x.SkipSyncColumns
	}
	return false
}

func (x *VtableQueryOptions) GetOwnerUserId() uint64 {
	if x != nil {
		return x.OwnerUserId
	}
	return 0
}

func (x *VtableQueryOptions) GetNotPaging() bool {
	if x != nil {
		return x.NotPaging
	}
	return false
}

func (x *VtableQueryOptions) GetWithAdditional() bool {
	if x != nil {
		return x.WithAdditional
	}
	return false
}

func (x *VtableQueryOptions) GetIsMockData() bool {
	if x != nil {
		return x.IsMockData
	}
	return false
}

type AdditionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceProjectId   uint64           `protobuf:"varint,1,opt,name=source_project_id,json=sourceProjectId,proto3" json:"source_project_id,omitempty"`
	SourceProjectName string           `protobuf:"bytes,2,opt,name=source_project_name,json=sourceProjectName,proto3" json:"source_project_name,omitempty"`
	SourceTaskId      uint64           `protobuf:"varint,3,opt,name=source_task_id,json=sourceTaskId,proto3" json:"source_task_id,omitempty"`
	SourceTaskName    string           `protobuf:"bytes,4,opt,name=source_task_name,json=sourceTaskName,proto3" json:"source_task_name,omitempty"`
	StageType         enums.Stage_Type `protobuf:"varint,5,opt,name=stage_type,json=stageType,proto3,enum=sudo.protobuf.enums.Stage_Type" json:"stage_type,omitempty"`
}

func (x *AdditionInfo) Reset() {
	*x = AdditionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdditionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionInfo) ProtoMessage() {}

func (x *AdditionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionInfo.ProtoReflect.Descriptor instead.
func (*AdditionInfo) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDescGZIP(), []int{1}
}

func (x *AdditionInfo) GetSourceProjectId() uint64 {
	if x != nil {
		return x.SourceProjectId
	}
	return 0
}

func (x *AdditionInfo) GetSourceProjectName() string {
	if x != nil {
		return x.SourceProjectName
	}
	return ""
}

func (x *AdditionInfo) GetSourceTaskId() uint64 {
	if x != nil {
		return x.SourceTaskId
	}
	return 0
}

func (x *AdditionInfo) GetSourceTaskName() string {
	if x != nil {
		return x.SourceTaskName
	}
	return ""
}

func (x *AdditionInfo) GetStageType() enums.Stage_Type {
	if x != nil {
		return x.StageType
	}
	return enums.Stage_unknown
}

type Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field       string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Type        string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Shared      bool   `protobuf:"varint,3,opt,name=shared,proto3" json:"shared,omitempty"`
	Alias       string `protobuf:"bytes,4,opt,name=alias,proto3" json:"alias,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Column) Reset() {
	*x = Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDescGZIP(), []int{2}
}

func (x *Column) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Column) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Column) GetShared() bool {
	if x != nil {
		return x.Shared
	}
	return false
}

func (x *Column) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Column) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type SegmentationHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalVtableId  uint64 `protobuf:"varint,1,opt,name=original_vtable_id,json=originalVtableId,proto3" json:"original_vtable_id,omitempty"`
	GeneratedVtableId uint64 `protobuf:"varint,2,opt,name=generated_vtable_id,json=generatedVtableId,proto3" json:"generated_vtable_id,omitempty"`
	BucketCount       uint64 `protobuf:"varint,3,opt,name=bucket_count,json=bucketCount,proto3" json:"bucket_count,omitempty"`
	PartitionCount    uint64 `protobuf:"varint,4,opt,name=partition_count,json=partitionCount,proto3" json:"partition_count,omitempty"`
	CreatedTs         int64  `protobuf:"varint,5,opt,name=created_ts,json=createdTs,proto3" json:"created_ts,omitempty"`
}

func (x *SegmentationHistory) Reset() {
	*x = SegmentationHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentationHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentationHistory) ProtoMessage() {}

func (x *SegmentationHistory) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentationHistory.ProtoReflect.Descriptor instead.
func (*SegmentationHistory) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDescGZIP(), []int{3}
}

func (x *SegmentationHistory) GetOriginalVtableId() uint64 {
	if x != nil {
		return x.OriginalVtableId
	}
	return 0
}

func (x *SegmentationHistory) GetGeneratedVtableId() uint64 {
	if x != nil {
		return x.GeneratedVtableId
	}
	return 0
}

func (x *SegmentationHistory) GetBucketCount() uint64 {
	if x != nil {
		return x.BucketCount
	}
	return 0
}

func (x *SegmentationHistory) GetPartitionCount() uint64 {
	if x != nil {
		return x.PartitionCount
	}
	return 0
}

func (x *SegmentationHistory) GetCreatedTs() int64 {
	if x != nil {
		return x.CreatedTs
	}
	return 0
}

type VtableBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint64                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedTs           int64                     `protobuf:"varint,2,opt,name=created_ts,json=createdTs,proto3" json:"created_ts,omitempty"`
	UpdatedTs           int64                     `protobuf:"varint,3,opt,name=updated_ts,json=updatedTs,proto3" json:"updated_ts,omitempty"`
	Name                string                    `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description         string                    `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	DatasourceId        uint64                    `protobuf:"varint,6,opt,name=datasource_id,json=datasourceId,proto3" json:"datasource_id,omitempty"`
	OwnerUserId         uint64                    `protobuf:"varint,7,opt,name=owner_user_id,json=ownerUserId,proto3" json:"owner_user_id,omitempty"`
	OwnerParty          string                    `protobuf:"bytes,8,opt,name=owner_party,json=ownerParty,proto3" json:"owner_party,omitempty"`
	Autogened           bool                      `protobuf:"varint,9,opt,name=autogened,proto3" json:"autogened,omitempty"`
	Avatar              string                    `protobuf:"bytes,10,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Path                string                    `protobuf:"bytes,11,opt,name=path,proto3" json:"path,omitempty"`
	ProjectIds          []uint64                  `protobuf:"varint,12,rep,packed,name=project_ids,json=projectIds,proto3" json:"project_ids,omitempty"`
	DataSize            uint64                    `protobuf:"varint,13,opt,name=data_size,json=dataSize,proto3" json:"data_size,omitempty"`
	DataColumn          uint64                    `protobuf:"varint,14,opt,name=data_column,json=dataColumn,proto3" json:"data_column,omitempty"`
	DataShape           string                    `protobuf:"bytes,15,opt,name=data_shape,json=dataShape,proto3" json:"data_shape,omitempty"`
	SampleData          string                    `protobuf:"bytes,16,opt,name=sample_data,json=sampleData,proto3" json:"sample_data,omitempty"`
	DataQualityReportId uint64                    `protobuf:"varint,17,opt,name=data_quality_report_id,json=dataQualityReportId,proto3" json:"data_quality_report_id,omitempty"`
	Delimiter           int32                     `protobuf:"varint,18,opt,name=delimiter,proto3" json:"delimiter,omitempty"`
	Status              string                    `protobuf:"bytes,19,opt,name=status,proto3" json:"status,omitempty"`
	BucketPartitions    []*SegmentationHistory    `protobuf:"bytes,20,rep,name=bucket_partitions,json=bucketPartitions,proto3" json:"bucket_partitions,omitempty"`
	Columns             []*Column                 `protobuf:"bytes,21,rep,name=columns,proto3" json:"columns,omitempty"`
	ColumnShared        bool                      `protobuf:"varint,22,opt,name=column_shared,json=columnShared,proto3" json:"column_shared,omitempty"`
	AdditionalInfoBin   []byte                    `protobuf:"bytes,23,opt,name=additional_info_bin,json=additionalInfoBin,proto3" json:"additional_info_bin,omitempty"`
	AdditionalInfo      *AdditionInfo             `protobuf:"bytes,24,opt,name=additional_info,json=additionalInfo,proto3" json:"additional_info,omitempty"`
	TaskId              uint64                    `protobuf:"varint,25,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	StageId             uint64                    `protobuf:"varint,26,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	Suffix              enums.VirtualTable_Suffix `protobuf:"varint,27,opt,name=suffix,proto3,enum=sudo.protobuf.enums.VirtualTable_Suffix" json:"suffix,omitempty"`
	StatusEnum          enums.VirtualTable_Status `protobuf:"varint,28,opt,name=status_enum,json=statusEnum,proto3,enum=sudo.protobuf.enums.VirtualTable_Status" json:"status_enum,omitempty"`
}

func (x *VtableBase) Reset() {
	*x = VtableBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VtableBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VtableBase) ProtoMessage() {}

func (x *VtableBase) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VtableBase.ProtoReflect.Descriptor instead.
func (*VtableBase) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDescGZIP(), []int{4}
}

func (x *VtableBase) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VtableBase) GetCreatedTs() int64 {
	if x != nil {
		return x.CreatedTs
	}
	return 0
}

func (x *VtableBase) GetUpdatedTs() int64 {
	if x != nil {
		return x.UpdatedTs
	}
	return 0
}

func (x *VtableBase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VtableBase) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VtableBase) GetDatasourceId() uint64 {
	if x != nil {
		return x.DatasourceId
	}
	return 0
}

func (x *VtableBase) GetOwnerUserId() uint64 {
	if x != nil {
		return x.OwnerUserId
	}
	return 0
}

func (x *VtableBase) GetOwnerParty() string {
	if x != nil {
		return x.OwnerParty
	}
	return ""
}

func (x *VtableBase) GetAutogened() bool {
	if x != nil {
		return x.Autogened
	}
	return false
}

func (x *VtableBase) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *VtableBase) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *VtableBase) GetProjectIds() []uint64 {
	if x != nil {
		return x.ProjectIds
	}
	return nil
}

func (x *VtableBase) GetDataSize() uint64 {
	if x != nil {
		return x.DataSize
	}
	return 0
}

func (x *VtableBase) GetDataColumn() uint64 {
	if x != nil {
		return x.DataColumn
	}
	return 0
}

func (x *VtableBase) GetDataShape() string {
	if x != nil {
		return x.DataShape
	}
	return ""
}

func (x *VtableBase) GetSampleData() string {
	if x != nil {
		return x.SampleData
	}
	return ""
}

func (x *VtableBase) GetDataQualityReportId() uint64 {
	if x != nil {
		return x.DataQualityReportId
	}
	return 0
}

func (x *VtableBase) GetDelimiter() int32 {
	if x != nil {
		return x.Delimiter
	}
	return 0
}

func (x *VtableBase) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VtableBase) GetBucketPartitions() []*SegmentationHistory {
	if x != nil {
		return x.BucketPartitions
	}
	return nil
}

func (x *VtableBase) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *VtableBase) GetColumnShared() bool {
	if x != nil {
		return x.ColumnShared
	}
	return false
}

func (x *VtableBase) GetAdditionalInfoBin() []byte {
	if x != nil {
		return x.AdditionalInfoBin
	}
	return nil
}

func (x *VtableBase) GetAdditionalInfo() *AdditionInfo {
	if x != nil {
		return x.AdditionalInfo
	}
	return nil
}

func (x *VtableBase) GetTaskId() uint64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *VtableBase) GetStageId() uint64 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *VtableBase) GetSuffix() enums.VirtualTable_Suffix {
	if x != nil {
		return x.Suffix
	}
	return enums.VirtualTable_UNKNOWN_SUFFIX
}

func (x *VtableBase) GetStatusEnum() enums.VirtualTable_Status {
	if x != nil {
		return x.StatusEnum
	}
	return enums.VirtualTable_UNKNOWN_STATUS
}

type Vtable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base      *VtableBase            `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	OwnerUser *user.User             `protobuf:"bytes,2,opt,name=owner_user,json=ownerUser,proto3" json:"owner_user,omitempty"`
	Datasrc   *datasource.DataSource `protobuf:"bytes,3,opt,name=datasrc,proto3" json:"datasrc,omitempty"`
}

func (x *Vtable) Reset() {
	*x = Vtable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vtable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vtable) ProtoMessage() {}

func (x *Vtable) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vtable.ProtoReflect.Descriptor instead.
func (*Vtable) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDescGZIP(), []int{5}
}

func (x *Vtable) GetBase() *VtableBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *Vtable) GetOwnerUser() *user.User {
	if x != nil {
		return x.OwnerUser
	}
	return nil
}

func (x *Vtable) GetDatasrc() *datasource.DataSource {
	if x != nil {
		return x.Datasrc
	}
	return nil
}

type ListVtablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryOptions *VtableQueryOptions `protobuf:"bytes,1,opt,name=query_options,json=queryOptions,proto3" json:"query_options,omitempty"`
}

func (x *ListVtablesRequest) Reset() {
	*x = ListVtablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVtablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVtablesRequest) ProtoMessage() {}

func (x *ListVtablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVtablesRequest.ProtoReflect.Descriptor instead.
func (*ListVtablesRequest) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDescGZIP(), []int{6}
}

func (x *ListVtablesRequest) GetQueryOptions() *VtableQueryOptions {
	if x != nil {
		return x.QueryOptions
	}
	return nil
}

type ListVtablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*Vtable `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int64     `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListVtablesResponse) Reset() {
	*x = ListVtablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVtablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVtablesResponse) ProtoMessage() {}

func (x *ListVtablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVtablesResponse.ProtoReflect.Descriptor instead.
func (*ListVtablesResponse) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDescGZIP(), []int{7}
}

func (x *ListVtablesResponse) GetData() []*Vtable {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListVtablesResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CreateVtableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint64                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedTs           int64                     `protobuf:"varint,2,opt,name=created_ts,json=createdTs,proto3" json:"created_ts,omitempty"`
	UpdatedTs           int64                     `protobuf:"varint,3,opt,name=updated_ts,json=updatedTs,proto3" json:"updated_ts,omitempty"`
	Name                string                    `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description         string                    `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	DatasourceId        uint64                    `protobuf:"varint,6,opt,name=datasource_id,json=datasourceId,proto3" json:"datasource_id,omitempty"`
	OwnerUserId         uint64                    `protobuf:"varint,7,opt,name=owner_user_id,json=ownerUserId,proto3" json:"owner_user_id,omitempty"`
	OwnerParty          string                    `protobuf:"bytes,8,opt,name=owner_party,json=ownerParty,proto3" json:"owner_party,omitempty"`
	Autogened           bool                      `protobuf:"varint,9,opt,name=autogened,proto3" json:"autogened,omitempty"`
	Avatar              string                    `protobuf:"bytes,10,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Path                string                    `protobuf:"bytes,11,opt,name=path,proto3" json:"path,omitempty"`
	ProjectIds          []uint64                  `protobuf:"varint,12,rep,packed,name=project_ids,json=projectIds,proto3" json:"project_ids,omitempty"`
	DataSize            uint64                    `protobuf:"varint,13,opt,name=data_size,json=dataSize,proto3" json:"data_size,omitempty"`
	DataColumn          uint64                    `protobuf:"varint,14,opt,name=data_column,json=dataColumn,proto3" json:"data_column,omitempty"`
	DataShape           string                    `protobuf:"bytes,15,opt,name=data_shape,json=dataShape,proto3" json:"data_shape,omitempty"`
	SampleData          string                    `protobuf:"bytes,16,opt,name=sample_data,json=sampleData,proto3" json:"sample_data,omitempty"`
	DataQualityReportId uint64                    `protobuf:"varint,17,opt,name=data_quality_report_id,json=dataQualityReportId,proto3" json:"data_quality_report_id,omitempty"`
	Delimiter           int32                     `protobuf:"varint,18,opt,name=delimiter,proto3" json:"delimiter,omitempty"`
	Status              enums.VirtualTable_Status `protobuf:"varint,19,opt,name=status,proto3,enum=sudo.protobuf.enums.VirtualTable_Status" json:"status,omitempty"`
	BucketPartitions    []*SegmentationHistory    `protobuf:"bytes,20,rep,name=bucket_partitions,json=bucketPartitions,proto3" json:"bucket_partitions,omitempty"`
	Columns             []*Column                 `protobuf:"bytes,21,rep,name=columns,proto3" json:"columns,omitempty"`
	ColumnShared        bool                      `protobuf:"varint,22,opt,name=column_shared,json=columnShared,proto3" json:"column_shared,omitempty"`
	AdditionalInfoBin   []byte                    `protobuf:"bytes,23,opt,name=additional_info_bin,json=additionalInfoBin,proto3" json:"additional_info_bin,omitempty"`
	AdditionalInfo      *AdditionInfo             `protobuf:"bytes,24,opt,name=additional_info,json=additionalInfo,proto3" json:"additional_info,omitempty"`
	TaskId              uint64                    `protobuf:"varint,25,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	StageId             uint64                    `protobuf:"varint,26,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	Suffix              enums.VirtualTable_Suffix `protobuf:"varint,27,opt,name=suffix,proto3,enum=sudo.protobuf.enums.VirtualTable_Suffix" json:"suffix,omitempty"`
}

func (x *CreateVtableRequest) Reset() {
	*x = CreateVtableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVtableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVtableRequest) ProtoMessage() {}

func (x *CreateVtableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVtableRequest.ProtoReflect.Descriptor instead.
func (*CreateVtableRequest) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDescGZIP(), []int{8}
}

func (x *CreateVtableRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateVtableRequest) GetCreatedTs() int64 {
	if x != nil {
		return x.CreatedTs
	}
	return 0
}

func (x *CreateVtableRequest) GetUpdatedTs() int64 {
	if x != nil {
		return x.UpdatedTs
	}
	return 0
}

func (x *CreateVtableRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateVtableRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateVtableRequest) GetDatasourceId() uint64 {
	if x != nil {
		return x.DatasourceId
	}
	return 0
}

func (x *CreateVtableRequest) GetOwnerUserId() uint64 {
	if x != nil {
		return x.OwnerUserId
	}
	return 0
}

func (x *CreateVtableRequest) GetOwnerParty() string {
	if x != nil {
		return x.OwnerParty
	}
	return ""
}

func (x *CreateVtableRequest) GetAutogened() bool {
	if x != nil {
		return x.Autogened
	}
	return false
}

func (x *CreateVtableRequest) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *CreateVtableRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CreateVtableRequest) GetProjectIds() []uint64 {
	if x != nil {
		return x.ProjectIds
	}
	return nil
}

func (x *CreateVtableRequest) GetDataSize() uint64 {
	if x != nil {
		return x.DataSize
	}
	return 0
}

func (x *CreateVtableRequest) GetDataColumn() uint64 {
	if x != nil {
		return x.DataColumn
	}
	return 0
}

func (x *CreateVtableRequest) GetDataShape() string {
	if x != nil {
		return x.DataShape
	}
	return ""
}

func (x *CreateVtableRequest) GetSampleData() string {
	if x != nil {
		return x.SampleData
	}
	return ""
}

func (x *CreateVtableRequest) GetDataQualityReportId() uint64 {
	if x != nil {
		return x.DataQualityReportId
	}
	return 0
}

func (x *CreateVtableRequest) GetDelimiter() int32 {
	if x != nil {
		return x.Delimiter
	}
	return 0
}

func (x *CreateVtableRequest) GetStatus() enums.VirtualTable_Status {
	if x != nil {
		return x.Status
	}
	return enums.VirtualTable_UNKNOWN_STATUS
}

func (x *CreateVtableRequest) GetBucketPartitions() []*SegmentationHistory {
	if x != nil {
		return x.BucketPartitions
	}
	return nil
}

func (x *CreateVtableRequest) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *CreateVtableRequest) GetColumnShared() bool {
	if x != nil {
		return x.ColumnShared
	}
	return false
}

func (x *CreateVtableRequest) GetAdditionalInfoBin() []byte {
	if x != nil {
		return x.AdditionalInfoBin
	}
	return nil
}

func (x *CreateVtableRequest) GetAdditionalInfo() *AdditionInfo {
	if x != nil {
		return x.AdditionalInfo
	}
	return nil
}

func (x *CreateVtableRequest) GetTaskId() uint64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *CreateVtableRequest) GetStageId() uint64 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *CreateVtableRequest) GetSuffix() enums.VirtualTable_Suffix {
	if x != nil {
		return x.Suffix
	}
	return enums.VirtualTable_UNKNOWN_SUFFIX
}

type CreateVtableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Vtable `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateVtableResponse) Reset() {
	*x = CreateVtableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVtableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVtableResponse) ProtoMessage() {}

func (x *CreateVtableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVtableResponse.ProtoReflect.Descriptor instead.
func (*CreateVtableResponse) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDescGZIP(), []int{9}
}

func (x *CreateVtableResponse) GetData() *Vtable {
	if x != nil {
		return x.Data
	}
	return nil
}

type AttachVtableToProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// vtable ids
	VtableIds []uint64 `protobuf:"varint,1,rep,packed,name=vtable_ids,json=vtableIds,proto3" json:"vtable_ids,omitempty"`
	// project ids
	ProjectIds []uint64 `protobuf:"varint,2,rep,packed,name=project_ids,json=projectIds,proto3" json:"project_ids,omitempty"`
}

func (x *AttachVtableToProjectRequest) Reset() {
	*x = AttachVtableToProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachVtableToProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachVtableToProjectRequest) ProtoMessage() {}

func (x *AttachVtableToProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachVtableToProjectRequest.ProtoReflect.Descriptor instead.
func (*AttachVtableToProjectRequest) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDescGZIP(), []int{10}
}

func (x *AttachVtableToProjectRequest) GetVtableIds() []uint64 {
	if x != nil {
		return x.VtableIds
	}
	return nil
}

func (x *AttachVtableToProjectRequest) GetProjectIds() []uint64 {
	if x != nil {
		return x.ProjectIds
	}
	return nil
}

type DetachVtableToProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// vtable ids
	VtableIds []uint64 `protobuf:"varint,1,rep,packed,name=vtable_ids,json=vtableIds,proto3" json:"vtable_ids,omitempty"`
	// project ids
	ProjectIds []uint64 `protobuf:"varint,2,rep,packed,name=project_ids,json=projectIds,proto3" json:"project_ids,omitempty"`
	// delete vtable meta data
	DeleteMeta bool `protobuf:"varint,3,opt,name=delete_meta,json=deleteMeta,proto3" json:"delete_meta,omitempty"`
	// delete vtable data
	RmVtable bool `protobuf:"varint,4,opt,name=rm_vtable,json=rmVtable,proto3" json:"rm_vtable,omitempty"`
}

func (x *DetachVtableToProjectRequest) Reset() {
	*x = DetachVtableToProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetachVtableToProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetachVtableToProjectRequest) ProtoMessage() {}

func (x *DetachVtableToProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetachVtableToProjectRequest.ProtoReflect.Descriptor instead.
func (*DetachVtableToProjectRequest) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDescGZIP(), []int{11}
}

func (x *DetachVtableToProjectRequest) GetVtableIds() []uint64 {
	if x != nil {
		return x.VtableIds
	}
	return nil
}

func (x *DetachVtableToProjectRequest) GetProjectIds() []uint64 {
	if x != nil {
		return x.ProjectIds
	}
	return nil
}

func (x *DetachVtableToProjectRequest) GetDeleteMeta() bool {
	if x != nil {
		return x.DeleteMeta
	}
	return false
}

func (x *DetachVtableToProjectRequest) GetRmVtable() bool {
	if x != nil {
		return x.RmVtable
	}
	return false
}

type DeleteVtableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// vtable ids
	Pk []uint64 `protobuf:"varint,1,rep,packed,name=pk,proto3" json:"pk,omitempty"`
	// delete vtable meta data
	DeleteMeta bool `protobuf:"varint,2,opt,name=delete_meta,json=deleteMeta,proto3" json:"delete_meta,omitempty"`
}

func (x *DeleteVtableRequest) Reset() {
	*x = DeleteVtableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVtableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVtableRequest) ProtoMessage() {}

func (x *DeleteVtableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVtableRequest.ProtoReflect.Descriptor instead.
func (*DeleteVtableRequest) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteVtableRequest) GetPk() []uint64 {
	if x != nil {
		return x.Pk
	}
	return nil
}

func (x *DeleteVtableRequest) GetDeleteMeta() bool {
	if x != nil {
		return x.DeleteMeta
	}
	return false
}

type UpdateVtableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// vtable id
	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectId   string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	DataColumn  uint64 `protobuf:"varint,5,opt,name=data_column,json=dataColumn,proto3" json:"data_column,omitempty"`
	DataSize    uint64 `protobuf:"varint,6,opt,name=data_size,json=dataSize,proto3" json:"data_size,omitempty"`
	Avatar      string `protobuf:"bytes,7,opt,name=avatar,proto3" json:"avatar,omitempty"`
	// set columns alias
	ColumnsAlias map[string]string `protobuf:"bytes,8,rep,name=columns_alias,json=columnsAlias,proto3" json:"columns_alias,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// set columns description
	ColumnsDescription map[string]string `protobuf:"bytes,9,rep,name=columns_description,json=columnsDescription,proto3" json:"columns_description,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateVtableRequest) Reset() {
	*x = UpdateVtableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVtableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVtableRequest) ProtoMessage() {}

func (x *UpdateVtableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVtableRequest.ProtoReflect.Descriptor instead.
func (*UpdateVtableRequest) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateVtableRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateVtableRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UpdateVtableRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateVtableRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateVtableRequest) GetDataColumn() uint64 {
	if x != nil {
		return x.DataColumn
	}
	return 0
}

func (x *UpdateVtableRequest) GetDataSize() uint64 {
	if x != nil {
		return x.DataSize
	}
	return 0
}

func (x *UpdateVtableRequest) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UpdateVtableRequest) GetColumnsAlias() map[string]string {
	if x != nil {
		return x.ColumnsAlias
	}
	return nil
}

func (x *UpdateVtableRequest) GetColumnsDescription() map[string]string {
	if x != nil {
		return x.ColumnsDescription
	}
	return nil
}

type UpdateVtableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Vtable `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateVtableResponse) Reset() {
	*x = UpdateVtableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVtableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVtableResponse) ProtoMessage() {}

func (x *UpdateVtableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVtableResponse.ProtoReflect.Descriptor instead.
func (*UpdateVtableResponse) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateVtableResponse) GetData() *Vtable {
	if x != nil {
		return x.Data
	}
	return nil
}

type SyncVtableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VtableId uint64 `protobuf:"varint,1,opt,name=vtable_id,json=vtableId,proto3" json:"vtable_id,omitempty"`
}

func (x *SyncVtableRequest) Reset() {
	*x = SyncVtableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncVtableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncVtableRequest) ProtoMessage() {}

func (x *SyncVtableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncVtableRequest.ProtoReflect.Descriptor instead.
func (*SyncVtableRequest) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDescGZIP(), []int{15}
}

func (x *SyncVtableRequest) GetVtableId() uint64 {
	if x != nil {
		return x.VtableId
	}
	return 0
}

// since these columns are saved as flags, please ensure forward compatibility when extending
// number of fields should be < sizeof(uint64)
type VtableColumnsVisibilitySetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         bool `protobuf:"varint,1,opt,name=name,proto3" json:"name,omitempty"`
	Id           bool `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Autogened    bool `protobuf:"varint,3,opt,name=autogened,proto3" json:"autogened,omitempty"`
	OwnerUser    bool `protobuf:"varint,4,opt,name=owner_user,json=ownerUser,proto3" json:"owner_user,omitempty"`
	CreatedTs    bool `protobuf:"varint,5,opt,name=created_ts,json=createdTs,proto3" json:"created_ts,omitempty"`
	UpdatedTs    bool `protobuf:"varint,6,opt,name=updated_ts,json=updatedTs,proto3" json:"updated_ts,omitempty"`
	DataColumn   bool `protobuf:"varint,7,opt,name=data_column,json=dataColumn,proto3" json:"data_column,omitempty"`
	DataSize     bool `protobuf:"varint,8,opt,name=data_size,json=dataSize,proto3" json:"data_size,omitempty"`
	DatasrcType  bool `protobuf:"varint,9,opt,name=datasrc_type,json=datasrcType,proto3" json:"datasrc_type,omitempty"`
	DatasrcName  bool `protobuf:"varint,10,opt,name=datasrc_name,json=datasrcName,proto3" json:"datasrc_name,omitempty"`
	ColumnShared bool `protobuf:"varint,11,opt,name=column_shared,json=columnShared,proto3" json:"column_shared,omitempty"`
	Authorized   bool `protobuf:"varint,12,opt,name=authorized,proto3" json:"authorized,omitempty"`
	Action       bool `protobuf:"varint,13,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *VtableColumnsVisibilitySetting) Reset() {
	*x = VtableColumnsVisibilitySetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VtableColumnsVisibilitySetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VtableColumnsVisibilitySetting) ProtoMessage() {}

func (x *VtableColumnsVisibilitySetting) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VtableColumnsVisibilitySetting.ProtoReflect.Descriptor instead.
func (*VtableColumnsVisibilitySetting) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDescGZIP(), []int{16}
}

func (x *VtableColumnsVisibilitySetting) GetName() bool {
	if x != nil {
		return x.Name
	}
	return false
}

func (x *VtableColumnsVisibilitySetting) GetId() bool {
	if x != nil {
		return x.Id
	}
	return false
}

func (x *VtableColumnsVisibilitySetting) GetAutogened() bool {
	if x != nil {
		return x.Autogened
	}
	return false
}

func (x *VtableColumnsVisibilitySetting) GetOwnerUser() bool {
	if x != nil {
		return x.OwnerUser
	}
	return false
}

func (x *VtableColumnsVisibilitySetting) GetCreatedTs() bool {
	if x != nil {
		return x.CreatedTs
	}
	return false
}

func (x *VtableColumnsVisibilitySetting) GetUpdatedTs() bool {
	if x != nil {
		return x.UpdatedTs
	}
	return false
}

func (x *VtableColumnsVisibilitySetting) GetDataColumn() bool {
	if x != nil {
		return x.DataColumn
	}
	return false
}

func (x *VtableColumnsVisibilitySetting) GetDataSize() bool {
	if x != nil {
		return x.DataSize
	}
	return false
}

func (x *VtableColumnsVisibilitySetting) GetDatasrcType() bool {
	if x != nil {
		return x.DatasrcType
	}
	return false
}

func (x *VtableColumnsVisibilitySetting) GetDatasrcName() bool {
	if x != nil {
		return x.DatasrcName
	}
	return false
}

func (x *VtableColumnsVisibilitySetting) GetColumnShared() bool {
	if x != nil {
		return x.ColumnShared
	}
	return false
}

func (x *VtableColumnsVisibilitySetting) GetAuthorized() bool {
	if x != nil {
		return x.Authorized
	}
	return false
}

func (x *VtableColumnsVisibilitySetting) GetAction() bool {
	if x != nil {
		return x.Action
	}
	return false
}

type GetVtableRawDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pager     *paginator.Paginator `protobuf:"bytes,1,opt,name=pager,proto3" json:"pager,omitempty"`
	FromParty string               `protobuf:"bytes,2,opt,name=from_party,json=fromParty,proto3" json:"from_party,omitempty"`
	Party     string               `protobuf:"bytes,3,opt,name=party,proto3" json:"party,omitempty"`
	VtableId  uint64               `protobuf:"varint,4,opt,name=vtable_id,json=vtableId,proto3" json:"vtable_id,omitempty"`
}

func (x *GetVtableRawDataRequest) Reset() {
	*x = GetVtableRawDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVtableRawDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVtableRawDataRequest) ProtoMessage() {}

func (x *GetVtableRawDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVtableRawDataRequest.ProtoReflect.Descriptor instead.
func (*GetVtableRawDataRequest) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDescGZIP(), []int{17}
}

func (x *GetVtableRawDataRequest) GetPager() *paginator.Paginator {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *GetVtableRawDataRequest) GetFromParty() string {
	if x != nil {
		return x.FromParty
	}
	return ""
}

func (x *GetVtableRawDataRequest) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *GetVtableRawDataRequest) GetVtableId() uint64 {
	if x != nil {
		return x.VtableId
	}
	return 0
}

type GetVtableRawDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VtableId uint64                `protobuf:"varint,1,opt,name=vtable_id,json=vtableId,proto3" json:"vtable_id,omitempty"`
	Name     string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Data     []*protobuf.SqlColumn `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Json     string                `protobuf:"bytes,4,opt,name=json,proto3" json:"json,omitempty"`
	Total    uint64                `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetVtableRawDataResponse) Reset() {
	*x = GetVtableRawDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVtableRawDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVtableRawDataResponse) ProtoMessage() {}

func (x *GetVtableRawDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVtableRawDataResponse.ProtoReflect.Descriptor instead.
func (*GetVtableRawDataResponse) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDescGZIP(), []int{18}
}

func (x *GetVtableRawDataResponse) GetVtableId() uint64 {
	if x != nil {
		return x.VtableId
	}
	return 0
}

func (x *GetVtableRawDataResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetVtableRawDataResponse) GetData() []*protobuf.SqlColumn {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetVtableRawDataResponse) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

func (x *GetVtableRawDataResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_sudo_protobuf_mpc_virtual_service_platform_vtable_proto protoreflect.FileDescriptor

var file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDesc = []byte{
	0x0a, 0x37, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x76, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x73, 0x75, 0x64, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x38, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x3c, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x35, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcc, 0x0c, 0x0a, 0x12, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x53, 0x72, 0x63, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x72, 0x63, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x72, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x72, 0x63, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x72, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x72, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x72, 0x63, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74,
	0x72, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x5f, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x74,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x74,
	0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53,
	0x74, 0x72, 0x12, 0x4f, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x75, 0x64,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x72, 0x63, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x72,
	0x63, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x6f, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x65,
	0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x53, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e,
	0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69,
	0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x77, 0x69, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x54, 0x0a,
	0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6d, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6d, 0x62,
	0x6f, 0x64, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6b,
	0x69, 0x70, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x6e, 0x6f, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4d, 0x6f, 0x63, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x22, 0xfa, 0x01, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x82, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xde, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2c,
	0x0a, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x73, 0x22, 0xe1, 0x08, 0x0a, 0x0a, 0x56, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e,
	0x65, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xd0, 0x3e, 0x01, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x53, 0x68, 0x61, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x13, 0x64, 0x61, 0x74, 0x61, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5f, 0x0a,
	0x11, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x10, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f,
	0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x69, 0x6e, 0x12, 0x54, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x40,
	0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x12, 0x49, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x22, 0xd8, 0x01, 0x0a, 0x06,
	0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x42,
	0x03, 0xc8, 0x3e, 0x01, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x72, 0x63, 0x22, 0x71, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x0d,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0xc0, 0x3e, 0x01, 0x52, 0x0c, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x66, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x56,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0xc9, 0x08, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x67,
	0x65, 0x6e, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f,
	0x67, 0x65, 0x6e, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xd0, 0x3e, 0x01, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x68,
	0x61, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x68, 0x61, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x64, 0x61, 0x74, 0x61, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5f, 0x0a, 0x11, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x10, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69,
	0x6e, 0x12, 0x54, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x75, 0x64,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x06, 0x73,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x75,
	0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x22, 0x51, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x5e, 0x0a, 0x1c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73,
	0x22, 0x9c, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x56, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6d, 0x5f, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x6d, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x46, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x6b, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x02, 0x70, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x22, 0xc0, 0x04, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x69, 0x0a, 0x0d, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x44, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x7b, 0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x3f, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x51, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x30, 0x0a,
	0x11, 0x53, 0x79, 0x6e, 0x63, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0xa0, 0x03, 0x0a, 0x1e, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x67, 0x65,
	0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x67,
	0x65, 0x6e, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x72, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x72, 0x63, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x72,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xb3, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46,
	0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x03, 0xc0, 0x3e, 0x01, 0x52,
	0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x76,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDescOnce sync.Once
	file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDescData = file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDesc
)

func file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDescGZIP() []byte {
	file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDescOnce.Do(func() {
		file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDescData = protoimpl.X.CompressGZIP(file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDescData)
	})
	return file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDescData
}

var file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_goTypes = []interface{}{
	(*VtableQueryOptions)(nil),             // 0: sudo.protobuf.platform.vtable.VtableQueryOptions
	(*AdditionInfo)(nil),                   // 1: sudo.protobuf.platform.vtable.AdditionInfo
	(*Column)(nil),                         // 2: sudo.protobuf.platform.vtable.Column
	(*SegmentationHistory)(nil),            // 3: sudo.protobuf.platform.vtable.SegmentationHistory
	(*VtableBase)(nil),                     // 4: sudo.protobuf.platform.vtable.VtableBase
	(*Vtable)(nil),                         // 5: sudo.protobuf.platform.vtable.Vtable
	(*ListVtablesRequest)(nil),             // 6: sudo.protobuf.platform.vtable.ListVtablesRequest
	(*ListVtablesResponse)(nil),            // 7: sudo.protobuf.platform.vtable.ListVtablesResponse
	(*CreateVtableRequest)(nil),            // 8: sudo.protobuf.platform.vtable.CreateVtableRequest
	(*CreateVtableResponse)(nil),           // 9: sudo.protobuf.platform.vtable.CreateVtableResponse
	(*AttachVtableToProjectRequest)(nil),   // 10: sudo.protobuf.platform.vtable.AttachVtableToProjectRequest
	(*DetachVtableToProjectRequest)(nil),   // 11: sudo.protobuf.platform.vtable.DetachVtableToProjectRequest
	(*DeleteVtableRequest)(nil),            // 12: sudo.protobuf.platform.vtable.DeleteVtableRequest
	(*UpdateVtableRequest)(nil),            // 13: sudo.protobuf.platform.vtable.UpdateVtableRequest
	(*UpdateVtableResponse)(nil),           // 14: sudo.protobuf.platform.vtable.UpdateVtableResponse
	(*SyncVtableRequest)(nil),              // 15: sudo.protobuf.platform.vtable.SyncVtableRequest
	(*VtableColumnsVisibilitySetting)(nil), // 16: sudo.protobuf.platform.vtable.VtableColumnsVisibilitySetting
	(*GetVtableRawDataRequest)(nil),        // 17: sudo.protobuf.platform.vtable.GetVtableRawDataRequest
	(*GetVtableRawDataResponse)(nil),       // 18: sudo.protobuf.platform.vtable.GetVtableRawDataResponse
	nil,                                    // 19: sudo.protobuf.platform.vtable.UpdateVtableRequest.ColumnsAliasEntry
	nil,                                    // 20: sudo.protobuf.platform.vtable.UpdateVtableRequest.ColumnsDescriptionEntry
	(enums.VirtualTable_Status)(0),         // 21: sudo.protobuf.enums.VirtualTable.Status
	(enums.VirtualTable_SourceType)(0),     // 22: sudo.protobuf.enums.VirtualTable.SourceType
	(enums.VirtualTable_ShareFiltrate)(0),  // 23: sudo.protobuf.enums.VirtualTable.ShareFiltrate
	(enums.Stage_Type)(0),                  // 24: sudo.protobuf.enums.Stage.Type
	(enums.VirtualTable_Suffix)(0),         // 25: sudo.protobuf.enums.VirtualTable.Suffix
	(*user.User)(nil),                      // 26: sudo.protobuf.platform.user.User
	(*datasource.DataSource)(nil),          // 27: sudo.protobuf.platform.data_source.DataSource
	(*paginator.Paginator)(nil),            // 28: sudo.protobuf.platform.paginator.Paginator
	(*protobuf.SqlColumn)(nil),             // 29: sudo.protobuf.infra_adapter.SqlColumn
}
var file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_depIdxs = []int32{
	21, // 0: sudo.protobuf.platform.vtable.VtableQueryOptions.exclude_status:type_name -> sudo.protobuf.enums.VirtualTable.Status
	22, // 1: sudo.protobuf.platform.vtable.VtableQueryOptions.generated_type:type_name -> sudo.protobuf.enums.VirtualTable.SourceType
	23, // 2: sudo.protobuf.platform.vtable.VtableQueryOptions.column_shared:type_name -> sudo.protobuf.enums.VirtualTable.ShareFiltrate
	24, // 3: sudo.protobuf.platform.vtable.AdditionInfo.stage_type:type_name -> sudo.protobuf.enums.Stage.Type
	3,  // 4: sudo.protobuf.platform.vtable.VtableBase.bucket_partitions:type_name -> sudo.protobuf.platform.vtable.SegmentationHistory
	2,  // 5: sudo.protobuf.platform.vtable.VtableBase.columns:type_name -> sudo.protobuf.platform.vtable.Column
	1,  // 6: sudo.protobuf.platform.vtable.VtableBase.additional_info:type_name -> sudo.protobuf.platform.vtable.AdditionInfo
	25, // 7: sudo.protobuf.platform.vtable.VtableBase.suffix:type_name -> sudo.protobuf.enums.VirtualTable.Suffix
	21, // 8: sudo.protobuf.platform.vtable.VtableBase.status_enum:type_name -> sudo.protobuf.enums.VirtualTable.Status
	4,  // 9: sudo.protobuf.platform.vtable.Vtable.base:type_name -> sudo.protobuf.platform.vtable.VtableBase
	26, // 10: sudo.protobuf.platform.vtable.Vtable.owner_user:type_name -> sudo.protobuf.platform.user.User
	27, // 11: sudo.protobuf.platform.vtable.Vtable.datasrc:type_name -> sudo.protobuf.platform.data_source.DataSource
	0,  // 12: sudo.protobuf.platform.vtable.ListVtablesRequest.query_options:type_name -> sudo.protobuf.platform.vtable.VtableQueryOptions
	5,  // 13: sudo.protobuf.platform.vtable.ListVtablesResponse.data:type_name -> sudo.protobuf.platform.vtable.Vtable
	21, // 14: sudo.protobuf.platform.vtable.CreateVtableRequest.status:type_name -> sudo.protobuf.enums.VirtualTable.Status
	3,  // 15: sudo.protobuf.platform.vtable.CreateVtableRequest.bucket_partitions:type_name -> sudo.protobuf.platform.vtable.SegmentationHistory
	2,  // 16: sudo.protobuf.platform.vtable.CreateVtableRequest.columns:type_name -> sudo.protobuf.platform.vtable.Column
	1,  // 17: sudo.protobuf.platform.vtable.CreateVtableRequest.additional_info:type_name -> sudo.protobuf.platform.vtable.AdditionInfo
	25, // 18: sudo.protobuf.platform.vtable.CreateVtableRequest.suffix:type_name -> sudo.protobuf.enums.VirtualTable.Suffix
	5,  // 19: sudo.protobuf.platform.vtable.CreateVtableResponse.data:type_name -> sudo.protobuf.platform.vtable.Vtable
	19, // 20: sudo.protobuf.platform.vtable.UpdateVtableRequest.columns_alias:type_name -> sudo.protobuf.platform.vtable.UpdateVtableRequest.ColumnsAliasEntry
	20, // 21: sudo.protobuf.platform.vtable.UpdateVtableRequest.columns_description:type_name -> sudo.protobuf.platform.vtable.UpdateVtableRequest.ColumnsDescriptionEntry
	5,  // 22: sudo.protobuf.platform.vtable.UpdateVtableResponse.data:type_name -> sudo.protobuf.platform.vtable.Vtable
	28, // 23: sudo.protobuf.platform.vtable.GetVtableRawDataRequest.pager:type_name -> sudo.protobuf.platform.paginator.Paginator
	29, // 24: sudo.protobuf.platform.vtable.GetVtableRawDataResponse.data:type_name -> sudo.protobuf.infra_adapter.SqlColumn
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_init() }
func file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_init() {
	if File_sudo_protobuf_mpc_virtual_service_platform_vtable_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VtableQueryOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdditionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentationHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VtableBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vtable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVtablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVtablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVtableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVtableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachVtableToProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetachVtableToProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVtableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVtableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVtableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncVtableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VtableColumnsVisibilitySetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVtableRawDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVtableRawDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_goTypes,
		DependencyIndexes: file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_depIdxs,
		MessageInfos:      file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_msgTypes,
	}.Build()
	File_sudo_protobuf_mpc_virtual_service_platform_vtable_proto = out.File
	file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_rawDesc = nil
	file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_goTypes = nil
	file_sudo_protobuf_mpc_virtual_service_platform_vtable_proto_depIdxs = nil
}
