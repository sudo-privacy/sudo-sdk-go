// Copyright 2022 Sudo Technology Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.1
// source: sudo/mpc_virtual_service/platform/pir.proto

package pir

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	enums "github.com/sudo-privacy/sudo-sdk-go/protobuf/basic/protobuf/enums"
	enums1 "github.com/sudo-privacy/sudo-sdk-go/protobuf/basic/protobuf/service/enums"
	_ "github.com/sudo-privacy/sudo-sdk-go/protobuf/basic/protobuf/virtualservice/platformpb/options"
	paginator "github.com/sudo-privacy/sudo-sdk-go/protobuf/basic/protobuf/virtualservice/platformpb/paginator"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PirSingleResponse_Status int32

const (
	PirSingleResponse_UNKNOWN PirSingleResponse_Status = 0
	PirSingleResponse_HIT     PirSingleResponse_Status = 1
	PirSingleResponse_UNHIT   PirSingleResponse_Status = 2
	PirSingleResponse_FAILED  PirSingleResponse_Status = 3
)

// Enum value maps for PirSingleResponse_Status.
var (
	PirSingleResponse_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "HIT",
		2: "UNHIT",
		3: "FAILED",
	}
	PirSingleResponse_Status_value = map[string]int32{
		"UNKNOWN": 0,
		"HIT":     1,
		"UNHIT":   2,
		"FAILED":  3,
	}
)

func (x PirSingleResponse_Status) Enum() *PirSingleResponse_Status {
	p := new(PirSingleResponse_Status)
	*p = x
	return p
}

func (x PirSingleResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PirSingleResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_mpc_virtual_service_platform_pir_proto_enumTypes[0].Descriptor()
}

func (PirSingleResponse_Status) Type() protoreflect.EnumType {
	return &file_sudo_mpc_virtual_service_platform_pir_proto_enumTypes[0]
}

func (x PirSingleResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PirSingleResponse_Status.Descriptor instead.
func (PirSingleResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{36, 0}
}

type UpdateServerDataResponse_Status int32

const (
	UpdateServerDataResponse_UNKNOWN_STATUS UpdateServerDataResponse_Status = 0
	UpdateServerDataResponse_SUCCESS        UpdateServerDataResponse_Status = 1
	UpdateServerDataResponse_FAILED         UpdateServerDataResponse_Status = 2
)

// Enum value maps for UpdateServerDataResponse_Status.
var (
	UpdateServerDataResponse_Status_name = map[int32]string{
		0: "UNKNOWN_STATUS",
		1: "SUCCESS",
		2: "FAILED",
	}
	UpdateServerDataResponse_Status_value = map[string]int32{
		"UNKNOWN_STATUS": 0,
		"SUCCESS":        1,
		"FAILED":         2,
	}
)

func (x UpdateServerDataResponse_Status) Enum() *UpdateServerDataResponse_Status {
	p := new(UpdateServerDataResponse_Status)
	*p = x
	return p
}

func (x UpdateServerDataResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateServerDataResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_mpc_virtual_service_platform_pir_proto_enumTypes[1].Descriptor()
}

func (UpdateServerDataResponse_Status) Type() protoreflect.EnumType {
	return &file_sudo_mpc_virtual_service_platform_pir_proto_enumTypes[1]
}

func (x UpdateServerDataResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateServerDataResponse_Status.Descriptor instead.
func (UpdateServerDataResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{39, 0}
}

type PirServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedTs int64  `protobuf:"varint,2,opt,name=created_ts,json=createdTs,proto3" json:"created_ts,omitempty"`
	UpdatedTs int64  `protobuf:"varint,3,opt,name=updated_ts,json=updatedTs,proto3" json:"updated_ts,omitempty"`
	// unique service id
	ServiceId   uint64 `protobuf:"varint,4,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Name        string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// service status, see status definition for more details
	Status enums.PirService_Status `protobuf:"varint,7,opt,name=status,proto3,enum=sudo.protobuf.enums.PirService_Status" json:"status,omitempty"`
	// the user created this service
	OwnerUserId   uint64 `protobuf:"varint,8,opt,name=owner_user_id,json=ownerUserId,proto3" json:"owner_user_id,omitempty"`
	OwnerUserName string `protobuf:"bytes,9,opt,name=owner_user_name,json=ownerUserName,proto3" json:"owner_user_name,omitempty"`
	Path          string `protobuf:"bytes,10,opt,name=path,proto3" json:"path,omitempty"`
	// given error message if status failed
	Message string `protobuf:"bytes,11,opt,name=message,proto3" json:"message,omitempty"`
	// also known as bucket size, usually range from 10 to 100
	IndiscernibilityDegree uint64 `protobuf:"varint,12,opt,name=indiscernibility_degree,json=indiscernibilityDegree,proto3" json:"indiscernibility_degree,omitempty"`
	// not implemented yet. if false, server encrypt all label columns and know usage_count per request
	SkipEncrypt bool `protobuf:"varint,13,opt,name=skip_encrypt,json=skipEncrypt,proto3" json:"skip_encrypt,omitempty"`
	// columns as search conditions
	KeyColumns []string `protobuf:"bytes,14,rep,name=key_columns,json=keyColumns,proto3" json:"key_columns,omitempty"`
	// columns as search result
	LabelColumns []string `protobuf:"bytes,15,rep,name=label_columns,json=labelColumns,proto3" json:"label_columns,omitempty"`
	// input vtable id
	//
	// Deprecated: Do not use.
	VtableId uint64 `protobuf:"varint,16,opt,name=vtable_id,json=vtableId,proto3" json:"vtable_id,omitempty"`
	// additional information fetched from vtable
	VtableAdditionalInfo *PirServerVtableAdditionalInfo `protobuf:"bytes,17,opt,name=vtable_additional_info,json=vtableAdditionalInfo,proto3" json:"vtable_additional_info,omitempty"`
	// bucket_count = total_count / indiscernibility_degree
	BucketCount uint64 `protobuf:"varint,18,opt,name=bucket_count,json=bucketCount,proto3" json:"bucket_count,omitempty"`
	// deploy progress, range from 0 to 1
	Progress       float32         `protobuf:"fixed32,19,opt,name=progress,proto3" json:"progress,omitempty"`
	OperatorId     uint64          `protobuf:"varint,20,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	Type           enums1.SVCType  `protobuf:"varint,21,opt,name=type,proto3,enum=sudo.protobuf.service.enums.SVCType" json:"type,omitempty"`
	DataMode       enums1.DataMode `protobuf:"varint,22,opt,name=data_mode,json=dataMode,proto3,enum=sudo.protobuf.service.enums.DataMode" json:"data_mode,omitempty"`
	DataModeParams *DataModeParams `protobuf:"bytes,23,opt,name=data_mode_params,json=dataModeParams,proto3" json:"data_mode_params,omitempty"`
	OpHost         string          `protobuf:"bytes,24,opt,name=op_host,json=opHost,proto3" json:"op_host,omitempty"`
	OpPort         uint32          `protobuf:"varint,25,opt,name=op_port,json=opPort,proto3" json:"op_port,omitempty"`
}

func (x *PirServer) Reset() {
	*x = PirServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PirServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PirServer) ProtoMessage() {}

func (x *PirServer) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PirServer.ProtoReflect.Descriptor instead.
func (*PirServer) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{0}
}

func (x *PirServer) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PirServer) GetCreatedTs() int64 {
	if x != nil {
		return x.CreatedTs
	}
	return 0
}

func (x *PirServer) GetUpdatedTs() int64 {
	if x != nil {
		return x.UpdatedTs
	}
	return 0
}

func (x *PirServer) GetServiceId() uint64 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *PirServer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PirServer) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PirServer) GetStatus() enums.PirService_Status {
	if x != nil {
		return x.Status
	}
	return enums.PirService_UNKNOWN_STATUS
}

func (x *PirServer) GetOwnerUserId() uint64 {
	if x != nil {
		return x.OwnerUserId
	}
	return 0
}

func (x *PirServer) GetOwnerUserName() string {
	if x != nil {
		return x.OwnerUserName
	}
	return ""
}

func (x *PirServer) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PirServer) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PirServer) GetIndiscernibilityDegree() uint64 {
	if x != nil {
		return x.IndiscernibilityDegree
	}
	return 0
}

func (x *PirServer) GetSkipEncrypt() bool {
	if x != nil {
		return x.SkipEncrypt
	}
	return false
}

func (x *PirServer) GetKeyColumns() []string {
	if x != nil {
		return x.KeyColumns
	}
	return nil
}

func (x *PirServer) GetLabelColumns() []string {
	if x != nil {
		return x.LabelColumns
	}
	return nil
}

// Deprecated: Do not use.
func (x *PirServer) GetVtableId() uint64 {
	if x != nil {
		return x.VtableId
	}
	return 0
}

func (x *PirServer) GetVtableAdditionalInfo() *PirServerVtableAdditionalInfo {
	if x != nil {
		return x.VtableAdditionalInfo
	}
	return nil
}

func (x *PirServer) GetBucketCount() uint64 {
	if x != nil {
		return x.BucketCount
	}
	return 0
}

func (x *PirServer) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *PirServer) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *PirServer) GetType() enums1.SVCType {
	if x != nil {
		return x.Type
	}
	return enums1.SVCType_UNKNOWN_TYPE
}

func (x *PirServer) GetDataMode() enums1.DataMode {
	if x != nil {
		return x.DataMode
	}
	return enums1.DataMode_UNKNOWN_DATA_MODE
}

func (x *PirServer) GetDataModeParams() *DataModeParams {
	if x != nil {
		return x.DataModeParams
	}
	return nil
}

func (x *PirServer) GetOpHost() string {
	if x != nil {
		return x.OpHost
	}
	return ""
}

func (x *PirServer) GetOpPort() uint32 {
	if x != nil {
		return x.OpPort
	}
	return 0
}

type PirServerModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     uint64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedTs              int64                   `protobuf:"varint,2,opt,name=created_ts,json=createdTs,proto3" json:"created_ts,omitempty"`
	UpdatedTs              int64                   `protobuf:"varint,3,opt,name=updated_ts,json=updatedTs,proto3" json:"updated_ts,omitempty"`
	ServiceId              uint64                  `protobuf:"varint,4,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Name                   string                  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description            string                  `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Status                 enums.PirService_Status `protobuf:"varint,7,opt,name=status,proto3,enum=sudo.protobuf.enums.PirService_Status" json:"status,omitempty"`
	OwnerUserId            uint64                  `protobuf:"varint,8,opt,name=owner_user_id,json=ownerUserId,proto3" json:"owner_user_id,omitempty"`
	OwnerUserName          string                  `protobuf:"bytes,9,opt,name=owner_user_name,json=ownerUserName,proto3" json:"owner_user_name,omitempty"`
	Path                   string                  `protobuf:"bytes,10,opt,name=path,proto3" json:"path,omitempty"`
	Message                string                  `protobuf:"bytes,11,opt,name=message,proto3" json:"message,omitempty"`
	IndiscernibilityDegree uint64                  `protobuf:"varint,12,opt,name=indiscernibility_degree,json=indiscernibilityDegree,proto3" json:"indiscernibility_degree,omitempty"`
	SkipEncrypt            bool                    `protobuf:"varint,13,opt,name=skip_encrypt,json=skipEncrypt,proto3" json:"skip_encrypt,omitempty"`
	KeyColumns             string                  `protobuf:"bytes,14,opt,name=key_columns,json=keyColumns,proto3" json:"key_columns,omitempty"`
	LabelColumns           string                  `protobuf:"bytes,15,opt,name=label_columns,json=labelColumns,proto3" json:"label_columns,omitempty"`
	VtableId               uint64                  `protobuf:"varint,16,opt,name=vtable_id,json=vtableId,proto3" json:"vtable_id,omitempty"`
	BucketCount            uint64                  `protobuf:"varint,18,opt,name=bucket_count,json=bucketCount,proto3" json:"bucket_count,omitempty"`
	Progress               float32                 `protobuf:"fixed32,19,opt,name=progress,proto3" json:"progress,omitempty"`
	OperatorId             uint64                  `protobuf:"varint,20,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	Type                   enums1.SVCType          `protobuf:"varint,21,opt,name=type,proto3,enum=sudo.protobuf.service.enums.SVCType" json:"type,omitempty"`
	DataMode               enums1.DataMode         `protobuf:"varint,22,opt,name=data_mode,json=dataMode,proto3,enum=sudo.protobuf.service.enums.DataMode" json:"data_mode,omitempty"`
	DataModeParams         *DataModeParams         `protobuf:"bytes,23,opt,name=data_mode_params,json=dataModeParams,proto3" json:"data_mode_params,omitempty"`
	OpHost                 string                  `protobuf:"bytes,24,opt,name=op_host,json=opHost,proto3" json:"op_host,omitempty"`
	OpPort                 uint32                  `protobuf:"varint,25,opt,name=op_port,json=opPort,proto3" json:"op_port,omitempty"`
}

func (x *PirServerModel) Reset() {
	*x = PirServerModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PirServerModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PirServerModel) ProtoMessage() {}

func (x *PirServerModel) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PirServerModel.ProtoReflect.Descriptor instead.
func (*PirServerModel) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{1}
}

func (x *PirServerModel) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PirServerModel) GetCreatedTs() int64 {
	if x != nil {
		return x.CreatedTs
	}
	return 0
}

func (x *PirServerModel) GetUpdatedTs() int64 {
	if x != nil {
		return x.UpdatedTs
	}
	return 0
}

func (x *PirServerModel) GetServiceId() uint64 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *PirServerModel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PirServerModel) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PirServerModel) GetStatus() enums.PirService_Status {
	if x != nil {
		return x.Status
	}
	return enums.PirService_UNKNOWN_STATUS
}

func (x *PirServerModel) GetOwnerUserId() uint64 {
	if x != nil {
		return x.OwnerUserId
	}
	return 0
}

func (x *PirServerModel) GetOwnerUserName() string {
	if x != nil {
		return x.OwnerUserName
	}
	return ""
}

func (x *PirServerModel) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PirServerModel) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PirServerModel) GetIndiscernibilityDegree() uint64 {
	if x != nil {
		return x.IndiscernibilityDegree
	}
	return 0
}

func (x *PirServerModel) GetSkipEncrypt() bool {
	if x != nil {
		return x.SkipEncrypt
	}
	return false
}

func (x *PirServerModel) GetKeyColumns() string {
	if x != nil {
		return x.KeyColumns
	}
	return ""
}

func (x *PirServerModel) GetLabelColumns() string {
	if x != nil {
		return x.LabelColumns
	}
	return ""
}

func (x *PirServerModel) GetVtableId() uint64 {
	if x != nil {
		return x.VtableId
	}
	return 0
}

func (x *PirServerModel) GetBucketCount() uint64 {
	if x != nil {
		return x.BucketCount
	}
	return 0
}

func (x *PirServerModel) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *PirServerModel) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *PirServerModel) GetType() enums1.SVCType {
	if x != nil {
		return x.Type
	}
	return enums1.SVCType_UNKNOWN_TYPE
}

func (x *PirServerModel) GetDataMode() enums1.DataMode {
	if x != nil {
		return x.DataMode
	}
	return enums1.DataMode_UNKNOWN_DATA_MODE
}

func (x *PirServerModel) GetDataModeParams() *DataModeParams {
	if x != nil {
		return x.DataModeParams
	}
	return nil
}

func (x *PirServerModel) GetOpHost() string {
	if x != nil {
		return x.OpHost
	}
	return ""
}

func (x *PirServerModel) GetOpPort() uint32 {
	if x != nil {
		return x.OpPort
	}
	return 0
}

type DataModeParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Params:
	//	*DataModeParams_ApiParams
	//	*DataModeParams_MysqlParams
	//	*DataModeParams_VtableParams
	Params isDataModeParams_Params `protobuf_oneof:"params"`
}

func (x *DataModeParams) Reset() {
	*x = DataModeParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataModeParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataModeParams) ProtoMessage() {}

func (x *DataModeParams) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataModeParams.ProtoReflect.Descriptor instead.
func (*DataModeParams) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{2}
}

func (m *DataModeParams) GetParams() isDataModeParams_Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (x *DataModeParams) GetApiParams() *APIModeParams {
	if x, ok := x.GetParams().(*DataModeParams_ApiParams); ok {
		return x.ApiParams
	}
	return nil
}

func (x *DataModeParams) GetMysqlParams() *MysqlModeParams {
	if x, ok := x.GetParams().(*DataModeParams_MysqlParams); ok {
		return x.MysqlParams
	}
	return nil
}

func (x *DataModeParams) GetVtableParams() *VtableModeParams {
	if x, ok := x.GetParams().(*DataModeParams_VtableParams); ok {
		return x.VtableParams
	}
	return nil
}

type isDataModeParams_Params interface {
	isDataModeParams_Params()
}

type DataModeParams_ApiParams struct {
	// apimode
	ApiParams *APIModeParams `protobuf:"bytes,1,opt,name=api_params,json=apiParams,proto3,oneof"`
}

type DataModeParams_MysqlParams struct {
	// mysql mode
	MysqlParams *MysqlModeParams `protobuf:"bytes,2,opt,name=mysql_params,json=mysqlParams,proto3,oneof"` //mysql mode
}

type DataModeParams_VtableParams struct {
	// vtable mode
	VtableParams *VtableModeParams `protobuf:"bytes,3,opt,name=vtable_params,json=vtableParams,proto3,oneof"` // vtable mode
}

func (*DataModeParams_ApiParams) isDataModeParams_Params() {}

func (*DataModeParams_MysqlParams) isDataModeParams_Params() {}

func (*DataModeParams_VtableParams) isDataModeParams_Params() {}

type AuthParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthMethod enums1.AuthMethod `protobuf:"varint,1,opt,name=auth_method,json=authMethod,proto3,enum=sudo.protobuf.service.enums.AuthMethod" json:"auth_method,omitempty"`
	Username   string            `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password   string            `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *AuthParams) Reset() {
	*x = AuthParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthParams) ProtoMessage() {}

func (x *AuthParams) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthParams.ProtoReflect.Descriptor instead.
func (*AuthParams) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{3}
}

func (x *AuthParams) GetAuthMethod() enums1.AuthMethod {
	if x != nil {
		return x.AuthMethod
	}
	return enums1.AuthMethod_UNKNOWN_AUTH_METHOD
}

func (x *AuthParams) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AuthParams) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type APIModeParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// example: http://xxx.com:8080
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// example: /api/xxx
	Path       string      `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	AuthParams *AuthParams `protobuf:"bytes,4,opt,name=auth_params,json=authParams,proto3" json:"auth_params,omitempty"`
}

func (x *APIModeParams) Reset() {
	*x = APIModeParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIModeParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIModeParams) ProtoMessage() {}

func (x *APIModeParams) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIModeParams.ProtoReflect.Descriptor instead.
func (*APIModeParams) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{4}
}

func (x *APIModeParams) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *APIModeParams) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *APIModeParams) GetAuthParams() *AuthParams {
	if x != nil {
		return x.AuthParams
	}
	return nil
}

type MysqlModeParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginData string `protobuf:"bytes,1,opt,name=origin_data,json=originData,proto3" json:"origin_data,omitempty"`
	OutputData string `protobuf:"bytes,2,opt,name=output_data,json=outputData,proto3" json:"output_data,omitempty"`
}

func (x *MysqlModeParams) Reset() {
	*x = MysqlModeParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MysqlModeParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlModeParams) ProtoMessage() {}

func (x *MysqlModeParams) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlModeParams.ProtoReflect.Descriptor instead.
func (*MysqlModeParams) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{5}
}

func (x *MysqlModeParams) GetOriginData() string {
	if x != nil {
		return x.OriginData
	}
	return ""
}

func (x *MysqlModeParams) GetOutputData() string {
	if x != nil {
		return x.OutputData
	}
	return ""
}

type VtableModeParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VtableId uint64 `protobuf:"varint,1,opt,name=vtable_id,json=vtableId,proto3" json:"vtable_id,omitempty"`
}

func (x *VtableModeParams) Reset() {
	*x = VtableModeParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VtableModeParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VtableModeParams) ProtoMessage() {}

func (x *VtableModeParams) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VtableModeParams.ProtoReflect.Descriptor instead.
func (*VtableModeParams) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{6}
}

func (x *VtableModeParams) GetVtableId() uint64 {
	if x != nil {
		return x.VtableId
	}
	return 0
}

type CreateServerServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PirServer *PirServer `protobuf:"bytes,1,opt,name=pir_server,json=pirServer,proto3" json:"pir_server,omitempty"`
}

func (x *CreateServerServiceRequest) Reset() {
	*x = CreateServerServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServerServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServerServiceRequest) ProtoMessage() {}

func (x *CreateServerServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServerServiceRequest.ProtoReflect.Descriptor instead.
func (*CreateServerServiceRequest) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{7}
}

func (x *CreateServerServiceRequest) GetPirServer() *PirServer {
	if x != nil {
		return x.PirServer
	}
	return nil
}

type CreateServerServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PirServerModel `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateServerServiceResponse) Reset() {
	*x = CreateServerServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServerServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServerServiceResponse) ProtoMessage() {}

func (x *CreateServerServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServerServiceResponse.ProtoReflect.Descriptor instead.
func (*CreateServerServiceResponse) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{8}
}

func (x *CreateServerServiceResponse) GetData() *PirServerModel {
	if x != nil {
		return x.Data
	}
	return nil
}

type ServerQueryOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paginator *paginator.Paginator    `protobuf:"bytes,1,opt,name=paginator,proto3" json:"paginator,omitempty"`
	Id        uint64                  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	ServiceId uint64                  `protobuf:"varint,3,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Status    enums.PirService_Status `protobuf:"varint,4,opt,name=status,proto3,enum=sudo.protobuf.enums.PirService_Status" json:"status,omitempty"`
}

func (x *ServerQueryOption) Reset() {
	*x = ServerQueryOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerQueryOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerQueryOption) ProtoMessage() {}

func (x *ServerQueryOption) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerQueryOption.ProtoReflect.Descriptor instead.
func (*ServerQueryOption) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{9}
}

func (x *ServerQueryOption) GetPaginator() *paginator.Paginator {
	if x != nil {
		return x.Paginator
	}
	return nil
}

func (x *ServerQueryOption) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ServerQueryOption) GetServiceId() uint64 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *ServerQueryOption) GetStatus() enums.PirService_Status {
	if x != nil {
		return x.Status
	}
	return enums.PirService_UNKNOWN_STATUS
}

type GetServerServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *ServerQueryOption `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *GetServerServicesRequest) Reset() {
	*x = GetServerServicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerServicesRequest) ProtoMessage() {}

func (x *GetServerServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerServicesRequest.ProtoReflect.Descriptor instead.
func (*GetServerServicesRequest) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{10}
}

func (x *GetServerServicesRequest) GetQuery() *ServerQueryOption {
	if x != nil {
		return x.Query
	}
	return nil
}

type GetServerServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64        `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*PirServer `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetServerServicesResponse) Reset() {
	*x = GetServerServicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerServicesResponse) ProtoMessage() {}

func (x *GetServerServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerServicesResponse.ProtoReflect.Descriptor instead.
func (*GetServerServicesResponse) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{11}
}

func (x *GetServerServicesResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetServerServicesResponse) GetData() []*PirServer {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateServerServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PirServer    *PirServer `protobuf:"bytes,1,opt,name=pir_server,json=pirServer,proto3" json:"pir_server,omitempty"`
	ServiceIdStr string     `protobuf:"bytes,2,opt,name=service_id_str,json=serviceIdStr,proto3" json:"service_id_str,omitempty"`
}

func (x *UpdateServerServiceRequest) Reset() {
	*x = UpdateServerServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerServiceRequest) ProtoMessage() {}

func (x *UpdateServerServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerServiceRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerServiceRequest) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateServerServiceRequest) GetPirServer() *PirServer {
	if x != nil {
		return x.PirServer
	}
	return nil
}

func (x *UpdateServerServiceRequest) GetServiceIdStr() string {
	if x != nil {
		return x.ServiceIdStr
	}
	return ""
}

type ServerServiceTakeActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceIdStr string `protobuf:"bytes,1,opt,name=service_id_str,json=serviceIdStr,proto3" json:"service_id_str,omitempty"`
	// PirService_Action string
	Action string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *ServerServiceTakeActionRequest) Reset() {
	*x = ServerServiceTakeActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerServiceTakeActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerServiceTakeActionRequest) ProtoMessage() {}

func (x *ServerServiceTakeActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerServiceTakeActionRequest.ProtoReflect.Descriptor instead.
func (*ServerServiceTakeActionRequest) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{13}
}

func (x *ServerServiceTakeActionRequest) GetServiceIdStr() string {
	if x != nil {
		return x.ServiceIdStr
	}
	return ""
}

func (x *ServerServiceTakeActionRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type ServerServiceTakeActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PirServer `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ServerServiceTakeActionResponse) Reset() {
	*x = ServerServiceTakeActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerServiceTakeActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerServiceTakeActionResponse) ProtoMessage() {}

func (x *ServerServiceTakeActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerServiceTakeActionResponse.ProtoReflect.Descriptor instead.
func (*ServerServiceTakeActionResponse) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{14}
}

func (x *ServerServiceTakeActionResponse) GetData() *PirServer {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteServerServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// replaced by id
	//
	// Deprecated: Do not use.
	ServiceIdStr string `protobuf:"bytes,1,opt,name=service_id_str,json=serviceIdStr,proto3" json:"service_id_str,omitempty"`
	Id           uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteServerServiceRequest) Reset() {
	*x = DeleteServerServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServerServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServerServiceRequest) ProtoMessage() {}

func (x *DeleteServerServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServerServiceRequest.ProtoReflect.Descriptor instead.
func (*DeleteServerServiceRequest) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{15}
}

// Deprecated: Do not use.
func (x *DeleteServerServiceRequest) GetServiceIdStr() string {
	if x != nil {
		return x.ServiceIdStr
	}
	return ""
}

func (x *DeleteServerServiceRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type PirClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     uint64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedTs              int64                   `protobuf:"varint,2,opt,name=created_ts,json=createdTs,proto3" json:"created_ts,omitempty"`
	UpdatedTs              uint64                  `protobuf:"varint,3,opt,name=updated_ts,json=updatedTs,proto3" json:"updated_ts,omitempty"`
	ServiceId              uint64                  `protobuf:"varint,4,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Name                   string                  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description            string                  `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Status                 enums.PirService_Status `protobuf:"varint,7,opt,name=status,proto3,enum=sudo.protobuf.enums.PirService_Status" json:"status,omitempty"`
	OwnerUserId            uint64                  `protobuf:"varint,8,opt,name=owner_user_id,json=ownerUserId,proto3" json:"owner_user_id,omitempty"`
	OwnerUserName          string                  `protobuf:"bytes,9,opt,name=owner_user_name,json=ownerUserName,proto3" json:"owner_user_name,omitempty"`
	Path                   string                  `protobuf:"bytes,10,opt,name=path,proto3" json:"path,omitempty"`
	Token                  string                  `protobuf:"bytes,11,opt,name=token,proto3" json:"token,omitempty"`
	Message                string                  `protobuf:"bytes,12,opt,name=message,proto3" json:"message,omitempty"`
	ServerPath             string                  `protobuf:"bytes,13,opt,name=server_path,json=serverPath,proto3" json:"server_path,omitempty"`
	ServerPartyId          string                  `protobuf:"bytes,14,opt,name=server_party_id,json=serverPartyId,proto3" json:"server_party_id,omitempty"`
	IndiscernibilityDegree uint64                  `protobuf:"varint,15,opt,name=indiscernibility_degree,json=indiscernibilityDegree,proto3" json:"indiscernibility_degree,omitempty"`
	KeyColumns             []string                `protobuf:"bytes,16,rep,name=key_columns,json=keyColumns,proto3" json:"key_columns,omitempty"`
	LabelColumns           []string                `protobuf:"bytes,17,rep,name=label_columns,json=labelColumns,proto3" json:"label_columns,omitempty"`
	Progress               float32                 `protobuf:"fixed32,18,opt,name=progress,proto3" json:"progress,omitempty"`
	OperatorId             uint64                  `protobuf:"varint,19,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// type :f3s or pir
	Type           enums1.SVCType  `protobuf:"varint,20,opt,name=type,proto3,enum=sudo.protobuf.service.enums.SVCType" json:"type,omitempty"`
	DataMode       enums1.DataMode `protobuf:"varint,21,opt,name=data_mode,json=dataMode,proto3,enum=sudo.protobuf.service.enums.DataMode" json:"data_mode,omitempty"`
	DataModeParams *DataModeParams `protobuf:"bytes,22,opt,name=data_mode_params,json=dataModeParams,proto3" json:"data_mode_params,omitempty"`
	// true 代表做多次psi，false 代表只做一次psi，仅对三要素有效,默认为false
	Factor3SDetail bool   `protobuf:"varint,23,opt,name=factor3s_detail,json=factor3sDetail,proto3" json:"factor3s_detail,omitempty"`
	ServerOpHost   string `protobuf:"bytes,24,opt,name=server_op_host,json=serverOpHost,proto3" json:"server_op_host,omitempty"`
	ServerOpPort   uint32 `protobuf:"varint,25,opt,name=server_op_port,json=serverOpPort,proto3" json:"server_op_port,omitempty"`
}

func (x *PirClient) Reset() {
	*x = PirClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PirClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PirClient) ProtoMessage() {}

func (x *PirClient) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PirClient.ProtoReflect.Descriptor instead.
func (*PirClient) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{16}
}

func (x *PirClient) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PirClient) GetCreatedTs() int64 {
	if x != nil {
		return x.CreatedTs
	}
	return 0
}

func (x *PirClient) GetUpdatedTs() uint64 {
	if x != nil {
		return x.UpdatedTs
	}
	return 0
}

func (x *PirClient) GetServiceId() uint64 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *PirClient) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PirClient) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PirClient) GetStatus() enums.PirService_Status {
	if x != nil {
		return x.Status
	}
	return enums.PirService_UNKNOWN_STATUS
}

func (x *PirClient) GetOwnerUserId() uint64 {
	if x != nil {
		return x.OwnerUserId
	}
	return 0
}

func (x *PirClient) GetOwnerUserName() string {
	if x != nil {
		return x.OwnerUserName
	}
	return ""
}

func (x *PirClient) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PirClient) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *PirClient) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PirClient) GetServerPath() string {
	if x != nil {
		return x.ServerPath
	}
	return ""
}

func (x *PirClient) GetServerPartyId() string {
	if x != nil {
		return x.ServerPartyId
	}
	return ""
}

func (x *PirClient) GetIndiscernibilityDegree() uint64 {
	if x != nil {
		return x.IndiscernibilityDegree
	}
	return 0
}

func (x *PirClient) GetKeyColumns() []string {
	if x != nil {
		return x.KeyColumns
	}
	return nil
}

func (x *PirClient) GetLabelColumns() []string {
	if x != nil {
		return x.LabelColumns
	}
	return nil
}

func (x *PirClient) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *PirClient) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *PirClient) GetType() enums1.SVCType {
	if x != nil {
		return x.Type
	}
	return enums1.SVCType_UNKNOWN_TYPE
}

func (x *PirClient) GetDataMode() enums1.DataMode {
	if x != nil {
		return x.DataMode
	}
	return enums1.DataMode_UNKNOWN_DATA_MODE
}

func (x *PirClient) GetDataModeParams() *DataModeParams {
	if x != nil {
		return x.DataModeParams
	}
	return nil
}

func (x *PirClient) GetFactor3SDetail() bool {
	if x != nil {
		return x.Factor3SDetail
	}
	return false
}

func (x *PirClient) GetServerOpHost() string {
	if x != nil {
		return x.ServerOpHost
	}
	return ""
}

func (x *PirClient) GetServerOpPort() uint32 {
	if x != nil {
		return x.ServerOpPort
	}
	return 0
}

type PirClientModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     uint64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedTs              int64                   `protobuf:"varint,2,opt,name=created_ts,json=createdTs,proto3" json:"created_ts,omitempty"`
	UpdatedTs              uint64                  `protobuf:"varint,3,opt,name=updated_ts,json=updatedTs,proto3" json:"updated_ts,omitempty"`
	ServiceId              uint64                  `protobuf:"varint,4,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Name                   string                  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description            string                  `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Status                 enums.PirService_Status `protobuf:"varint,7,opt,name=status,proto3,enum=sudo.protobuf.enums.PirService_Status" json:"status,omitempty"`
	OwnerUserId            uint64                  `protobuf:"varint,8,opt,name=owner_user_id,json=ownerUserId,proto3" json:"owner_user_id,omitempty"`
	OwnerUserName          string                  `protobuf:"bytes,9,opt,name=owner_user_name,json=ownerUserName,proto3" json:"owner_user_name,omitempty"`
	Path                   string                  `protobuf:"bytes,10,opt,name=path,proto3" json:"path,omitempty"`
	Token                  string                  `protobuf:"bytes,11,opt,name=token,proto3" json:"token,omitempty"`
	Message                string                  `protobuf:"bytes,12,opt,name=message,proto3" json:"message,omitempty"`
	ServerPath             string                  `protobuf:"bytes,13,opt,name=server_path,json=serverPath,proto3" json:"server_path,omitempty"`
	ServerPartyId          string                  `protobuf:"bytes,14,opt,name=server_party_id,json=serverPartyId,proto3" json:"server_party_id,omitempty"`
	IndiscernibilityDegree uint64                  `protobuf:"varint,15,opt,name=indiscernibility_degree,json=indiscernibilityDegree,proto3" json:"indiscernibility_degree,omitempty"`
	KeyColumns             string                  `protobuf:"bytes,16,opt,name=key_columns,json=keyColumns,proto3" json:"key_columns,omitempty"`
	LabelColumns           string                  `protobuf:"bytes,17,opt,name=label_columns,json=labelColumns,proto3" json:"label_columns,omitempty"`
	Progress               float32                 `protobuf:"fixed32,18,opt,name=progress,proto3" json:"progress,omitempty"`
	OperatorId             uint64                  `protobuf:"varint,19,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// type :f3s or pir
	Type           enums1.SVCType  `protobuf:"varint,20,opt,name=type,proto3,enum=sudo.protobuf.service.enums.SVCType" json:"type,omitempty"`
	DataMode       enums1.DataMode `protobuf:"varint,21,opt,name=data_mode,json=dataMode,proto3,enum=sudo.protobuf.service.enums.DataMode" json:"data_mode,omitempty"`
	DataModeParams *DataModeParams `protobuf:"bytes,22,opt,name=data_mode_params,json=dataModeParams,proto3" json:"data_mode_params,omitempty"`
	// true 代表做多次psi，false 代表只做一次psi，仅对三要素有效,默认为false
	Factor3SDetail bool   `protobuf:"varint,23,opt,name=factor3s_detail,json=factor3sDetail,proto3" json:"factor3s_detail,omitempty"`
	ServerOpHost   string `protobuf:"bytes,24,opt,name=server_op_host,json=serverOpHost,proto3" json:"server_op_host,omitempty"`
	ServerOpPort   uint32 `protobuf:"varint,25,opt,name=server_op_port,json=serverOpPort,proto3" json:"server_op_port,omitempty"`
}

func (x *PirClientModel) Reset() {
	*x = PirClientModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PirClientModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PirClientModel) ProtoMessage() {}

func (x *PirClientModel) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PirClientModel.ProtoReflect.Descriptor instead.
func (*PirClientModel) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{17}
}

func (x *PirClientModel) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PirClientModel) GetCreatedTs() int64 {
	if x != nil {
		return x.CreatedTs
	}
	return 0
}

func (x *PirClientModel) GetUpdatedTs() uint64 {
	if x != nil {
		return x.UpdatedTs
	}
	return 0
}

func (x *PirClientModel) GetServiceId() uint64 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *PirClientModel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PirClientModel) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PirClientModel) GetStatus() enums.PirService_Status {
	if x != nil {
		return x.Status
	}
	return enums.PirService_UNKNOWN_STATUS
}

func (x *PirClientModel) GetOwnerUserId() uint64 {
	if x != nil {
		return x.OwnerUserId
	}
	return 0
}

func (x *PirClientModel) GetOwnerUserName() string {
	if x != nil {
		return x.OwnerUserName
	}
	return ""
}

func (x *PirClientModel) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PirClientModel) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *PirClientModel) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PirClientModel) GetServerPath() string {
	if x != nil {
		return x.ServerPath
	}
	return ""
}

func (x *PirClientModel) GetServerPartyId() string {
	if x != nil {
		return x.ServerPartyId
	}
	return ""
}

func (x *PirClientModel) GetIndiscernibilityDegree() uint64 {
	if x != nil {
		return x.IndiscernibilityDegree
	}
	return 0
}

func (x *PirClientModel) GetKeyColumns() string {
	if x != nil {
		return x.KeyColumns
	}
	return ""
}

func (x *PirClientModel) GetLabelColumns() string {
	if x != nil {
		return x.LabelColumns
	}
	return ""
}

func (x *PirClientModel) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *PirClientModel) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *PirClientModel) GetType() enums1.SVCType {
	if x != nil {
		return x.Type
	}
	return enums1.SVCType_UNKNOWN_TYPE
}

func (x *PirClientModel) GetDataMode() enums1.DataMode {
	if x != nil {
		return x.DataMode
	}
	return enums1.DataMode_UNKNOWN_DATA_MODE
}

func (x *PirClientModel) GetDataModeParams() *DataModeParams {
	if x != nil {
		return x.DataModeParams
	}
	return nil
}

func (x *PirClientModel) GetFactor3SDetail() bool {
	if x != nil {
		return x.Factor3SDetail
	}
	return false
}

func (x *PirClientModel) GetServerOpHost() string {
	if x != nil {
		return x.ServerOpHost
	}
	return ""
}

func (x *PirClientModel) GetServerOpPort() uint32 {
	if x != nil {
		return x.ServerOpPort
	}
	return 0
}

type CreatePirClientServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PirClient    *PirClient `protobuf:"bytes,1,opt,name=pir_client,json=pirClient,proto3" json:"pir_client,omitempty"`
	ServiceIdStr string     `protobuf:"bytes,2,opt,name=service_id_str,json=serviceIdStr,proto3" json:"service_id_str,omitempty"`
}

func (x *CreatePirClientServiceRequest) Reset() {
	*x = CreatePirClientServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePirClientServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePirClientServiceRequest) ProtoMessage() {}

func (x *CreatePirClientServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePirClientServiceRequest.ProtoReflect.Descriptor instead.
func (*CreatePirClientServiceRequest) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{18}
}

func (x *CreatePirClientServiceRequest) GetPirClient() *PirClient {
	if x != nil {
		return x.PirClient
	}
	return nil
}

func (x *CreatePirClientServiceRequest) GetServiceIdStr() string {
	if x != nil {
		return x.ServiceIdStr
	}
	return ""
}

type CreatePirClientServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PirClientModel `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreatePirClientServiceResponse) Reset() {
	*x = CreatePirClientServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePirClientServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePirClientServiceResponse) ProtoMessage() {}

func (x *CreatePirClientServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePirClientServiceResponse.ProtoReflect.Descriptor instead.
func (*CreatePirClientServiceResponse) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{19}
}

func (x *CreatePirClientServiceResponse) GetData() *PirClientModel {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdatePirClientServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PirClient *PirClient `protobuf:"bytes,1,opt,name=pir_client,json=pirClient,proto3" json:"pir_client,omitempty"`
	// replaced by PirClient.ID
	//
	// Deprecated: Do not use.
	ServiceIdStr string `protobuf:"bytes,2,opt,name=service_id_str,json=serviceIdStr,proto3" json:"service_id_str,omitempty"`
	// replaced by PirClient.ID
	//
	// Deprecated: Do not use.
	OldToken string `protobuf:"bytes,3,opt,name=old_token,json=oldToken,proto3" json:"old_token,omitempty"`
}

func (x *UpdatePirClientServiceRequest) Reset() {
	*x = UpdatePirClientServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePirClientServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePirClientServiceRequest) ProtoMessage() {}

func (x *UpdatePirClientServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePirClientServiceRequest.ProtoReflect.Descriptor instead.
func (*UpdatePirClientServiceRequest) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{20}
}

func (x *UpdatePirClientServiceRequest) GetPirClient() *PirClient {
	if x != nil {
		return x.PirClient
	}
	return nil
}

// Deprecated: Do not use.
func (x *UpdatePirClientServiceRequest) GetServiceIdStr() string {
	if x != nil {
		return x.ServiceIdStr
	}
	return ""
}

// Deprecated: Do not use.
func (x *UpdatePirClientServiceRequest) GetOldToken() string {
	if x != nil {
		return x.OldToken
	}
	return ""
}

type ClientQueryOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paginator     *paginator.Paginator      `protobuf:"bytes,1,opt,name=paginator,proto3" json:"paginator,omitempty"`
	Id            uint64                    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	ServiceId     uint64                    `protobuf:"varint,3,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Status        enums.PirService_Status   `protobuf:"varint,4,opt,name=status,proto3,enum=sudo.protobuf.enums.PirService_Status" json:"status,omitempty"`
	StatusIn      []enums.PirService_Status `protobuf:"varint,5,rep,packed,name=status_in,json=statusIn,proto3,enum=sudo.protobuf.enums.PirService_Status" json:"status_in,omitempty"`
	ServerPartyId string                    `protobuf:"bytes,6,opt,name=server_party_id,json=serverPartyId,proto3" json:"server_party_id,omitempty"`
	Path          string                    `protobuf:"bytes,7,opt,name=path,proto3" json:"path,omitempty"`
	Token         string                    `protobuf:"bytes,8,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ClientQueryOption) Reset() {
	*x = ClientQueryOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientQueryOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientQueryOption) ProtoMessage() {}

func (x *ClientQueryOption) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientQueryOption.ProtoReflect.Descriptor instead.
func (*ClientQueryOption) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{21}
}

func (x *ClientQueryOption) GetPaginator() *paginator.Paginator {
	if x != nil {
		return x.Paginator
	}
	return nil
}

func (x *ClientQueryOption) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClientQueryOption) GetServiceId() uint64 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *ClientQueryOption) GetStatus() enums.PirService_Status {
	if x != nil {
		return x.Status
	}
	return enums.PirService_UNKNOWN_STATUS
}

func (x *ClientQueryOption) GetStatusIn() []enums.PirService_Status {
	if x != nil {
		return x.StatusIn
	}
	return nil
}

func (x *ClientQueryOption) GetServerPartyId() string {
	if x != nil {
		return x.ServerPartyId
	}
	return ""
}

func (x *ClientQueryOption) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ClientQueryOption) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetPirClientServicesRequst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *ClientQueryOption `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *GetPirClientServicesRequst) Reset() {
	*x = GetPirClientServicesRequst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPirClientServicesRequst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPirClientServicesRequst) ProtoMessage() {}

func (x *GetPirClientServicesRequst) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPirClientServicesRequst.ProtoReflect.Descriptor instead.
func (*GetPirClientServicesRequst) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{22}
}

func (x *GetPirClientServicesRequst) GetQuery() *ClientQueryOption {
	if x != nil {
		return x.Query
	}
	return nil
}

type GetPirClientServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*PirClient `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int64        `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetPirClientServicesResponse) Reset() {
	*x = GetPirClientServicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPirClientServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPirClientServicesResponse) ProtoMessage() {}

func (x *GetPirClientServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPirClientServicesResponse.ProtoReflect.Descriptor instead.
func (*GetPirClientServicesResponse) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{23}
}

func (x *GetPirClientServicesResponse) GetData() []*PirClient {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetPirClientServicesResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DeleteClientServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// replaced by id
	//
	// Deprecated: Do not use.
	ServiceIdStr string `protobuf:"bytes,1,opt,name=service_id_str,json=serviceIdStr,proto3" json:"service_id_str,omitempty"`
	// replaced by id
	//
	// Deprecated: Do not use.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Id    uint64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteClientServiceRequest) Reset() {
	*x = DeleteClientServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClientServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClientServiceRequest) ProtoMessage() {}

func (x *DeleteClientServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClientServiceRequest.ProtoReflect.Descriptor instead.
func (*DeleteClientServiceRequest) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{24}
}

// Deprecated: Do not use.
func (x *DeleteClientServiceRequest) GetServiceIdStr() string {
	if x != nil {
		return x.ServiceIdStr
	}
	return ""
}

// Deprecated: Do not use.
func (x *DeleteClientServiceRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DeleteClientServiceRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ClientServiceTakeActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceIdStr string `protobuf:"bytes,1,opt,name=service_id_str,json=serviceIdStr,proto3" json:"service_id_str,omitempty"`
	// PirService_Action string
	Action string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Token  string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ClientServiceTakeActionRequest) Reset() {
	*x = ClientServiceTakeActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientServiceTakeActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientServiceTakeActionRequest) ProtoMessage() {}

func (x *ClientServiceTakeActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientServiceTakeActionRequest.ProtoReflect.Descriptor instead.
func (*ClientServiceTakeActionRequest) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{25}
}

func (x *ClientServiceTakeActionRequest) GetServiceIdStr() string {
	if x != nil {
		return x.ServiceIdStr
	}
	return ""
}

func (x *ClientServiceTakeActionRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ClientServiceTakeActionRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ClientServiceTakeActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PirClient `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ClientServiceTakeActionResponse) Reset() {
	*x = ClientServiceTakeActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientServiceTakeActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientServiceTakeActionResponse) ProtoMessage() {}

func (x *ClientServiceTakeActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientServiceTakeActionResponse.ProtoReflect.Descriptor instead.
func (*ClientServiceTakeActionResponse) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{26}
}

func (x *ClientServiceTakeActionResponse) GetData() *PirClient {
	if x != nil {
		return x.Data
	}
	return nil
}

type ServerUsageQueryOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paginator     *paginator.Paginator `protobuf:"bytes,1,opt,name=paginator,proto3" json:"paginator,omitempty"`
	ServiceIdStr  string               `protobuf:"bytes,3,opt,name=service_id_str,json=serviceIdStr,proto3" json:"service_id_str,omitempty"`
	ClientPartyId string               `protobuf:"bytes,6,opt,name=client_party_id,json=clientPartyId,proto3" json:"client_party_id,omitempty"`
	Token         string               `protobuf:"bytes,8,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ServerUsageQueryOptions) Reset() {
	*x = ServerUsageQueryOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerUsageQueryOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerUsageQueryOptions) ProtoMessage() {}

func (x *ServerUsageQueryOptions) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerUsageQueryOptions.ProtoReflect.Descriptor instead.
func (*ServerUsageQueryOptions) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{27}
}

func (x *ServerUsageQueryOptions) GetPaginator() *paginator.Paginator {
	if x != nil {
		return x.Paginator
	}
	return nil
}

func (x *ServerUsageQueryOptions) GetServiceIdStr() string {
	if x != nil {
		return x.ServiceIdStr
	}
	return ""
}

func (x *ServerUsageQueryOptions) GetClientPartyId() string {
	if x != nil {
		return x.ClientPartyId
	}
	return ""
}

func (x *ServerUsageQueryOptions) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetServerUsagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *ServerUsageQueryOptions `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *GetServerUsagesRequest) Reset() {
	*x = GetServerUsagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerUsagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerUsagesRequest) ProtoMessage() {}

func (x *GetServerUsagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerUsagesRequest.ProtoReflect.Descriptor instead.
func (*GetServerUsagesRequest) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{28}
}

func (x *GetServerUsagesRequest) GetQuery() *ServerUsageQueryOptions {
	if x != nil {
		return x.Query
	}
	return nil
}

type ServerUsageModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId     uint64 `protobuf:"varint,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	ClientPartyId string `protobuf:"bytes,2,opt,name=client_party_id,json=clientPartyId,proto3" json:"client_party_id,omitempty"`
	RequestId     string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	RequestCount  uint64 `protobuf:"varint,4,opt,name=request_count,json=requestCount,proto3" json:"request_count,omitempty"`
	UsageCount    uint64 `protobuf:"varint,5,opt,name=usage_count,json=usageCount,proto3" json:"usage_count,omitempty"`
	Token         string `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty"`
	Succeeded     bool   `protobuf:"varint,7,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	CreatedTs     int64  `protobuf:"varint,8,opt,name=created_ts,json=createdTs,proto3" json:"created_ts,omitempty"`
}

func (x *ServerUsageModel) Reset() {
	*x = ServerUsageModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerUsageModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerUsageModel) ProtoMessage() {}

func (x *ServerUsageModel) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerUsageModel.ProtoReflect.Descriptor instead.
func (*ServerUsageModel) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{29}
}

func (x *ServerUsageModel) GetServiceId() uint64 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *ServerUsageModel) GetClientPartyId() string {
	if x != nil {
		return x.ClientPartyId
	}
	return ""
}

func (x *ServerUsageModel) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ServerUsageModel) GetRequestCount() uint64 {
	if x != nil {
		return x.RequestCount
	}
	return 0
}

func (x *ServerUsageModel) GetUsageCount() uint64 {
	if x != nil {
		return x.UsageCount
	}
	return 0
}

func (x *ServerUsageModel) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ServerUsageModel) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *ServerUsageModel) GetCreatedTs() int64 {
	if x != nil {
		return x.CreatedTs
	}
	return 0
}

type GetServerUsagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*ServerUsageModel `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int64               `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetServerUsagesResponse) Reset() {
	*x = GetServerUsagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerUsagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerUsagesResponse) ProtoMessage() {}

func (x *GetServerUsagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerUsagesResponse.ProtoReflect.Descriptor instead.
func (*GetServerUsagesResponse) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{30}
}

func (x *GetServerUsagesResponse) GetData() []*ServerUsageModel {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetServerUsagesResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ClientUsageQueryOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paginator    *paginator.Paginator `protobuf:"bytes,1,opt,name=paginator,proto3" json:"paginator,omitempty"`
	ServiceIdStr string               `protobuf:"bytes,3,opt,name=service_id_str,json=serviceIdStr,proto3" json:"service_id_str,omitempty"`
	Token        string               `protobuf:"bytes,8,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ClientUsageQueryOptions) Reset() {
	*x = ClientUsageQueryOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientUsageQueryOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientUsageQueryOptions) ProtoMessage() {}

func (x *ClientUsageQueryOptions) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientUsageQueryOptions.ProtoReflect.Descriptor instead.
func (*ClientUsageQueryOptions) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{31}
}

func (x *ClientUsageQueryOptions) GetPaginator() *paginator.Paginator {
	if x != nil {
		return x.Paginator
	}
	return nil
}

func (x *ClientUsageQueryOptions) GetServiceIdStr() string {
	if x != nil {
		return x.ServiceIdStr
	}
	return ""
}

func (x *ClientUsageQueryOptions) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetClientUsagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *ClientUsageQueryOptions `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *GetClientUsagesRequest) Reset() {
	*x = GetClientUsagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClientUsagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientUsagesRequest) ProtoMessage() {}

func (x *GetClientUsagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientUsagesRequest.ProtoReflect.Descriptor instead.
func (*GetClientUsagesRequest) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{32}
}

func (x *GetClientUsagesRequest) GetQuery() *ClientUsageQueryOptions {
	if x != nil {
		return x.Query
	}
	return nil
}

type ClientUsageModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId    uint64 `protobuf:"varint,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	RequestId    string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	RequestCount uint64 `protobuf:"varint,3,opt,name=request_count,json=requestCount,proto3" json:"request_count,omitempty"`
	UsageCount   uint64 `protobuf:"varint,4,opt,name=usage_count,json=usageCount,proto3" json:"usage_count,omitempty"`
	ApiRequest   string `protobuf:"bytes,5,opt,name=api_request,json=apiRequest,proto3" json:"api_request,omitempty"`
	ApiResponse  string `protobuf:"bytes,6,opt,name=api_response,json=apiResponse,proto3" json:"api_response,omitempty"`
	Succeeded    bool   `protobuf:"varint,7,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Token        string `protobuf:"bytes,8,opt,name=token,proto3" json:"token,omitempty"`
	CreatedTs    int64  `protobuf:"varint,9,opt,name=created_ts,json=createdTs,proto3" json:"created_ts,omitempty"`
}

func (x *ClientUsageModel) Reset() {
	*x = ClientUsageModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientUsageModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientUsageModel) ProtoMessage() {}

func (x *ClientUsageModel) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientUsageModel.ProtoReflect.Descriptor instead.
func (*ClientUsageModel) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{33}
}

func (x *ClientUsageModel) GetServiceId() uint64 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *ClientUsageModel) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ClientUsageModel) GetRequestCount() uint64 {
	if x != nil {
		return x.RequestCount
	}
	return 0
}

func (x *ClientUsageModel) GetUsageCount() uint64 {
	if x != nil {
		return x.UsageCount
	}
	return 0
}

func (x *ClientUsageModel) GetApiRequest() string {
	if x != nil {
		return x.ApiRequest
	}
	return ""
}

func (x *ClientUsageModel) GetApiResponse() string {
	if x != nil {
		return x.ApiResponse
	}
	return ""
}

func (x *ClientUsageModel) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *ClientUsageModel) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ClientUsageModel) GetCreatedTs() int64 {
	if x != nil {
		return x.CreatedTs
	}
	return 0
}

type GetClientUsagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*ClientUsageModel `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int64               `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetClientUsagesResponse) Reset() {
	*x = GetClientUsagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClientUsagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientUsagesResponse) ProtoMessage() {}

func (x *GetClientUsagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientUsagesResponse.ProtoReflect.Descriptor instead.
func (*GetClientUsagesResponse) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{34}
}

func (x *GetClientUsagesResponse) GetData() []*ClientUsageModel {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetClientUsagesResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type PirRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId uint64 `protobuf:"varint,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// 匹配列
	Keys      []*PirRequest_KeyColumn `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	Token     string                  `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	DataMode  enums1.DataMode         `protobuf:"varint,4,opt,name=data_mode,json=dataMode,proto3,enum=sudo.protobuf.service.enums.DataMode" json:"data_mode,omitempty"`
	RequestId string                  `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	SubPath   string                  `protobuf:"bytes,6,opt,name=sub_path,json=subPath,proto3" json:"sub_path,omitempty"`
}

func (x *PirRequest) Reset() {
	*x = PirRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PirRequest) ProtoMessage() {}

func (x *PirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PirRequest.ProtoReflect.Descriptor instead.
func (*PirRequest) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{35}
}

func (x *PirRequest) GetServiceId() uint64 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *PirRequest) GetKeys() []*PirRequest_KeyColumn {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *PirRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *PirRequest) GetDataMode() enums1.DataMode {
	if x != nil {
		return x.DataMode
	}
	return enums1.DataMode_UNKNOWN_DATA_MODE
}

func (x *PirRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *PirRequest) GetSubPath() string {
	if x != nil {
		return x.SubPath
	}
	return ""
}

type PirSingleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 匹配列
	Keys []string                 `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	Code PirSingleResponse_Status `protobuf:"varint,2,opt,name=code,proto3,enum=sudo.protobuf.platform.pir.PirSingleResponse_Status" json:"code,omitempty"`
	// 命中后的可查列信息
	Info []string `protobuf:"bytes,3,rep,name=info,proto3" json:"info,omitempty"`
}

func (x *PirSingleResponse) Reset() {
	*x = PirSingleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PirSingleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PirSingleResponse) ProtoMessage() {}

func (x *PirSingleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PirSingleResponse.ProtoReflect.Descriptor instead.
func (*PirSingleResponse) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{36}
}

func (x *PirSingleResponse) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *PirSingleResponse) GetCode() PirSingleResponse_Status {
	if x != nil {
		return x.Code
	}
	return PirSingleResponse_UNKNOWN
}

func (x *PirSingleResponse) GetInfo() []string {
	if x != nil {
		return x.Info
	}
	return nil
}

type PirResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data         []*PirSingleResponse `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	RequestCount uint64               `protobuf:"varint,2,opt,name=request_count,json=requestCount,proto3" json:"request_count,omitempty"`
	UsageCount   uint64               `protobuf:"varint,3,opt,name=usage_count,json=usageCount,proto3" json:"usage_count,omitempty"`
	KeyColumns   []string             `protobuf:"bytes,4,rep,name=key_columns,json=keyColumns,proto3" json:"key_columns,omitempty"`
	LabelColumns []string             `protobuf:"bytes,5,rep,name=label_columns,json=labelColumns,proto3" json:"label_columns,omitempty"`
	RequestId    string               `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *PirResponse) Reset() {
	*x = PirResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PirResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PirResponse) ProtoMessage() {}

func (x *PirResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PirResponse.ProtoReflect.Descriptor instead.
func (*PirResponse) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{37}
}

func (x *PirResponse) GetData() []*PirSingleResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PirResponse) GetRequestCount() uint64 {
	if x != nil {
		return x.RequestCount
	}
	return 0
}

func (x *PirResponse) GetUsageCount() uint64 {
	if x != nil {
		return x.UsageCount
	}
	return 0
}

func (x *PirResponse) GetKeyColumns() []string {
	if x != nil {
		return x.KeyColumns
	}
	return nil
}

func (x *PirResponse) GetLabelColumns() []string {
	if x != nil {
		return x.LabelColumns
	}
	return nil
}

func (x *PirResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateServerDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DataModeParams *DataModeParams `protobuf:"bytes,2,opt,name=data_mode_params,json=dataModeParams,proto3" json:"data_mode_params,omitempty"`
}

func (x *UpdateServerDataRequest) Reset() {
	*x = UpdateServerDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerDataRequest) ProtoMessage() {}

func (x *UpdateServerDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerDataRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerDataRequest) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{38}
}

func (x *UpdateServerDataRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateServerDataRequest) GetDataModeParams() *DataModeParams {
	if x != nil {
		return x.DataModeParams
	}
	return nil
}

type UpdateServerDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status UpdateServerDataResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=sudo.protobuf.platform.pir.UpdateServerDataResponse_Status" json:"status,omitempty"`
	// 异常时返回原因
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *UpdateServerDataResponse) Reset() {
	*x = UpdateServerDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerDataResponse) ProtoMessage() {}

func (x *UpdateServerDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerDataResponse.ProtoReflect.Descriptor instead.
func (*UpdateServerDataResponse) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateServerDataResponse) GetStatus() UpdateServerDataResponse_Status {
	if x != nil {
		return x.Status
	}
	return UpdateServerDataResponse_UNKNOWN_STATUS
}

func (x *UpdateServerDataResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type PirServerVtableAdditionalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DataSize   uint64 `protobuf:"varint,2,opt,name=data_size,json=dataSize,proto3" json:"data_size,omitempty"`
	DataColumn uint64 `protobuf:"varint,3,opt,name=data_column,json=dataColumn,proto3" json:"data_column,omitempty"`
}

func (x *PirServerVtableAdditionalInfo) Reset() {
	*x = PirServerVtableAdditionalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PirServerVtableAdditionalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PirServerVtableAdditionalInfo) ProtoMessage() {}

func (x *PirServerVtableAdditionalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PirServerVtableAdditionalInfo.ProtoReflect.Descriptor instead.
func (*PirServerVtableAdditionalInfo) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PirServerVtableAdditionalInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PirServerVtableAdditionalInfo) GetDataSize() uint64 {
	if x != nil {
		return x.DataSize
	}
	return 0
}

func (x *PirServerVtableAdditionalInfo) GetDataColumn() uint64 {
	if x != nil {
		return x.DataColumn
	}
	return 0
}

type PirRequest_KeyColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *PirRequest_KeyColumn) Reset() {
	*x = PirRequest_KeyColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PirRequest_KeyColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PirRequest_KeyColumn) ProtoMessage() {}

func (x *PirRequest_KeyColumn) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PirRequest_KeyColumn.ProtoReflect.Descriptor instead.
func (*PirRequest_KeyColumn) Descriptor() ([]byte, []int) {
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP(), []int{35, 0}
}

func (x *PirRequest_KeyColumn) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_sudo_mpc_virtual_service_platform_pir_proto protoreflect.FileDescriptor

var file_sudo_mpc_virtual_service_platform_pir_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x73,
	0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x73, 0x75, 0x64, 0x6f,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2f, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x73, 0x76, 0x63, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x99, 0x09, 0x0a, 0x09, 0x50, 0x69, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x69, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13,
	0x4a, 0x11, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x78,
	0x78, 0x78, 0x22, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x17, 0x69, 0x6e, 0x64, 0x69, 0x73, 0x63, 0x65, 0x72, 0x6e,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x69, 0x6e, 0x64, 0x69, 0x73, 0x63, 0x65, 0x72, 0x6e, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x6b, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x09, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x76, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x70, 0x0a, 0x16, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x69, 0x72, 0x2e, 0x50, 0x69, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x14, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x75,
	0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x56, 0x43, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x64,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x10, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70,
	0x69, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x50,
	0x6f, 0x72, 0x74, 0x1a, 0x68, 0x0a, 0x14, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x92, 0x07,
	0x0a, 0x0e, 0x50, 0x69, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x69, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a,
	0x17, 0x69, 0x6e, 0x64, 0x69, 0x73, 0x63, 0x65, 0x72, 0x6e, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16,
	0x69, 0x6e, 0x64, 0x69, 0x73, 0x63, 0x65, 0x72, 0x6e, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x6b,
	0x69, 0x70, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x79,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6b, 0x65, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x75, 0x64,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x56, 0x43, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x64, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x10, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69,
	0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x50, 0x6f,
	0x72, 0x74, 0x22, 0x8d, 0x02, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x75, 0x64, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x41, 0x50, 0x49, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x09, 0x61, 0x70, 0x69, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x50, 0x0a, 0x0c, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x69, 0x72, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x53, 0x0a, 0x0d, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x75, 0x64,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x48, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x0a, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x0d, 0x41, 0x50, 0x49, 0x4d, 0x6f, 0x64, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x4a, 0x15, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x78, 0x78, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x3a, 0x38, 0x30, 0x38, 0x30, 0x22, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x4a, 0x09, 0x22, 0x61, 0x70, 0x69, 0x2f, 0x78, 0x78, 0x78,
	0x22, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x47, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73,
	0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x22, 0x53, 0x0a, 0x0f, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x2f, 0x0a, 0x10, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x76, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x70, 0x69, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x50, 0x69, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42,
	0x03, 0xc8, 0x3e, 0x01, 0x52, 0x09, 0x70, 0x69, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22,
	0x5d, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73,
	0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x50, 0x69, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd2,
	0x01, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x42, 0x03, 0xc0, 0x3e, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x69, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x64, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x48, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xc0,
	0x3e, 0x01, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x6c, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x64,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x50, 0x69, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8d, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x70, 0x69, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x64,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x50, 0x69, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x42, 0x03, 0xc8, 0x3e, 0x01, 0x52, 0x09, 0x70, 0x69, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x53, 0x74, 0x72, 0x22, 0x5e, 0x0a, 0x1e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x1f, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x50, 0x69, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x56, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0xcc, 0x07,
	0x0a, 0x09, 0x50, 0x69, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x69, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22,
	0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x17, 0x69, 0x6e, 0x64, 0x69, 0x73,
	0x63, 0x65, 0x72, 0x6e, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x67, 0x72,
	0x65, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x69, 0x6e, 0x64, 0x69, 0x73, 0x63,
	0x65, 0x72, 0x6e, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x53, 0x56, 0x43, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x54, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x75,
	0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x33, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4f, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x6f, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x22, 0xd1, 0x07, 0x0a,
	0x0e, 0x50, 0x69, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x69, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x17, 0x69,
	0x6e, 0x64, 0x69, 0x73, 0x63, 0x65, 0x72, 0x6e, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x69, 0x6e,
	0x64, 0x69, 0x73, 0x63, 0x65, 0x72, 0x6e, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x65,
	0x67, 0x72, 0x65, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x53, 0x56, 0x43, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x42, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0e, 0x64, 0x61, 0x74,
	0x61, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6f,
	0x70, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x50, 0x6f, 0x72, 0x74,
	0x22, 0x90, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x72, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x70, 0x69, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x69, 0x72, 0x2e, 0x50, 0x69, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x03, 0xc8,
	0x3e, 0x01, 0x52, 0x09, 0x70, 0x69, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x53, 0x74, 0x72, 0x22, 0x60, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x72,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72,
	0x2e, 0x50, 0x69, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb5, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x69, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x70, 0x69, 0x72, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75,
	0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x50, 0x69, 0x72, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x42, 0x03, 0xc8, 0x3e, 0x01, 0x52, 0x09, 0x70, 0x69, 0x72, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x1f, 0x0a, 0x09,
	0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe9, 0x02,
	0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x42, 0x03, 0xc0, 0x3e, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x69, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x69, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x66, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x50, 0x69, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x69, 0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xc0, 0x3e, 0x01, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x22, 0x6f, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x69, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x50, 0x69, 0x72,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x70, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x73,
	0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x18, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x74, 0x0a, 0x1e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5c, 0x0a, 0x1f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75,
	0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x50, 0x69, 0x72, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcd, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x42, 0x03, 0xc0, 0x3e, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x68, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4e, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0xc0, 0x3e, 0x01, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x22, 0x91, 0x02, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x73, 0x22, 0x71, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x40, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xa5, 0x01, 0x0a, 0x17, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x03, 0xc0, 0x3e, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x68, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x75, 0x64,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x03, 0xc0, 0x3e, 0x01, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0xad, 0x02, 0x0a, 0x10,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x69,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x73, 0x22, 0x71, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69,
	0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xaa,
	0x02, 0x0a, 0x0a, 0x50, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x75, 0x64,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x50, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x42, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x75,
	0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x75, 0x62, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x50, 0x61, 0x74, 0x68, 0x1a, 0x23, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x11,
	0x50, 0x69, 0x72, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x48, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72,
	0x2e, 0x50, 0x69, 0x72, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0x35, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x49,
	0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x48, 0x49, 0x54, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x22, 0xfb, 0x01, 0x0a, 0x0b, 0x50,
	0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x50, 0x69, 0x72, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x7f, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x54, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x69, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x6f, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x4d,
	0x6f, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x69, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x35, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x02, 0x42, 0x31, 0x5a, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x6d, 0x65, 0x73, 0x68,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x70, 0x62, 0x2f, 0x70, 0x69, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sudo_mpc_virtual_service_platform_pir_proto_rawDescOnce sync.Once
	file_sudo_mpc_virtual_service_platform_pir_proto_rawDescData = file_sudo_mpc_virtual_service_platform_pir_proto_rawDesc
)

func file_sudo_mpc_virtual_service_platform_pir_proto_rawDescGZIP() []byte {
	file_sudo_mpc_virtual_service_platform_pir_proto_rawDescOnce.Do(func() {
		file_sudo_mpc_virtual_service_platform_pir_proto_rawDescData = protoimpl.X.CompressGZIP(file_sudo_mpc_virtual_service_platform_pir_proto_rawDescData)
	})
	return file_sudo_mpc_virtual_service_platform_pir_proto_rawDescData
}

var file_sudo_mpc_virtual_service_platform_pir_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_sudo_mpc_virtual_service_platform_pir_proto_goTypes = []interface{}{
	(PirSingleResponse_Status)(0),           // 0: sudo.protobuf.platform.pir.PirSingleResponse.Status
	(UpdateServerDataResponse_Status)(0),    // 1: sudo.protobuf.platform.pir.UpdateServerDataResponse.Status
	(*PirServer)(nil),                       // 2: sudo.protobuf.platform.pir.PirServer
	(*PirServerModel)(nil),                  // 3: sudo.protobuf.platform.pir.PirServerModel
	(*DataModeParams)(nil),                  // 4: sudo.protobuf.platform.pir.DataModeParams
	(*AuthParams)(nil),                      // 5: sudo.protobuf.platform.pir.AuthParams
	(*APIModeParams)(nil),                   // 6: sudo.protobuf.platform.pir.APIModeParams
	(*MysqlModeParams)(nil),                 // 7: sudo.protobuf.platform.pir.MysqlModeParams
	(*VtableModeParams)(nil),                // 8: sudo.protobuf.platform.pir.VtableModeParams
	(*CreateServerServiceRequest)(nil),      // 9: sudo.protobuf.platform.pir.CreateServerServiceRequest
	(*CreateServerServiceResponse)(nil),     // 10: sudo.protobuf.platform.pir.CreateServerServiceResponse
	(*ServerQueryOption)(nil),               // 11: sudo.protobuf.platform.pir.ServerQueryOption
	(*GetServerServicesRequest)(nil),        // 12: sudo.protobuf.platform.pir.GetServerServicesRequest
	(*GetServerServicesResponse)(nil),       // 13: sudo.protobuf.platform.pir.GetServerServicesResponse
	(*UpdateServerServiceRequest)(nil),      // 14: sudo.protobuf.platform.pir.UpdateServerServiceRequest
	(*ServerServiceTakeActionRequest)(nil),  // 15: sudo.protobuf.platform.pir.ServerServiceTakeActionRequest
	(*ServerServiceTakeActionResponse)(nil), // 16: sudo.protobuf.platform.pir.ServerServiceTakeActionResponse
	(*DeleteServerServiceRequest)(nil),      // 17: sudo.protobuf.platform.pir.DeleteServerServiceRequest
	(*PirClient)(nil),                       // 18: sudo.protobuf.platform.pir.PirClient
	(*PirClientModel)(nil),                  // 19: sudo.protobuf.platform.pir.PirClientModel
	(*CreatePirClientServiceRequest)(nil),   // 20: sudo.protobuf.platform.pir.CreatePirClientServiceRequest
	(*CreatePirClientServiceResponse)(nil),  // 21: sudo.protobuf.platform.pir.CreatePirClientServiceResponse
	(*UpdatePirClientServiceRequest)(nil),   // 22: sudo.protobuf.platform.pir.UpdatePirClientServiceRequest
	(*ClientQueryOption)(nil),               // 23: sudo.protobuf.platform.pir.ClientQueryOption
	(*GetPirClientServicesRequst)(nil),      // 24: sudo.protobuf.platform.pir.GetPirClientServicesRequst
	(*GetPirClientServicesResponse)(nil),    // 25: sudo.protobuf.platform.pir.GetPirClientServicesResponse
	(*DeleteClientServiceRequest)(nil),      // 26: sudo.protobuf.platform.pir.DeleteClientServiceRequest
	(*ClientServiceTakeActionRequest)(nil),  // 27: sudo.protobuf.platform.pir.ClientServiceTakeActionRequest
	(*ClientServiceTakeActionResponse)(nil), // 28: sudo.protobuf.platform.pir.ClientServiceTakeActionResponse
	(*ServerUsageQueryOptions)(nil),         // 29: sudo.protobuf.platform.pir.ServerUsageQueryOptions
	(*GetServerUsagesRequest)(nil),          // 30: sudo.protobuf.platform.pir.GetServerUsagesRequest
	(*ServerUsageModel)(nil),                // 31: sudo.protobuf.platform.pir.ServerUsageModel
	(*GetServerUsagesResponse)(nil),         // 32: sudo.protobuf.platform.pir.GetServerUsagesResponse
	(*ClientUsageQueryOptions)(nil),         // 33: sudo.protobuf.platform.pir.ClientUsageQueryOptions
	(*GetClientUsagesRequest)(nil),          // 34: sudo.protobuf.platform.pir.GetClientUsagesRequest
	(*ClientUsageModel)(nil),                // 35: sudo.protobuf.platform.pir.ClientUsageModel
	(*GetClientUsagesResponse)(nil),         // 36: sudo.protobuf.platform.pir.GetClientUsagesResponse
	(*PirRequest)(nil),                      // 37: sudo.protobuf.platform.pir.PirRequest
	(*PirSingleResponse)(nil),               // 38: sudo.protobuf.platform.pir.PirSingleResponse
	(*PirResponse)(nil),                     // 39: sudo.protobuf.platform.pir.PirResponse
	(*UpdateServerDataRequest)(nil),         // 40: sudo.protobuf.platform.pir.UpdateServerDataRequest
	(*UpdateServerDataResponse)(nil),        // 41: sudo.protobuf.platform.pir.UpdateServerDataResponse
	(*PirServerVtableAdditionalInfo)(nil),   // 42: sudo.protobuf.platform.pir.PirServer.vtableAdditionalInfo
	(*PirRequest_KeyColumn)(nil),            // 43: sudo.protobuf.platform.pir.PirRequest.KeyColumn
	(enums.PirService_Status)(0),            // 44: sudo.protobuf.enums.PirService.Status
	(enums1.SVCType)(0),                     // 45: sudo.protobuf.service.enums.SVCType
	(enums1.DataMode)(0),                    // 46: sudo.protobuf.service.enums.DataMode
	(enums1.AuthMethod)(0),                  // 47: sudo.protobuf.service.enums.AuthMethod
	(*paginator.Paginator)(nil),             // 48: sudo.protobuf.platform.paginator.Paginator
}
var file_sudo_mpc_virtual_service_platform_pir_proto_depIdxs = []int32{
	44, // 0: sudo.protobuf.platform.pir.PirServer.status:type_name -> sudo.protobuf.enums.PirService.Status
	42, // 1: sudo.protobuf.platform.pir.PirServer.vtable_additional_info:type_name -> sudo.protobuf.platform.pir.PirServer.vtableAdditionalInfo
	45, // 2: sudo.protobuf.platform.pir.PirServer.type:type_name -> sudo.protobuf.service.enums.SVCType
	46, // 3: sudo.protobuf.platform.pir.PirServer.data_mode:type_name -> sudo.protobuf.service.enums.DataMode
	4,  // 4: sudo.protobuf.platform.pir.PirServer.data_mode_params:type_name -> sudo.protobuf.platform.pir.DataModeParams
	44, // 5: sudo.protobuf.platform.pir.PirServerModel.status:type_name -> sudo.protobuf.enums.PirService.Status
	45, // 6: sudo.protobuf.platform.pir.PirServerModel.type:type_name -> sudo.protobuf.service.enums.SVCType
	46, // 7: sudo.protobuf.platform.pir.PirServerModel.data_mode:type_name -> sudo.protobuf.service.enums.DataMode
	4,  // 8: sudo.protobuf.platform.pir.PirServerModel.data_mode_params:type_name -> sudo.protobuf.platform.pir.DataModeParams
	6,  // 9: sudo.protobuf.platform.pir.DataModeParams.api_params:type_name -> sudo.protobuf.platform.pir.APIModeParams
	7,  // 10: sudo.protobuf.platform.pir.DataModeParams.mysql_params:type_name -> sudo.protobuf.platform.pir.MysqlModeParams
	8,  // 11: sudo.protobuf.platform.pir.DataModeParams.vtable_params:type_name -> sudo.protobuf.platform.pir.VtableModeParams
	47, // 12: sudo.protobuf.platform.pir.AuthParams.auth_method:type_name -> sudo.protobuf.service.enums.AuthMethod
	5,  // 13: sudo.protobuf.platform.pir.APIModeParams.auth_params:type_name -> sudo.protobuf.platform.pir.AuthParams
	2,  // 14: sudo.protobuf.platform.pir.CreateServerServiceRequest.pir_server:type_name -> sudo.protobuf.platform.pir.PirServer
	3,  // 15: sudo.protobuf.platform.pir.CreateServerServiceResponse.data:type_name -> sudo.protobuf.platform.pir.PirServerModel
	48, // 16: sudo.protobuf.platform.pir.ServerQueryOption.paginator:type_name -> sudo.protobuf.platform.paginator.Paginator
	44, // 17: sudo.protobuf.platform.pir.ServerQueryOption.status:type_name -> sudo.protobuf.enums.PirService.Status
	11, // 18: sudo.protobuf.platform.pir.GetServerServicesRequest.query:type_name -> sudo.protobuf.platform.pir.ServerQueryOption
	2,  // 19: sudo.protobuf.platform.pir.GetServerServicesResponse.data:type_name -> sudo.protobuf.platform.pir.PirServer
	2,  // 20: sudo.protobuf.platform.pir.UpdateServerServiceRequest.pir_server:type_name -> sudo.protobuf.platform.pir.PirServer
	2,  // 21: sudo.protobuf.platform.pir.ServerServiceTakeActionResponse.data:type_name -> sudo.protobuf.platform.pir.PirServer
	44, // 22: sudo.protobuf.platform.pir.PirClient.status:type_name -> sudo.protobuf.enums.PirService.Status
	45, // 23: sudo.protobuf.platform.pir.PirClient.type:type_name -> sudo.protobuf.service.enums.SVCType
	46, // 24: sudo.protobuf.platform.pir.PirClient.data_mode:type_name -> sudo.protobuf.service.enums.DataMode
	4,  // 25: sudo.protobuf.platform.pir.PirClient.data_mode_params:type_name -> sudo.protobuf.platform.pir.DataModeParams
	44, // 26: sudo.protobuf.platform.pir.PirClientModel.status:type_name -> sudo.protobuf.enums.PirService.Status
	45, // 27: sudo.protobuf.platform.pir.PirClientModel.type:type_name -> sudo.protobuf.service.enums.SVCType
	46, // 28: sudo.protobuf.platform.pir.PirClientModel.data_mode:type_name -> sudo.protobuf.service.enums.DataMode
	4,  // 29: sudo.protobuf.platform.pir.PirClientModel.data_mode_params:type_name -> sudo.protobuf.platform.pir.DataModeParams
	18, // 30: sudo.protobuf.platform.pir.CreatePirClientServiceRequest.pir_client:type_name -> sudo.protobuf.platform.pir.PirClient
	19, // 31: sudo.protobuf.platform.pir.CreatePirClientServiceResponse.data:type_name -> sudo.protobuf.platform.pir.PirClientModel
	18, // 32: sudo.protobuf.platform.pir.UpdatePirClientServiceRequest.pir_client:type_name -> sudo.protobuf.platform.pir.PirClient
	48, // 33: sudo.protobuf.platform.pir.ClientQueryOption.paginator:type_name -> sudo.protobuf.platform.paginator.Paginator
	44, // 34: sudo.protobuf.platform.pir.ClientQueryOption.status:type_name -> sudo.protobuf.enums.PirService.Status
	44, // 35: sudo.protobuf.platform.pir.ClientQueryOption.status_in:type_name -> sudo.protobuf.enums.PirService.Status
	23, // 36: sudo.protobuf.platform.pir.GetPirClientServicesRequst.query:type_name -> sudo.protobuf.platform.pir.ClientQueryOption
	18, // 37: sudo.protobuf.platform.pir.GetPirClientServicesResponse.data:type_name -> sudo.protobuf.platform.pir.PirClient
	18, // 38: sudo.protobuf.platform.pir.ClientServiceTakeActionResponse.data:type_name -> sudo.protobuf.platform.pir.PirClient
	48, // 39: sudo.protobuf.platform.pir.ServerUsageQueryOptions.paginator:type_name -> sudo.protobuf.platform.paginator.Paginator
	29, // 40: sudo.protobuf.platform.pir.GetServerUsagesRequest.query:type_name -> sudo.protobuf.platform.pir.ServerUsageQueryOptions
	31, // 41: sudo.protobuf.platform.pir.GetServerUsagesResponse.data:type_name -> sudo.protobuf.platform.pir.ServerUsageModel
	48, // 42: sudo.protobuf.platform.pir.ClientUsageQueryOptions.paginator:type_name -> sudo.protobuf.platform.paginator.Paginator
	33, // 43: sudo.protobuf.platform.pir.GetClientUsagesRequest.query:type_name -> sudo.protobuf.platform.pir.ClientUsageQueryOptions
	35, // 44: sudo.protobuf.platform.pir.GetClientUsagesResponse.data:type_name -> sudo.protobuf.platform.pir.ClientUsageModel
	43, // 45: sudo.protobuf.platform.pir.PirRequest.keys:type_name -> sudo.protobuf.platform.pir.PirRequest.KeyColumn
	46, // 46: sudo.protobuf.platform.pir.PirRequest.data_mode:type_name -> sudo.protobuf.service.enums.DataMode
	0,  // 47: sudo.protobuf.platform.pir.PirSingleResponse.code:type_name -> sudo.protobuf.platform.pir.PirSingleResponse.Status
	38, // 48: sudo.protobuf.platform.pir.PirResponse.data:type_name -> sudo.protobuf.platform.pir.PirSingleResponse
	4,  // 49: sudo.protobuf.platform.pir.UpdateServerDataRequest.data_mode_params:type_name -> sudo.protobuf.platform.pir.DataModeParams
	1,  // 50: sudo.protobuf.platform.pir.UpdateServerDataResponse.status:type_name -> sudo.protobuf.platform.pir.UpdateServerDataResponse.Status
	51, // [51:51] is the sub-list for method output_type
	51, // [51:51] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_sudo_mpc_virtual_service_platform_pir_proto_init() }
func file_sudo_mpc_virtual_service_platform_pir_proto_init() {
	if File_sudo_mpc_virtual_service_platform_pir_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PirServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PirServerModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataModeParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIModeParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MysqlModeParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VtableModeParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServerServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServerServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerQueryOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerServicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerServicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerServiceTakeActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerServiceTakeActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServerServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PirClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PirClientModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePirClientServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePirClientServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePirClientServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientQueryOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPirClientServicesRequst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPirClientServicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClientServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientServiceTakeActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientServiceTakeActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerUsageQueryOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerUsagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerUsageModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerUsagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientUsageQueryOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClientUsagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientUsageModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClientUsagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PirRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PirSingleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PirResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PirServerVtableAdditionalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PirRequest_KeyColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*DataModeParams_ApiParams)(nil),
		(*DataModeParams_MysqlParams)(nil),
		(*DataModeParams_VtableParams)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sudo_mpc_virtual_service_platform_pir_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sudo_mpc_virtual_service_platform_pir_proto_goTypes,
		DependencyIndexes: file_sudo_mpc_virtual_service_platform_pir_proto_depIdxs,
		EnumInfos:         file_sudo_mpc_virtual_service_platform_pir_proto_enumTypes,
		MessageInfos:      file_sudo_mpc_virtual_service_platform_pir_proto_msgTypes,
	}.Build()
	File_sudo_mpc_virtual_service_platform_pir_proto = out.File
	file_sudo_mpc_virtual_service_platform_pir_proto_rawDesc = nil
	file_sudo_mpc_virtual_service_platform_pir_proto_goTypes = nil
	file_sudo_mpc_virtual_service_platform_pir_proto_depIdxs = nil
}
