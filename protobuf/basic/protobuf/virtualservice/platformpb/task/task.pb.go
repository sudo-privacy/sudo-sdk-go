// Copyright 2022 Sudo Technology Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.1
// source: sudo/protobuf/mpc_virtual_service/platform/task.proto

package task

import (
	protobuf "github.com/sudo-privacy/sudo-sdk-go/protobuf/basic/protobuf"
	enums "github.com/sudo-privacy/sudo-sdk-go/protobuf/basic/protobuf/enums"
	infra_adapter "github.com/sudo-privacy/sudo-sdk-go/protobuf/basic/protobuf/infra_adapter"
	_ "github.com/sudo-privacy/sudo-sdk-go/protobuf/basic/protobuf/virtualservice/platformpb/options"
	paginator "github.com/sudo-privacy/sudo-sdk-go/protobuf/basic/protobuf/virtualservice/platformpb/paginator"
	user "github.com/sudo-privacy/sudo-sdk-go/protobuf/basic/protobuf/virtualservice/platformpb/user"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Graph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// TODO：add edit-version
	// # of times the graph has been executed
	TotalRun uint64 `protobuf:"varint,2,opt,name=total_run,json=totalRun,proto3" json:"total_run,omitempty"`
	Frozen   bool   `protobuf:"varint,3,opt,name=frozen,proto3" json:"frozen,omitempty"`
}

func (x *Graph) Reset() {
	*x = Graph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graph) ProtoMessage() {}

func (x *Graph) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graph.ProtoReflect.Descriptor instead.
func (*Graph) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_task_proto_rawDescGZIP(), []int{0}
}

func (x *Graph) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Graph) GetTotalRun() uint64 {
	if x != nil {
		return x.TotalRun
	}
	return 0
}

func (x *Graph) GetFrozen() bool {
	if x != nil {
		return x.Frozen
	}
	return false
}

type JobProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts       int64                                   `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	InnerId  uint64                                  `protobuf:"varint,2,opt,name=inner_id,json=innerId,proto3" json:"inner_id,omitempty"`
	PartyId  string                                  `protobuf:"bytes,3,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	Msg      string                                  `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
	Category protobuf.UpdateProgressRequest_Category `protobuf:"varint,5,opt,name=category,proto3,enum=sudo.protobuf.infra_adapter.UpdateProgressRequest_Category" json:"category,omitempty"`
}

func (x *JobProgress) Reset() {
	*x = JobProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobProgress) ProtoMessage() {}

func (x *JobProgress) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobProgress.ProtoReflect.Descriptor instead.
func (*JobProgress) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_task_proto_rawDescGZIP(), []int{1}
}

func (x *JobProgress) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *JobProgress) GetInnerId() uint64 {
	if x != nil {
		return x.InnerId
	}
	return 0
}

func (x *JobProgress) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *JobProgress) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *JobProgress) GetCategory() protobuf.UpdateProgressRequest_Category {
	if x != nil {
		return x.Category
	}
	return protobuf.UpdateProgressRequest_GENERAL
}

type RequestItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64              `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  enums.Resource_Unit `protobuf:"varint,2,opt,name=unit,proto3,enum=sudo.protobuf.enums.Resource_Unit" json:"unit,omitempty"`
}

func (x *RequestItem) Reset() {
	*x = RequestItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestItem) ProtoMessage() {}

func (x *RequestItem) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestItem.ProtoReflect.Descriptor instead.
func (*RequestItem) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_task_proto_rawDescGZIP(), []int{2}
}

func (x *RequestItem) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *RequestItem) GetUnit() enums.Resource_Unit {
	if x != nil {
		return x.Unit
	}
	return enums.Resource_UNKNOWN_UNIT
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu    *RequestItem `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory *RequestItem `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_task_proto_rawDescGZIP(), []int{3}
}

func (x *Resource) GetCpu() *RequestItem {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *Resource) GetMemory() *RequestItem {
	if x != nil {
		return x.Memory
	}
	return nil
}

type ResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource *Resource                  `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Mode     enums.Resource_RequestMode `protobuf:"varint,2,opt,name=mode,proto3,enum=sudo.protobuf.enums.Resource_RequestMode" json:"mode,omitempty"`
}

func (x *ResourceRequest) Reset() {
	*x = ResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRequest) ProtoMessage() {}

func (x *ResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRequest.ProtoReflect.Descriptor instead.
func (*ResourceRequest) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_task_proto_rawDescGZIP(), []int{4}
}

func (x *ResourceRequest) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *ResourceRequest) GetMode() enums.Resource_RequestMode {
	if x != nil {
		return x.Mode
	}
	return enums.Resource_UNKNOWN_REQUEST_MODE
}

type SiteConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// OpParams
	Params          map[string]*structpb.Value                `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ResourceRequest *ResourceRequest                          `protobuf:"bytes,3,opt,name=resource_request,json=resourceRequest,proto3" json:"resource_request,omitempty"`
	Inputs          map[string]*infra_adapter.FurnaceProperty `protobuf:"bytes,4,rep,name=inputs,proto3" json:"inputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Outputs         map[string]*infra_adapter.FurnaceProperty `protobuf:"bytes,5,rep,name=outputs,proto3" json:"outputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SiteConfig) Reset() {
	*x = SiteConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiteConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiteConfig) ProtoMessage() {}

func (x *SiteConfig) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiteConfig.ProtoReflect.Descriptor instead.
func (*SiteConfig) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_task_proto_rawDescGZIP(), []int{5}
}

func (x *SiteConfig) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *SiteConfig) GetParams() map[string]*structpb.Value {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SiteConfig) GetResourceRequest() *ResourceRequest {
	if x != nil {
		return x.ResourceRequest
	}
	return nil
}

func (x *SiteConfig) GetInputs() map[string]*infra_adapter.FurnaceProperty {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *SiteConfig) GetOutputs() map[string]*infra_adapter.FurnaceProperty {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type StageParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OpParams
	SharedParams  map[string]*structpb.Value `protobuf:"bytes,1,rep,name=shared_params,json=sharedParams,proto3" json:"shared_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClientConfig  *SiteConfig                `protobuf:"bytes,2,opt,name=client_config,json=clientConfig,proto3" json:"client_config,omitempty"`
	ServerConfigs []*SiteConfig              `protobuf:"bytes,3,rep,name=server_configs,json=serverConfigs,proto3" json:"server_configs,omitempty"`
}

func (x *StageParams) Reset() {
	*x = StageParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageParams) ProtoMessage() {}

func (x *StageParams) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageParams.ProtoReflect.Descriptor instead.
func (*StageParams) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_task_proto_rawDescGZIP(), []int{6}
}

func (x *StageParams) GetSharedParams() map[string]*structpb.Value {
	if x != nil {
		return x.SharedParams
	}
	return nil
}

func (x *StageParams) GetClientConfig() *SiteConfig {
	if x != nil {
		return x.ClientConfig
	}
	return nil
}

func (x *StageParams) GetServerConfigs() []*SiteConfig {
	if x != nil {
		return x.ServerConfigs
	}
	return nil
}

type Stage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// filled when Task.DoAction
	TaskId uint64 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// filled when GetTask, most likely be 0 in other cases，not persisted in config（because id is created when config is saved）
	JobId uint64 `protobuf:"varint,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// generated by front end, should be unique in task
	Index        uint64               `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	StageType    enums.Stage_Type     `protobuf:"varint,4,opt,name=stage_type,json=stageType,proto3,enum=sudo.protobuf.enums.Stage_Type" json:"stage_type,omitempty"`
	StageName    string               `protobuf:"bytes,5,opt,name=stage_name,json=stageName,proto3" json:"stage_name,omitempty"`
	Dependencies []uint64             `protobuf:"varint,6,rep,packed,name=dependencies,proto3" json:"dependencies,omitempty"`
	Status       enums.Dag_Job_Status `protobuf:"varint,7,opt,name=status,proto3,enum=sudo.protobuf.enums.Dag_Job_Status" json:"status,omitempty"`
	Progress     []*JobProgress       `protobuf:"bytes,8,rep,name=progress,proto3" json:"progress,omitempty"`
	// execution history group by job id（latest 2 executions by default）
	// listValue中的保存的类型为JobProgress
	HistoryProgress map[uint64]*structpb.ListValue `protobuf:"bytes,9,rep,name=history_progress,json=historyProgress,proto3" json:"history_progress,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// stage location on canvas
	Top    float32      `protobuf:"fixed32,10,opt,name=top,proto3" json:"top,omitempty"`
	Left   float32      `protobuf:"fixed32,11,opt,name=left,proto3" json:"left,omitempty"`
	Config *StageParams `protobuf:"bytes,12,opt,name=config,proto3" json:"config,omitempty"`
	// 可能会修改的字段存到stage info里
	StartTs      int64  `protobuf:"varint,13,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	EndTs        int64  `protobuf:"varint,14,opt,name=end_ts,json=endTs,proto3" json:"end_ts,omitempty"`
	Version      string `protobuf:"bytes,15,opt,name=version,proto3" json:"version,omitempty"`
	StageTypeStr string `protobuf:"bytes,16,opt,name=stage_type_str,json=stageTypeStr,proto3" json:"stage_type_str,omitempty"`
}

func (x *Stage) Reset() {
	*x = Stage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stage) ProtoMessage() {}

func (x *Stage) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stage.ProtoReflect.Descriptor instead.
func (*Stage) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_task_proto_rawDescGZIP(), []int{7}
}

func (x *Stage) GetTaskId() uint64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *Stage) GetJobId() uint64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *Stage) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Stage) GetStageType() enums.Stage_Type {
	if x != nil {
		return x.StageType
	}
	return enums.Stage_unknown
}

func (x *Stage) GetStageName() string {
	if x != nil {
		return x.StageName
	}
	return ""
}

func (x *Stage) GetDependencies() []uint64 {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *Stage) GetStatus() enums.Dag_Job_Status {
	if x != nil {
		return x.Status
	}
	return enums.Dag_Job_UNKNOWN_STATUS
}

func (x *Stage) GetProgress() []*JobProgress {
	if x != nil {
		return x.Progress
	}
	return nil
}

func (x *Stage) GetHistoryProgress() map[uint64]*structpb.ListValue {
	if x != nil {
		return x.HistoryProgress
	}
	return nil
}

func (x *Stage) GetTop() float32 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *Stage) GetLeft() float32 {
	if x != nil {
		return x.Left
	}
	return 0
}

func (x *Stage) GetConfig() *StageParams {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Stage) GetStartTs() int64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *Stage) GetEndTs() int64 {
	if x != nil {
		return x.EndTs
	}
	return 0
}

func (x *Stage) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Stage) GetStageTypeStr() string {
	if x != nil {
		return x.StageTypeStr
	}
	return ""
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: change this field to be private after refactoring.
	Graph *Graph `protobuf:"bytes,1,opt,name=graph,proto3" json:"graph,omitempty"`
	// TaskID
	//
	// 变更历史
	// Phase-1
	// 使用model.TaskModel（已被废弃），自增ID（未被使用），雪花TaskID（被当做"主键"使用）
	//
	// Phase-2
	// 引入无限编辑，复用之前的表, 但是使用新的ORM描述.
	// 新的描述没有ID字段，有TaskID字段，TaskID字段创建的时候始终引用GraphID（GraphID本身为graph的自增主键）
	//
	// Phase-3
	// 引入版本，TaskID需要与Graph ID解耦，与Phase-2相同，引用第一个graph的ID，不过在初次赋值后不再更改(db read only field)
	TaskId          uint64                `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	ProjectId       uint64                `protobuf:"varint,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Name            string                `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description     string                `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Status          enums.Task_Status     `protobuf:"varint,6,opt,name=status,proto3,enum=sudo.protobuf.enums.Task_Status" json:"status,omitempty"`
	OwnerParty      string                `protobuf:"bytes,7,opt,name=owner_party,json=ownerParty,proto3" json:"owner_party,omitempty"`
	OwnerUserId     uint64                `protobuf:"varint,8,opt,name=owner_user_id,json=ownerUserId,proto3" json:"owner_user_id,omitempty"`
	Type            enums.Job_Type        `protobuf:"varint,9,opt,name=type,proto3,enum=sudo.protobuf.enums.Job_Type" json:"type,omitempty"`
	Priority        uint32                `protobuf:"varint,10,opt,name=priority,proto3" json:"priority,omitempty"`
	Stages          []*Stage              `protobuf:"bytes,11,rep,name=stages,proto3" json:"stages,omitempty"`
	CreatedTs       int64                 `protobuf:"varint,12,opt,name=created_ts,json=createdTs,proto3" json:"created_ts,omitempty"`
	UpdatedTs       int64                 `protobuf:"varint,13,opt,name=updated_ts,json=updatedTs,proto3" json:"updated_ts,omitempty"`
	SubmittedTs     int64                 `protobuf:"varint,14,opt,name=submitted_ts,json=submittedTs,proto3" json:"submitted_ts,omitempty"`
	HiddenTs        int64                 `protobuf:"varint,15,opt,name=hidden_ts,json=hiddenTs,proto3" json:"hidden_ts,omitempty"`
	EndTs           int64                 `protobuf:"varint,16,opt,name=end_ts,json=endTs,proto3" json:"end_ts,omitempty"`
	ComputeMode     enums.Job_ComputeMode `protobuf:"varint,17,opt,name=compute_mode,json=computeMode,proto3,enum=sudo.protobuf.enums.Job_ComputeMode" json:"compute_mode,omitempty"`
	BeHidden        bool                  `protobuf:"varint,18,opt,name=be_hidden,json=beHidden,proto3" json:"be_hidden,omitempty"`
	HiddenUserId    uint64                `protobuf:"varint,19,opt,name=hidden_user_id,json=hiddenUserId,proto3" json:"hidden_user_id,omitempty"`
	MaxIndex        uint64                `protobuf:"varint,20,opt,name=max_index,json=maxIndex,proto3" json:"max_index,omitempty"`
	ResourceRequest *ResourceRequest      `protobuf:"bytes,21,opt,name=resource_request,json=resourceRequest,proto3" json:"resource_request,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_task_proto_rawDescGZIP(), []int{8}
}

func (x *Task) GetGraph() *Graph {
	if x != nil {
		return x.Graph
	}
	return nil
}

func (x *Task) GetTaskId() uint64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *Task) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Task) GetStatus() enums.Task_Status {
	if x != nil {
		return x.Status
	}
	return enums.Task_UNKNOWN_STATUS
}

func (x *Task) GetOwnerParty() string {
	if x != nil {
		return x.OwnerParty
	}
	return ""
}

func (x *Task) GetOwnerUserId() uint64 {
	if x != nil {
		return x.OwnerUserId
	}
	return 0
}

func (x *Task) GetType() enums.Job_Type {
	if x != nil {
		return x.Type
	}
	return enums.Job_UNKNOWN_TYPE
}

func (x *Task) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Task) GetStages() []*Stage {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *Task) GetCreatedTs() int64 {
	if x != nil {
		return x.CreatedTs
	}
	return 0
}

func (x *Task) GetUpdatedTs() int64 {
	if x != nil {
		return x.UpdatedTs
	}
	return 0
}

func (x *Task) GetSubmittedTs() int64 {
	if x != nil {
		return x.SubmittedTs
	}
	return 0
}

func (x *Task) GetHiddenTs() int64 {
	if x != nil {
		return x.HiddenTs
	}
	return 0
}

func (x *Task) GetEndTs() int64 {
	if x != nil {
		return x.EndTs
	}
	return 0
}

func (x *Task) GetComputeMode() enums.Job_ComputeMode {
	if x != nil {
		return x.ComputeMode
	}
	return enums.Job_CLASSIC
}

func (x *Task) GetBeHidden() bool {
	if x != nil {
		return x.BeHidden
	}
	return false
}

func (x *Task) GetHiddenUserId() uint64 {
	if x != nil {
		return x.HiddenUserId
	}
	return 0
}

func (x *Task) GetMaxIndex() uint64 {
	if x != nil {
		return x.MaxIndex
	}
	return 0
}

func (x *Task) GetResourceRequest() *ResourceRequest {
	if x != nil {
		return x.ResourceRequest
	}
	return nil
}

type TaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base      *Task          `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	OwnerUser *user.UserBase `protobuf:"bytes,2,opt,name=owner_user,json=ownerUser,proto3" json:"owner_user,omitempty"`
}

func (x *TaskResponse) Reset() {
	*x = TaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResponse) ProtoMessage() {}

func (x *TaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResponse.ProtoReflect.Descriptor instead.
func (*TaskResponse) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_task_proto_rawDescGZIP(), []int{9}
}

func (x *TaskResponse) GetBase() *Task {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *TaskResponse) GetOwnerUser() *user.UserBase {
	if x != nil {
		return x.OwnerUser
	}
	return nil
}

type GetTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paginator        *paginator.Paginator `protobuf:"bytes,1,opt,name=paginator,proto3" json:"paginator,omitempty"`
	TaskId           uint64               `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskIds          []uint64             `protobuf:"varint,3,rep,packed,name=task_ids,json=taskIds,proto3" json:"task_ids,omitempty"`
	ProjectId        uint64               `protobuf:"varint,4,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	WithLatestConfig bool                 `protobuf:"varint,5,opt,name=with_latest_config,json=withLatestConfig,proto3" json:"with_latest_config,omitempty"`
	WithTaskRun      bool                 `protobuf:"varint,6,opt,name=with_task_run,json=withTaskRun,proto3" json:"with_task_run,omitempty"`
	WithJobConfig    bool                 `protobuf:"varint,7,opt,name=with_job_config,json=withJobConfig,proto3" json:"with_job_config,omitempty"`
	WithProgress     bool                 `protobuf:"varint,8,opt,name=with_progress,json=withProgress,proto3" json:"with_progress,omitempty"`
	ForCopy          bool                 `protobuf:"varint,9,opt,name=for_copy,json=forCopy,proto3" json:"for_copy,omitempty"`
	WithHidden       bool                 `protobuf:"varint,10,opt,name=with_hidden,json=withHidden,proto3" json:"with_hidden,omitempty"`
	NoVersionInfo    bool                 `protobuf:"varint,11,opt,name=no_version_info,json=noVersionInfo,proto3" json:"no_version_info,omitempty"`
	// UI Filter options
	Status        enums.Task_Status `protobuf:"varint,12,opt,name=status,proto3,enum=sudo.protobuf.enums.Task_Status" json:"status,omitempty"`
	StatusIn      []uint64          `protobuf:"varint,13,rep,packed,name=status_in,json=statusIn,proto3" json:"status_in,omitempty"`
	Priority      uint32            `protobuf:"varint,14,opt,name=priority,proto3" json:"priority,omitempty"`
	Type          enums.Job_Type    `protobuf:"varint,15,opt,name=type,proto3,enum=sudo.protobuf.enums.Job_Type" json:"type,omitempty"`
	CreateAfter   int64             `protobuf:"varint,16,opt,name=create_after,json=createAfter,proto3" json:"create_after,omitempty"`
	CreateBefore  int64             `protobuf:"varint,17,opt,name=create_before,json=createBefore,proto3" json:"create_before,omitempty"`
	OwnerPartyId  string            `protobuf:"bytes,18,opt,name=owner_party_id,json=ownerPartyId,proto3" json:"owner_party_id,omitempty"`
	OwnerUserIds  []uint64          `protobuf:"varint,19,rep,packed,name=owner_user_ids,json=ownerUserIds,proto3" json:"owner_user_ids,omitempty"`
	FuzzyText     string            `protobuf:"bytes,20,opt,name=fuzzy_text,json=fuzzyText,proto3" json:"fuzzy_text,omitempty"`
	FromPredict   bool              `protobuf:"varint,21,opt,name=from_predict,json=fromPredict,proto3" json:"from_predict,omitempty"`
	MajorVersion  uint64            `protobuf:"varint,22,opt,name=major_version,json=majorVersion,proto3" json:"major_version,omitempty"`
	MinorVersion  uint64            `protobuf:"varint,23,opt,name=minor_version,json=minorVersion,proto3" json:"minor_version,omitempty"`
	ClientPartyId string            `protobuf:"bytes,24,opt,name=client_party_id,json=clientPartyId,proto3" json:"client_party_id,omitempty"`
	Creator       string            `protobuf:"bytes,25,opt,name=creator,proto3" json:"creator,omitempty"`
	// 请求会转发到的中心节点ID
	// 若非空，则覆盖grpc metadata中设置的to-tusita
	ToTusita string `protobuf:"bytes,26,opt,name=to_tusita,json=toTusita,proto3" json:"to_tusita,omitempty"`
}

func (x *GetTasksRequest) Reset() {
	*x = GetTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTasksRequest) ProtoMessage() {}

func (x *GetTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTasksRequest.ProtoReflect.Descriptor instead.
func (*GetTasksRequest) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_task_proto_rawDescGZIP(), []int{10}
}

func (x *GetTasksRequest) GetPaginator() *paginator.Paginator {
	if x != nil {
		return x.Paginator
	}
	return nil
}

func (x *GetTasksRequest) GetTaskId() uint64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *GetTasksRequest) GetTaskIds() []uint64 {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

func (x *GetTasksRequest) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetTasksRequest) GetWithLatestConfig() bool {
	if x != nil {
		return x.WithLatestConfig
	}
	return false
}

func (x *GetTasksRequest) GetWithTaskRun() bool {
	if x != nil {
		return x.WithTaskRun
	}
	return false
}

func (x *GetTasksRequest) GetWithJobConfig() bool {
	if x != nil {
		return x.WithJobConfig
	}
	return false
}

func (x *GetTasksRequest) GetWithProgress() bool {
	if x != nil {
		return x.WithProgress
	}
	return false
}

func (x *GetTasksRequest) GetForCopy() bool {
	if x != nil {
		return x.ForCopy
	}
	return false
}

func (x *GetTasksRequest) GetWithHidden() bool {
	if x != nil {
		return x.WithHidden
	}
	return false
}

func (x *GetTasksRequest) GetNoVersionInfo() bool {
	if x != nil {
		return x.NoVersionInfo
	}
	return false
}

func (x *GetTasksRequest) GetStatus() enums.Task_Status {
	if x != nil {
		return x.Status
	}
	return enums.Task_UNKNOWN_STATUS
}

func (x *GetTasksRequest) GetStatusIn() []uint64 {
	if x != nil {
		return x.StatusIn
	}
	return nil
}

func (x *GetTasksRequest) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *GetTasksRequest) GetType() enums.Job_Type {
	if x != nil {
		return x.Type
	}
	return enums.Job_UNKNOWN_TYPE
}

func (x *GetTasksRequest) GetCreateAfter() int64 {
	if x != nil {
		return x.CreateAfter
	}
	return 0
}

func (x *GetTasksRequest) GetCreateBefore() int64 {
	if x != nil {
		return x.CreateBefore
	}
	return 0
}

func (x *GetTasksRequest) GetOwnerPartyId() string {
	if x != nil {
		return x.OwnerPartyId
	}
	return ""
}

func (x *GetTasksRequest) GetOwnerUserIds() []uint64 {
	if x != nil {
		return x.OwnerUserIds
	}
	return nil
}

func (x *GetTasksRequest) GetFuzzyText() string {
	if x != nil {
		return x.FuzzyText
	}
	return ""
}

func (x *GetTasksRequest) GetFromPredict() bool {
	if x != nil {
		return x.FromPredict
	}
	return false
}

func (x *GetTasksRequest) GetMajorVersion() uint64 {
	if x != nil {
		return x.MajorVersion
	}
	return 0
}

func (x *GetTasksRequest) GetMinorVersion() uint64 {
	if x != nil {
		return x.MinorVersion
	}
	return 0
}

func (x *GetTasksRequest) GetClientPartyId() string {
	if x != nil {
		return x.ClientPartyId
	}
	return ""
}

func (x *GetTasksRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *GetTasksRequest) GetToTusita() string {
	if x != nil {
		return x.ToTusita
	}
	return ""
}

type GetTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*TaskResponse `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetTasksResponse) Reset() {
	*x = GetTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTasksResponse) ProtoMessage() {}

func (x *GetTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTasksResponse.ProtoReflect.Descriptor instead.
func (*GetTasksResponse) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_mpc_virtual_service_platform_task_proto_rawDescGZIP(), []int{11}
}

func (x *GetTasksResponse) GetData() []*TaskResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetTasksResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_sudo_protobuf_mpc_virtual_service_platform_task_proto protoreflect.FileDescriptor

var file_sudo_protobuf_mpc_virtual_service_platform_task_proto_rawDesc = []byte{
	0x0a, 0x35, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x73, 0x75, 0x64, 0x6f, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x3a, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x73, 0x75,
	0x64, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x70, 0x63, 0x5f,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x22, 0xbe, 0x01, 0x0a, 0x0b, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x57, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b,
	0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x5b, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x3a, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x40, 0x0a, 0x06, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x75,
	0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0x93, 0x01,
	0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x22, 0xa2, 0x05, 0x0a, 0x0a, 0x53, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x4b, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x69, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x12, 0x4e, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x53, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x1a, 0x51, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x70, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x61,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x71, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75,
	0x72, 0x6e, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe5, 0x02, 0x0a, 0x0b, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x5f, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53,
	0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x69,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0x57, 0x0a, 0x11, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xf1, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x61, 0x67, 0x2e, 0x4a, 0x6f,
	0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x44, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x62, 0x0a, 0x10, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f,
	0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x65, 0x66, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74,
	0x12, 0x40, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x15, 0x0a,
	0x06, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65,
	0x6e, 0x64, 0x54, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x74, 0x72, 0x1a, 0x5e, 0x0a, 0x14, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xcf, 0x06, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x38, 0x0a,
	0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73,
	0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x52, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x74, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x54, 0x73, 0x12, 0x15, 0x0a,
	0x06, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65,
	0x6e, 0x64, 0x54, 0x73, 0x12, 0x47, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x75, 0x64,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x65, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x62, 0x65, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x57, 0x0a,
	0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xc8, 0x3e, 0x01, 0x52, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x09,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x22, 0xdc, 0x07, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x03, 0xc0,
	0x3e, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x77, 0x69,
	0x74, 0x68, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22,
	0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x75, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x77, 0x69, 0x74,
	0x68, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x43, 0x6f, 0x70, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x77, 0x69, 0x74, 0x68, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x69, 0x6e,
	0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x6f, 0x5f, 0x74, 0x75, 0x73, 0x69, 0x74, 0x61, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x6f, 0x54, 0x75, 0x73, 0x69, 0x74, 0x61, 0x22, 0x67, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x75, 0x64,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x32, 0x5a, 0x30, 0x70, 0x72, 0x69, 0x76, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x70, 0x62,
	0x2f, 0x74, 0x61, 0x73, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sudo_protobuf_mpc_virtual_service_platform_task_proto_rawDescOnce sync.Once
	file_sudo_protobuf_mpc_virtual_service_platform_task_proto_rawDescData = file_sudo_protobuf_mpc_virtual_service_platform_task_proto_rawDesc
)

func file_sudo_protobuf_mpc_virtual_service_platform_task_proto_rawDescGZIP() []byte {
	file_sudo_protobuf_mpc_virtual_service_platform_task_proto_rawDescOnce.Do(func() {
		file_sudo_protobuf_mpc_virtual_service_platform_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_sudo_protobuf_mpc_virtual_service_platform_task_proto_rawDescData)
	})
	return file_sudo_protobuf_mpc_virtual_service_platform_task_proto_rawDescData
}

var file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_sudo_protobuf_mpc_virtual_service_platform_task_proto_goTypes = []interface{}{
	(*Graph)(nil),            // 0: sudo.protobuf.platform.task.Graph
	(*JobProgress)(nil),      // 1: sudo.protobuf.platform.task.JobProgress
	(*RequestItem)(nil),      // 2: sudo.protobuf.platform.task.RequestItem
	(*Resource)(nil),         // 3: sudo.protobuf.platform.task.Resource
	(*ResourceRequest)(nil),  // 4: sudo.protobuf.platform.task.ResourceRequest
	(*SiteConfig)(nil),       // 5: sudo.protobuf.platform.task.SiteConfig
	(*StageParams)(nil),      // 6: sudo.protobuf.platform.task.StageParams
	(*Stage)(nil),            // 7: sudo.protobuf.platform.task.Stage
	(*Task)(nil),             // 8: sudo.protobuf.platform.task.Task
	(*TaskResponse)(nil),     // 9: sudo.protobuf.platform.task.TaskResponse
	(*GetTasksRequest)(nil),  // 10: sudo.protobuf.platform.task.GetTasksRequest
	(*GetTasksResponse)(nil), // 11: sudo.protobuf.platform.task.GetTasksResponse
	nil,                      // 12: sudo.protobuf.platform.task.SiteConfig.ParamsEntry
	nil,                      // 13: sudo.protobuf.platform.task.SiteConfig.InputsEntry
	nil,                      // 14: sudo.protobuf.platform.task.SiteConfig.OutputsEntry
	nil,                      // 15: sudo.protobuf.platform.task.StageParams.SharedParamsEntry
	nil,                      // 16: sudo.protobuf.platform.task.Stage.HistoryProgressEntry
	(protobuf.UpdateProgressRequest_Category)(0), // 17: sudo.protobuf.infra_adapter.UpdateProgressRequest.Category
	(enums.Resource_Unit)(0),                     // 18: sudo.protobuf.enums.Resource.Unit
	(enums.Resource_RequestMode)(0),              // 19: sudo.protobuf.enums.Resource.RequestMode
	(enums.Stage_Type)(0),                        // 20: sudo.protobuf.enums.Stage.Type
	(enums.Dag_Job_Status)(0),                    // 21: sudo.protobuf.enums.Dag.Job.Status
	(enums.Task_Status)(0),                       // 22: sudo.protobuf.enums.Task.Status
	(enums.Job_Type)(0),                          // 23: sudo.protobuf.enums.Job.Type
	(enums.Job_ComputeMode)(0),                   // 24: sudo.protobuf.enums.Job.ComputeMode
	(*user.UserBase)(nil),                        // 25: sudo.protobuf.platform.user.UserBase
	(*paginator.Paginator)(nil),                  // 26: sudo.protobuf.platform.paginator.Paginator
	(*structpb.Value)(nil),                       // 27: google.protobuf.Value
	(*infra_adapter.FurnaceProperty)(nil),        // 28: sudo.protobuf.infra_adapter.location.FurnaceProperty
	(*structpb.ListValue)(nil),                   // 29: google.protobuf.ListValue
}
var file_sudo_protobuf_mpc_virtual_service_platform_task_proto_depIdxs = []int32{
	17, // 0: sudo.protobuf.platform.task.JobProgress.category:type_name -> sudo.protobuf.infra_adapter.UpdateProgressRequest.Category
	18, // 1: sudo.protobuf.platform.task.RequestItem.unit:type_name -> sudo.protobuf.enums.Resource.Unit
	2,  // 2: sudo.protobuf.platform.task.Resource.cpu:type_name -> sudo.protobuf.platform.task.RequestItem
	2,  // 3: sudo.protobuf.platform.task.Resource.memory:type_name -> sudo.protobuf.platform.task.RequestItem
	3,  // 4: sudo.protobuf.platform.task.ResourceRequest.resource:type_name -> sudo.protobuf.platform.task.Resource
	19, // 5: sudo.protobuf.platform.task.ResourceRequest.mode:type_name -> sudo.protobuf.enums.Resource.RequestMode
	12, // 6: sudo.protobuf.platform.task.SiteConfig.params:type_name -> sudo.protobuf.platform.task.SiteConfig.ParamsEntry
	4,  // 7: sudo.protobuf.platform.task.SiteConfig.resource_request:type_name -> sudo.protobuf.platform.task.ResourceRequest
	13, // 8: sudo.protobuf.platform.task.SiteConfig.inputs:type_name -> sudo.protobuf.platform.task.SiteConfig.InputsEntry
	14, // 9: sudo.protobuf.platform.task.SiteConfig.outputs:type_name -> sudo.protobuf.platform.task.SiteConfig.OutputsEntry
	15, // 10: sudo.protobuf.platform.task.StageParams.shared_params:type_name -> sudo.protobuf.platform.task.StageParams.SharedParamsEntry
	5,  // 11: sudo.protobuf.platform.task.StageParams.client_config:type_name -> sudo.protobuf.platform.task.SiteConfig
	5,  // 12: sudo.protobuf.platform.task.StageParams.server_configs:type_name -> sudo.protobuf.platform.task.SiteConfig
	20, // 13: sudo.protobuf.platform.task.Stage.stage_type:type_name -> sudo.protobuf.enums.Stage.Type
	21, // 14: sudo.protobuf.platform.task.Stage.status:type_name -> sudo.protobuf.enums.Dag.Job.Status
	1,  // 15: sudo.protobuf.platform.task.Stage.progress:type_name -> sudo.protobuf.platform.task.JobProgress
	16, // 16: sudo.protobuf.platform.task.Stage.history_progress:type_name -> sudo.protobuf.platform.task.Stage.HistoryProgressEntry
	6,  // 17: sudo.protobuf.platform.task.Stage.config:type_name -> sudo.protobuf.platform.task.StageParams
	0,  // 18: sudo.protobuf.platform.task.Task.graph:type_name -> sudo.protobuf.platform.task.Graph
	22, // 19: sudo.protobuf.platform.task.Task.status:type_name -> sudo.protobuf.enums.Task.Status
	23, // 20: sudo.protobuf.platform.task.Task.type:type_name -> sudo.protobuf.enums.Job.Type
	7,  // 21: sudo.protobuf.platform.task.Task.stages:type_name -> sudo.protobuf.platform.task.Stage
	24, // 22: sudo.protobuf.platform.task.Task.compute_mode:type_name -> sudo.protobuf.enums.Job.ComputeMode
	4,  // 23: sudo.protobuf.platform.task.Task.resource_request:type_name -> sudo.protobuf.platform.task.ResourceRequest
	8,  // 24: sudo.protobuf.platform.task.TaskResponse.base:type_name -> sudo.protobuf.platform.task.Task
	25, // 25: sudo.protobuf.platform.task.TaskResponse.owner_user:type_name -> sudo.protobuf.platform.user.UserBase
	26, // 26: sudo.protobuf.platform.task.GetTasksRequest.paginator:type_name -> sudo.protobuf.platform.paginator.Paginator
	22, // 27: sudo.protobuf.platform.task.GetTasksRequest.status:type_name -> sudo.protobuf.enums.Task.Status
	23, // 28: sudo.protobuf.platform.task.GetTasksRequest.type:type_name -> sudo.protobuf.enums.Job.Type
	9,  // 29: sudo.protobuf.platform.task.GetTasksResponse.data:type_name -> sudo.protobuf.platform.task.TaskResponse
	27, // 30: sudo.protobuf.platform.task.SiteConfig.ParamsEntry.value:type_name -> google.protobuf.Value
	28, // 31: sudo.protobuf.platform.task.SiteConfig.InputsEntry.value:type_name -> sudo.protobuf.infra_adapter.location.FurnaceProperty
	28, // 32: sudo.protobuf.platform.task.SiteConfig.OutputsEntry.value:type_name -> sudo.protobuf.infra_adapter.location.FurnaceProperty
	27, // 33: sudo.protobuf.platform.task.StageParams.SharedParamsEntry.value:type_name -> google.protobuf.Value
	29, // 34: sudo.protobuf.platform.task.Stage.HistoryProgressEntry.value:type_name -> google.protobuf.ListValue
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_sudo_protobuf_mpc_virtual_service_platform_task_proto_init() }
func file_sudo_protobuf_mpc_virtual_service_platform_task_proto_init() {
	if File_sudo_protobuf_mpc_virtual_service_platform_task_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SiteConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sudo_protobuf_mpc_virtual_service_platform_task_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sudo_protobuf_mpc_virtual_service_platform_task_proto_goTypes,
		DependencyIndexes: file_sudo_protobuf_mpc_virtual_service_platform_task_proto_depIdxs,
		MessageInfos:      file_sudo_protobuf_mpc_virtual_service_platform_task_proto_msgTypes,
	}.Build()
	File_sudo_protobuf_mpc_virtual_service_platform_task_proto = out.File
	file_sudo_protobuf_mpc_virtual_service_platform_task_proto_rawDesc = nil
	file_sudo_protobuf_mpc_virtual_service_platform_task_proto_goTypes = nil
	file_sudo_protobuf_mpc_virtual_service_platform_task_proto_depIdxs = nil
}
