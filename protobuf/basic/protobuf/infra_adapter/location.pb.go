// Copyright 2022 Sudo Technology Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.1
// source: sudo/protobuf/infra_adapter/location/location.proto

package infra_adapter

import (
	enums "github.com/sudo-privacy/sudo-sdk-go/protobuf/basic/protobuf/enums"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FileMetaData_FileType int32

const (
	FileMetaData_Unspecified FileMetaData_FileType = 0
	FileMetaData_Csv         FileMetaData_FileType = 1 // Parquet = 2;
)

// Enum value maps for FileMetaData_FileType.
var (
	FileMetaData_FileType_name = map[int32]string{
		0: "Unspecified",
		1: "Csv",
	}
	FileMetaData_FileType_value = map[string]int32{
		"Unspecified": 0,
		"Csv":         1,
	}
)

func (x FileMetaData_FileType) Enum() *FileMetaData_FileType {
	p := new(FileMetaData_FileType)
	*p = x
	return p
}

func (x FileMetaData_FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileMetaData_FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_protobuf_infra_adapter_location_location_proto_enumTypes[0].Descriptor()
}

func (FileMetaData_FileType) Type() protoreflect.EnumType {
	return &file_sudo_protobuf_infra_adapter_location_location_proto_enumTypes[0]
}

func (x FileMetaData_FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileMetaData_FileType.Descriptor instead.
func (FileMetaData_FileType) EnumDescriptor() ([]byte, []int) {
	return file_sudo_protobuf_infra_adapter_location_location_proto_rawDescGZIP(), []int{0, 0}
}

type MetaData_FileType int32

const (
	MetaData_Unspecified MetaData_FileType = 0
	MetaData_Csv         MetaData_FileType = 1 // Parquet = 2;
)

// Enum value maps for MetaData_FileType.
var (
	MetaData_FileType_name = map[int32]string{
		0: "Unspecified",
		1: "Csv",
	}
	MetaData_FileType_value = map[string]int32{
		"Unspecified": 0,
		"Csv":         1,
	}
)

func (x MetaData_FileType) Enum() *MetaData_FileType {
	p := new(MetaData_FileType)
	*p = x
	return p
}

func (x MetaData_FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetaData_FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_protobuf_infra_adapter_location_location_proto_enumTypes[1].Descriptor()
}

func (MetaData_FileType) Type() protoreflect.EnumType {
	return &file_sudo_protobuf_infra_adapter_location_location_proto_enumTypes[1]
}

func (x MetaData_FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetaData_FileType.Descriptor instead.
func (MetaData_FileType) EnumDescriptor() ([]byte, []int) {
	return file_sudo_protobuf_infra_adapter_location_location_proto_rawDescGZIP(), []int{5, 0}
}

// non_exhausive
type ColumnMetaData_DataType int32

const (
	ColumnMetaData_Unspecified ColumnMetaData_DataType = 0
	ColumnMetaData_Int         ColumnMetaData_DataType = 1
	ColumnMetaData_Float       ColumnMetaData_DataType = 2
	ColumnMetaData_String      ColumnMetaData_DataType = 3
	ColumnMetaData_Date        ColumnMetaData_DataType = 4
)

// Enum value maps for ColumnMetaData_DataType.
var (
	ColumnMetaData_DataType_name = map[int32]string{
		0: "Unspecified",
		1: "Int",
		2: "Float",
		3: "String",
		4: "Date",
	}
	ColumnMetaData_DataType_value = map[string]int32{
		"Unspecified": 0,
		"Int":         1,
		"Float":       2,
		"String":      3,
		"Date":        4,
	}
)

func (x ColumnMetaData_DataType) Enum() *ColumnMetaData_DataType {
	p := new(ColumnMetaData_DataType)
	*p = x
	return p
}

func (x ColumnMetaData_DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnMetaData_DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_protobuf_infra_adapter_location_location_proto_enumTypes[2].Descriptor()
}

func (ColumnMetaData_DataType) Type() protoreflect.EnumType {
	return &file_sudo_protobuf_infra_adapter_location_location_proto_enumTypes[2]
}

func (x ColumnMetaData_DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColumnMetaData_DataType.Descriptor instead.
func (ColumnMetaData_DataType) EnumDescriptor() ([]byte, []int) {
	return file_sudo_protobuf_infra_adapter_location_location_proto_rawDescGZIP(), []int{6, 0}
}

type FileMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// for debugging. furnace may provide a way to input this.
	AdditionalConfigs map[string]string     `protobuf:"bytes,1,rep,name=additional_configs,json=additionalConfigs,proto3" json:"additional_configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FileType          FileMetaData_FileType `protobuf:"varint,2,opt,name=file_type,json=fileType,proto3,enum=sudo.protobuf.infra_adapter.location.FileMetaData_FileType" json:"file_type,omitempty"`
	TableSelectedCols []string              `protobuf:"bytes,3,rep,name=table_selected_cols,json=tableSelectedCols,proto3" json:"table_selected_cols,omitempty"`
	// actually uint8
	CsvSeparator uint32 `protobuf:"varint,4,opt,name=csv_separator,json=csvSeparator,proto3" json:"csv_separator,omitempty"`
}

func (x *FileMetaData) Reset() {
	*x = FileMetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMetaData) ProtoMessage() {}

func (x *FileMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMetaData.ProtoReflect.Descriptor instead.
func (*FileMetaData) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_infra_adapter_location_location_proto_rawDescGZIP(), []int{0}
}

func (x *FileMetaData) GetAdditionalConfigs() map[string]string {
	if x != nil {
		return x.AdditionalConfigs
	}
	return nil
}

func (x *FileMetaData) GetFileType() FileMetaData_FileType {
	if x != nil {
		return x.FileType
	}
	return FileMetaData_Unspecified
}

func (x *FileMetaData) GetTableSelectedCols() []string {
	if x != nil {
		return x.TableSelectedCols
	}
	return nil
}

func (x *FileMetaData) GetCsvSeparator() uint32 {
	if x != nil {
		return x.CsvSeparator
	}
	return 0
}

type UpstreamV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of each stepï¼Œunique in canvas
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// m-th party in current step
	InnerId uint64 `protobuf:"varint,2,opt,name=inner_id,json=innerId,proto3" json:"inner_id,omitempty"`
	// n-th key for current party
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// supplemented by back end: k-th execution of the step
	JobId uint64 `protobuf:"varint,4,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *UpstreamV2) Reset() {
	*x = UpstreamV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpstreamV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamV2) ProtoMessage() {}

func (x *UpstreamV2) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpstreamV2.ProtoReflect.Descriptor instead.
func (*UpstreamV2) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_infra_adapter_location_location_proto_rawDescGZIP(), []int{1}
}

func (x *UpstreamV2) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *UpstreamV2) GetInnerId() uint64 {
	if x != nil {
		return x.InnerId
	}
	return 0
}

func (x *UpstreamV2) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UpstreamV2) GetJobId() uint64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

type VtableWithPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path      string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DatasrcId uint64 `protobuf:"varint,3,opt,name=datasrc_id,json=datasrcId,proto3" json:"datasrc_id,omitempty"`
	// only useful when datasrc_id == 0
	DatasrcName string `protobuf:"bytes,4,opt,name=datasrc_name,json=datasrcName,proto3" json:"datasrc_name,omitempty"`
}

func (x *VtableWithPath) Reset() {
	*x = VtableWithPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VtableWithPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VtableWithPath) ProtoMessage() {}

func (x *VtableWithPath) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VtableWithPath.ProtoReflect.Descriptor instead.
func (*VtableWithPath) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_infra_adapter_location_location_proto_rawDescGZIP(), []int{2}
}

func (x *VtableWithPath) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *VtableWithPath) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VtableWithPath) GetDatasrcId() uint64 {
	if x != nil {
		return x.DatasrcId
	}
	return 0
}

func (x *VtableWithPath) GetDatasrcName() string {
	if x != nil {
		return x.DatasrcName
	}
	return ""
}

type FurnaceProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// its datasrc id if type == upstream
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// upstream_info only useful if type == upstream,
	UpstreamInfo string `protobuf:"bytes,3,opt,name=upstream_info,json=upstreamInfo,proto3" json:"upstream_info,omitempty"`
	// selected columns in the vtable
	SelectedVtableCols []string `protobuf:"bytes,4,rep,name=selected_vtable_cols,json=selectedVtableCols,proto3" json:"selected_vtable_cols,omitempty"`
	// self-defining uri if type == datauri
	Datauri    string      `protobuf:"bytes,5,opt,name=datauri,proto3" json:"datauri,omitempty"`
	UpstreamV2 *UpstreamV2 `protobuf:"bytes,6,opt,name=upstream_v2,json=upstreamV2,proto3" json:"upstream_v2,omitempty"`
	// only useful when type == vtable and id == 0
	VtableWithPath *VtableWithPath `protobuf:"bytes,7,opt,name=vtable_with_path,json=vtableWithPath,proto3" json:"vtable_with_path,omitempty"`
}

func (x *FurnaceProperty) Reset() {
	*x = FurnaceProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FurnaceProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FurnaceProperty) ProtoMessage() {}

func (x *FurnaceProperty) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FurnaceProperty.ProtoReflect.Descriptor instead.
func (*FurnaceProperty) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_infra_adapter_location_location_proto_rawDescGZIP(), []int{3}
}

func (x *FurnaceProperty) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FurnaceProperty) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FurnaceProperty) GetUpstreamInfo() string {
	if x != nil {
		return x.UpstreamInfo
	}
	return ""
}

func (x *FurnaceProperty) GetSelectedVtableCols() []string {
	if x != nil {
		return x.SelectedVtableCols
	}
	return nil
}

func (x *FurnaceProperty) GetDatauri() string {
	if x != nil {
		return x.Datauri
	}
	return ""
}

func (x *FurnaceProperty) GetUpstreamV2() *UpstreamV2 {
	if x != nil {
		return x.UpstreamV2
	}
	return nil
}

func (x *FurnaceProperty) GetVtableWithPath() *VtableWithPath {
	if x != nil {
		return x.VtableWithPath
	}
	return nil
}

type DataLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// data is for operator usage, furnace property is used to track
	// corresponding
	//
	// Types that are assignable to Data:
	//	*DataLocation_LocalFile
	//	*DataLocation_DbTable
	//	*DataLocation_Memory_
	Data            isDataLocation_Data `protobuf_oneof:"data"`
	FurnaceProperty *FurnaceProperty    `protobuf:"bytes,4,opt,name=furnace_property,json=furnaceProperty,proto3" json:"furnace_property,omitempty"`
	IsTmpData       bool                `protobuf:"varint,5,opt,name=is_tmp_data,json=isTmpData,proto3" json:"is_tmp_data,omitempty"`
	Metadata        *MetaData           `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *DataLocation) Reset() {
	*x = DataLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataLocation) ProtoMessage() {}

func (x *DataLocation) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataLocation.ProtoReflect.Descriptor instead.
func (*DataLocation) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_infra_adapter_location_location_proto_rawDescGZIP(), []int{4}
}

func (m *DataLocation) GetData() isDataLocation_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *DataLocation) GetLocalFile() *DataLocation_File {
	if x, ok := x.GetData().(*DataLocation_LocalFile); ok {
		return x.LocalFile
	}
	return nil
}

func (x *DataLocation) GetDbTable() *DataLocation_DB {
	if x, ok := x.GetData().(*DataLocation_DbTable); ok {
		return x.DbTable
	}
	return nil
}

func (x *DataLocation) GetMemory() *DataLocation_Memory {
	if x, ok := x.GetData().(*DataLocation_Memory_); ok {
		return x.Memory
	}
	return nil
}

func (x *DataLocation) GetFurnaceProperty() *FurnaceProperty {
	if x != nil {
		return x.FurnaceProperty
	}
	return nil
}

func (x *DataLocation) GetIsTmpData() bool {
	if x != nil {
		return x.IsTmpData
	}
	return false
}

func (x *DataLocation) GetMetadata() *MetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type isDataLocation_Data interface {
	isDataLocation_Data()
}

type DataLocation_LocalFile struct {
	LocalFile *DataLocation_File `protobuf:"bytes,1,opt,name=local_file,json=localFile,proto3,oneof"`
}

type DataLocation_DbTable struct {
	DbTable *DataLocation_DB `protobuf:"bytes,2,opt,name=db_table,json=dbTable,proto3,oneof"`
}

type DataLocation_Memory_ struct {
	Memory *DataLocation_Memory `protobuf:"bytes,3,opt,name=memory,proto3,oneof"` // Todo
}

func (*DataLocation_LocalFile) isDataLocation_Data() {}

func (*DataLocation_DbTable) isDataLocation_Data() {}

func (*DataLocation_Memory_) isDataLocation_Data() {}

type MetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// for debugging. furnace may provide a way to input this.
	AdditionalConfigs map[string]string `protobuf:"bytes,1,rep,name=additional_configs,json=additionalConfigs,proto3" json:"additional_configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FileType          MetaData_FileType `protobuf:"varint,2,opt,name=file_type,json=fileType,proto3,enum=sudo.protobuf.infra_adapter.location.MetaData_FileType" json:"file_type,omitempty"`
	TableSelectedCols []string          `protobuf:"bytes,3,rep,name=table_selected_cols,json=tableSelectedCols,proto3" json:"table_selected_cols,omitempty"`
	// actually uint8
	// 0 means using comma
	CsvSeparator uint32 `protobuf:"varint,4,opt,name=csv_separator,json=csvSeparator,proto3" json:"csv_separator,omitempty"`
	// Do not try to guess a column's type
	// e.g. When reading csv, all columns' type will be string
	TableNoInferSchema bool `protobuf:"varint,5,opt,name=table_no_infer_schema,json=tableNoInferSchema,proto3" json:"table_no_infer_schema,omitempty"`
	// A (partial) schema to help determine column type
	// may not include all columns
	TableSchema map[string]*ColumnMetaData `protobuf:"bytes,6,rep,name=table_schema,json=tableSchema,proto3" json:"table_schema,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MetaData) Reset() {
	*x = MetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaData) ProtoMessage() {}

func (x *MetaData) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaData.ProtoReflect.Descriptor instead.
func (*MetaData) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_infra_adapter_location_location_proto_rawDescGZIP(), []int{5}
}

func (x *MetaData) GetAdditionalConfigs() map[string]string {
	if x != nil {
		return x.AdditionalConfigs
	}
	return nil
}

func (x *MetaData) GetFileType() MetaData_FileType {
	if x != nil {
		return x.FileType
	}
	return MetaData_Unspecified
}

func (x *MetaData) GetTableSelectedCols() []string {
	if x != nil {
		return x.TableSelectedCols
	}
	return nil
}

func (x *MetaData) GetCsvSeparator() uint32 {
	if x != nil {
		return x.CsvSeparator
	}
	return 0
}

func (x *MetaData) GetTableNoInferSchema() bool {
	if x != nil {
		return x.TableNoInferSchema
	}
	return false
}

func (x *MetaData) GetTableSchema() map[string]*ColumnMetaData {
	if x != nil {
		return x.TableSchema
	}
	return nil
}

type ColumnMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datatype ColumnMetaData_DataType `protobuf:"varint,1,opt,name=datatype,proto3,enum=sudo.protobuf.infra_adapter.location.ColumnMetaData_DataType" json:"datatype,omitempty"`
	// default "YYYY-MM-DD"
	DateFormat string `protobuf:"bytes,2,opt,name=date_format,json=dateFormat,proto3" json:"date_format,omitempty"`
	// mostly affect reports.json
	// TODO: feed this info back when complete_stage
	Alias string `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *ColumnMetaData) Reset() {
	*x = ColumnMetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnMetaData) ProtoMessage() {}

func (x *ColumnMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnMetaData.ProtoReflect.Descriptor instead.
func (*ColumnMetaData) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_infra_adapter_location_location_proto_rawDescGZIP(), []int{6}
}

func (x *ColumnMetaData) GetDatatype() ColumnMetaData_DataType {
	if x != nil {
		return x.Datatype
	}
	return ColumnMetaData_Unspecified
}

func (x *ColumnMetaData) GetDateFormat() string {
	if x != nil {
		return x.DateFormat
	}
	return ""
}

func (x *ColumnMetaData) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

type DataLocation_File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path is a relative file path, need root path from data source info to build a complete file path.
	Path           string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	VtableId       uint64 `protobuf:"varint,2,opt,name=vtable_id,json=vtableId,proto3" json:"vtable_id,omitempty"`
	DataSourceName string `protobuf:"bytes,3,opt,name=data_source_name,json=dataSourceName,proto3" json:"data_source_name,omitempty"`
	// deprecated
	//
	// Deprecated: Do not use.
	XDeprecatedSelectedCols []string `protobuf:"bytes,4,rep,name=_deprecated_selected_cols,json=DeprecatedSelectedCols,proto3" json:"_deprecated_selected_cols,omitempty"`
	// deprecated: merged to upper levels
	//
	// Deprecated: Do not use.
	Metadata *FileMetaData `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Full path to locate a file. don't need data source info to complete the path. You can locate a file either by path and data source name or full_path.
	FullPath string `protobuf:"bytes,6,opt,name=full_path,json=fullPath,proto3" json:"full_path,omitempty"`
}

func (x *DataLocation_File) Reset() {
	*x = DataLocation_File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataLocation_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataLocation_File) ProtoMessage() {}

func (x *DataLocation_File) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataLocation_File.ProtoReflect.Descriptor instead.
func (*DataLocation_File) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_infra_adapter_location_location_proto_rawDescGZIP(), []int{4, 0}
}

func (x *DataLocation_File) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DataLocation_File) GetVtableId() uint64 {
	if x != nil {
		return x.VtableId
	}
	return 0
}

func (x *DataLocation_File) GetDataSourceName() string {
	if x != nil {
		return x.DataSourceName
	}
	return ""
}

// Deprecated: Do not use.
func (x *DataLocation_File) GetXDeprecatedSelectedCols() []string {
	if x != nil {
		return x.XDeprecatedSelectedCols
	}
	return nil
}

// Deprecated: Do not use.
func (x *DataLocation_File) GetMetadata() *FileMetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DataLocation_File) GetFullPath() string {
	if x != nil {
		return x.FullPath
	}
	return ""
}

type DataLocation_Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path         string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	SelectedCols []string `protobuf:"bytes,2,rep,name=selected_cols,json=selectedCols,proto3" json:"selected_cols,omitempty"`
}

func (x *DataLocation_Table) Reset() {
	*x = DataLocation_Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataLocation_Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataLocation_Table) ProtoMessage() {}

func (x *DataLocation_Table) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataLocation_Table.ProtoReflect.Descriptor instead.
func (*DataLocation_Table) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_infra_adapter_location_location_proto_rawDescGZIP(), []int{4, 1}
}

func (x *DataLocation_Table) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DataLocation_Table) GetSelectedCols() []string {
	if x != nil {
		return x.SelectedCols
	}
	return nil
}

type DataLocation_ODBCConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection     string `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
	DataSourceType int32  `protobuf:"varint,2,opt,name=data_source_type,json=dataSourceType,proto3" json:"data_source_type,omitempty"`
}

func (x *DataLocation_ODBCConnection) Reset() {
	*x = DataLocation_ODBCConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataLocation_ODBCConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataLocation_ODBCConnection) ProtoMessage() {}

func (x *DataLocation_ODBCConnection) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataLocation_ODBCConnection.ProtoReflect.Descriptor instead.
func (*DataLocation_ODBCConnection) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_infra_adapter_location_location_proto_rawDescGZIP(), []int{4, 2}
}

func (x *DataLocation_ODBCConnection) GetConnection() string {
	if x != nil {
		return x.Connection
	}
	return ""
}

func (x *DataLocation_ODBCConnection) GetDataSourceType() int32 {
	if x != nil {
		return x.DataSourceType
	}
	return 0
}

type DataLocation_General struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *DataLocation_General) Reset() {
	*x = DataLocation_General{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataLocation_General) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataLocation_General) ProtoMessage() {}

func (x *DataLocation_General) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataLocation_General.ProtoReflect.Descriptor instead.
func (*DataLocation_General) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_infra_adapter_location_location_proto_rawDescGZIP(), []int{4, 3}
}

func (x *DataLocation_General) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DataLocation_General) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type DataLocation_Kerberos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Principal           string `protobuf:"bytes,1,opt,name=principal,proto3" json:"principal,omitempty"`
	Krb5Path            string `protobuf:"bytes,2,opt,name=krb5_path,json=krb5Path,proto3" json:"krb5_path,omitempty"`
	KeytabPath          string `protobuf:"bytes,3,opt,name=keytab_path,json=keytabPath,proto3" json:"keytab_path,omitempty"`
	HiveServerPrincipal string `protobuf:"bytes,4,opt,name=hive_server_principal,json=hiveServerPrincipal,proto3" json:"hive_server_principal,omitempty"`
	HdfsServerPrincipal string `protobuf:"bytes,5,opt,name=hdfs_server_principal,json=hdfsServerPrincipal,proto3" json:"hdfs_server_principal,omitempty"`
}

func (x *DataLocation_Kerberos) Reset() {
	*x = DataLocation_Kerberos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataLocation_Kerberos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataLocation_Kerberos) ProtoMessage() {}

func (x *DataLocation_Kerberos) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataLocation_Kerberos.ProtoReflect.Descriptor instead.
func (*DataLocation_Kerberos) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_infra_adapter_location_location_proto_rawDescGZIP(), []int{4, 4}
}

func (x *DataLocation_Kerberos) GetPrincipal() string {
	if x != nil {
		return x.Principal
	}
	return ""
}

func (x *DataLocation_Kerberos) GetKrb5Path() string {
	if x != nil {
		return x.Krb5Path
	}
	return ""
}

func (x *DataLocation_Kerberos) GetKeytabPath() string {
	if x != nil {
		return x.KeytabPath
	}
	return ""
}

func (x *DataLocation_Kerberos) GetHiveServerPrincipal() string {
	if x != nil {
		return x.HiveServerPrincipal
	}
	return ""
}

func (x *DataLocation_Kerberos) GetHdfsServerPrincipal() string {
	if x != nil {
		return x.HdfsServerPrincipal
	}
	return ""
}

type DataLocation_HdfsConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri           string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Username      string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	UploadDir     string `protobuf:"bytes,3,opt,name=upload_dir,json=uploadDir,proto3" json:"upload_dir,omitempty"`
	RpcProtection string `protobuf:"bytes,4,opt,name=rpc_protection,json=rpcProtection,proto3" json:"rpc_protection,omitempty"`
}

func (x *DataLocation_HdfsConf) Reset() {
	*x = DataLocation_HdfsConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataLocation_HdfsConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataLocation_HdfsConf) ProtoMessage() {}

func (x *DataLocation_HdfsConf) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataLocation_HdfsConf.ProtoReflect.Descriptor instead.
func (*DataLocation_HdfsConf) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_infra_adapter_location_location_proto_rawDescGZIP(), []int{4, 5}
}

func (x *DataLocation_HdfsConf) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *DataLocation_HdfsConf) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DataLocation_HdfsConf) GetUploadDir() string {
	if x != nil {
		return x.UploadDir
	}
	return ""
}

func (x *DataLocation_HdfsConf) GetRpcProtection() string {
	if x != nil {
		return x.RpcProtection
	}
	return ""
}

// FullConnectionInfo, full info to connect a dataSource.
type DataLocation_FullConnectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionName string                `protobuf:"bytes,1,opt,name=connection_name,json=connectionName,proto3" json:"connection_name,omitempty"`
	Host           string                `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port           int64                 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	DbName         string                `protobuf:"bytes,4,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	DatasourceType enums.Datasource_Type `protobuf:"varint,5,opt,name=datasource_type,json=datasourceType,proto3,enum=sudo.protobuf.enums.Datasource_Type" json:"datasource_type,omitempty"`
	// Types that are assignable to Authorization:
	//	*DataLocation_FullConnectionInfo_General
	//	*DataLocation_FullConnectionInfo_Kerberos
	Authorization isDataLocation_FullConnectionInfo_Authorization `protobuf_oneof:"authorization"`
	// for hive write. TODO: remove
	HdfsConf *DataLocation_HdfsConf `protobuf:"bytes,8,opt,name=hdfs_conf,json=hdfsConf,proto3" json:"hdfs_conf,omitempty"`
}

func (x *DataLocation_FullConnectionInfo) Reset() {
	*x = DataLocation_FullConnectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataLocation_FullConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataLocation_FullConnectionInfo) ProtoMessage() {}

func (x *DataLocation_FullConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataLocation_FullConnectionInfo.ProtoReflect.Descriptor instead.
func (*DataLocation_FullConnectionInfo) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_infra_adapter_location_location_proto_rawDescGZIP(), []int{4, 6}
}

func (x *DataLocation_FullConnectionInfo) GetConnectionName() string {
	if x != nil {
		return x.ConnectionName
	}
	return ""
}

func (x *DataLocation_FullConnectionInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DataLocation_FullConnectionInfo) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DataLocation_FullConnectionInfo) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *DataLocation_FullConnectionInfo) GetDatasourceType() enums.Datasource_Type {
	if x != nil {
		return x.DatasourceType
	}
	return enums.Datasource_UNKNOWN
}

func (m *DataLocation_FullConnectionInfo) GetAuthorization() isDataLocation_FullConnectionInfo_Authorization {
	if m != nil {
		return m.Authorization
	}
	return nil
}

func (x *DataLocation_FullConnectionInfo) GetGeneral() *DataLocation_General {
	if x, ok := x.GetAuthorization().(*DataLocation_FullConnectionInfo_General); ok {
		return x.General
	}
	return nil
}

func (x *DataLocation_FullConnectionInfo) GetKerberos() *DataLocation_Kerberos {
	if x, ok := x.GetAuthorization().(*DataLocation_FullConnectionInfo_Kerberos); ok {
		return x.Kerberos
	}
	return nil
}

func (x *DataLocation_FullConnectionInfo) GetHdfsConf() *DataLocation_HdfsConf {
	if x != nil {
		return x.HdfsConf
	}
	return nil
}

type isDataLocation_FullConnectionInfo_Authorization interface {
	isDataLocation_FullConnectionInfo_Authorization()
}

type DataLocation_FullConnectionInfo_General struct {
	General *DataLocation_General `protobuf:"bytes,6,opt,name=general,proto3,oneof"`
}

type DataLocation_FullConnectionInfo_Kerberos struct {
	Kerberos *DataLocation_Kerberos `protobuf:"bytes,7,opt,name=kerberos,proto3,oneof"`
}

func (*DataLocation_FullConnectionInfo_General) isDataLocation_FullConnectionInfo_Authorization() {}

func (*DataLocation_FullConnectionInfo_Kerberos) isDataLocation_FullConnectionInfo_Authorization() {}

type DataLocation_DBConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Connection:
	//	*DataLocation_DBConnection_DataSourceName
	//	*DataLocation_DBConnection_OdbcConnection
	//	*DataLocation_DBConnection_FullConnection
	Connection isDataLocation_DBConnection_Connection `protobuf_oneof:"connection"`
}

func (x *DataLocation_DBConnection) Reset() {
	*x = DataLocation_DBConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataLocation_DBConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataLocation_DBConnection) ProtoMessage() {}

func (x *DataLocation_DBConnection) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataLocation_DBConnection.ProtoReflect.Descriptor instead.
func (*DataLocation_DBConnection) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_infra_adapter_location_location_proto_rawDescGZIP(), []int{4, 7}
}

func (m *DataLocation_DBConnection) GetConnection() isDataLocation_DBConnection_Connection {
	if m != nil {
		return m.Connection
	}
	return nil
}

func (x *DataLocation_DBConnection) GetDataSourceName() string {
	if x, ok := x.GetConnection().(*DataLocation_DBConnection_DataSourceName); ok {
		return x.DataSourceName
	}
	return ""
}

func (x *DataLocation_DBConnection) GetOdbcConnection() *DataLocation_ODBCConnection {
	if x, ok := x.GetConnection().(*DataLocation_DBConnection_OdbcConnection); ok {
		return x.OdbcConnection
	}
	return nil
}

func (x *DataLocation_DBConnection) GetFullConnection() *DataLocation_FullConnectionInfo {
	if x, ok := x.GetConnection().(*DataLocation_DBConnection_FullConnection); ok {
		return x.FullConnection
	}
	return nil
}

type isDataLocation_DBConnection_Connection interface {
	isDataLocation_DBConnection_Connection()
}

type DataLocation_DBConnection_DataSourceName struct {
	DataSourceName string `protobuf:"bytes,1,opt,name=data_source_name,json=dataSourceName,proto3,oneof"`
}

type DataLocation_DBConnection_OdbcConnection struct {
	OdbcConnection *DataLocation_ODBCConnection `protobuf:"bytes,2,opt,name=odbc_connection,json=odbcConnection,proto3,oneof"`
}

type DataLocation_DBConnection_FullConnection struct {
	FullConnection *DataLocation_FullConnectionInfo `protobuf:"bytes,3,opt,name=full_connection,json=fullConnection,proto3,oneof"`
}

func (*DataLocation_DBConnection_DataSourceName) isDataLocation_DBConnection_Connection() {}

func (*DataLocation_DBConnection_OdbcConnection) isDataLocation_DBConnection_Connection() {}

func (*DataLocation_DBConnection_FullConnection) isDataLocation_DBConnection_Connection() {}

type DataLocation_DB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// data source name is an identifier to get db settings from odbc.ini config file.
	// it's deprecated now, use connection instead.
	//
	// Deprecated: Do not use.
	DataSourceName string `protobuf:"bytes,1,opt,name=data_source_name,json=dataSourceName,proto3" json:"data_source_name,omitempty"`
	// Types that are assignable to Path:
	//	*DataLocation_DB_Query
	//	*DataLocation_DB_Table
	Path     isDataLocation_DB_Path `protobuf_oneof:"path"`
	VtableId uint64                 `protobuf:"varint,4,opt,name=vtable_id,json=vtableId,proto3" json:"vtable_id,omitempty"`
	// Types that are assignable to Connection:
	//	*DataLocation_DB_Dsn
	//	*DataLocation_DB_OdbcConnection
	Connection   isDataLocation_DB_Connection `protobuf_oneof:"connection"`
	DbConnection *DataLocation_DBConnection   `protobuf:"bytes,7,opt,name=db_connection,json=dbConnection,proto3" json:"db_connection,omitempty"`
}

func (x *DataLocation_DB) Reset() {
	*x = DataLocation_DB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataLocation_DB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataLocation_DB) ProtoMessage() {}

func (x *DataLocation_DB) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataLocation_DB.ProtoReflect.Descriptor instead.
func (*DataLocation_DB) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_infra_adapter_location_location_proto_rawDescGZIP(), []int{4, 8}
}

// Deprecated: Do not use.
func (x *DataLocation_DB) GetDataSourceName() string {
	if x != nil {
		return x.DataSourceName
	}
	return ""
}

func (m *DataLocation_DB) GetPath() isDataLocation_DB_Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (x *DataLocation_DB) GetQuery() string {
	if x, ok := x.GetPath().(*DataLocation_DB_Query); ok {
		return x.Query
	}
	return ""
}

func (x *DataLocation_DB) GetTable() *DataLocation_Table {
	if x, ok := x.GetPath().(*DataLocation_DB_Table); ok {
		return x.Table
	}
	return nil
}

func (x *DataLocation_DB) GetVtableId() uint64 {
	if x != nil {
		return x.VtableId
	}
	return 0
}

func (m *DataLocation_DB) GetConnection() isDataLocation_DB_Connection {
	if m != nil {
		return m.Connection
	}
	return nil
}

func (x *DataLocation_DB) GetDsn() string {
	if x, ok := x.GetConnection().(*DataLocation_DB_Dsn); ok {
		return x.Dsn
	}
	return ""
}

func (x *DataLocation_DB) GetOdbcConnection() *DataLocation_ODBCConnection {
	if x, ok := x.GetConnection().(*DataLocation_DB_OdbcConnection); ok {
		return x.OdbcConnection
	}
	return nil
}

func (x *DataLocation_DB) GetDbConnection() *DataLocation_DBConnection {
	if x != nil {
		return x.DbConnection
	}
	return nil
}

type isDataLocation_DB_Path interface {
	isDataLocation_DB_Path()
}

type DataLocation_DB_Query struct {
	Query string `protobuf:"bytes,2,opt,name=query,proto3,oneof"` // for input
}

type DataLocation_DB_Table struct {
	Table *DataLocation_Table `protobuf:"bytes,3,opt,name=table,proto3,oneof"` // for output
}

func (*DataLocation_DB_Query) isDataLocation_DB_Path() {}

func (*DataLocation_DB_Table) isDataLocation_DB_Path() {}

type isDataLocation_DB_Connection interface {
	isDataLocation_DB_Connection()
}

type DataLocation_DB_Dsn struct {
	Dsn string `protobuf:"bytes,5,opt,name=dsn,proto3,oneof"`
}

type DataLocation_DB_OdbcConnection struct {
	OdbcConnection *DataLocation_ODBCConnection `protobuf:"bytes,6,opt,name=odbc_connection,json=odbcConnection,proto3,oneof"`
}

func (*DataLocation_DB_Dsn) isDataLocation_DB_Connection() {}

func (*DataLocation_DB_OdbcConnection) isDataLocation_DB_Connection() {}

type DataLocation_Memory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorIndex uint64   `protobuf:"varint,1,opt,name=operator_index,json=operatorIndex,proto3" json:"operator_index,omitempty"`
	Key           string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	SelectedCols  []string `protobuf:"bytes,4,rep,name=selected_cols,json=selectedCols,proto3" json:"selected_cols,omitempty"`
}

func (x *DataLocation_Memory) Reset() {
	*x = DataLocation_Memory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataLocation_Memory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataLocation_Memory) ProtoMessage() {}

func (x *DataLocation_Memory) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataLocation_Memory.ProtoReflect.Descriptor instead.
func (*DataLocation_Memory) Descriptor() ([]byte, []int) {
	return file_sudo_protobuf_infra_adapter_location_location_proto_rawDescGZIP(), []int{4, 9}
}

func (x *DataLocation_Memory) GetOperatorIndex() uint64 {
	if x != nil {
		return x.OperatorIndex
	}
	return 0
}

func (x *DataLocation_Memory) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DataLocation_Memory) GetSelectedCols() []string {
	if x != nil {
		return x.SelectedCols
	}
	return nil
}

var File_sudo_protobuf_infra_adapter_location_location_proto protoreflect.FileDescriptor

var file_sudo_protobuf_infra_adapter_location_location_proto_rawDesc = []byte{
	0x0a, 0x33, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1f, 0x73, 0x75, 0x64,
	0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x03, 0x0a,
	0x0c, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x78, 0x0a,
	0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x73, 0x75, 0x64, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x58, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x73, 0x75, 0x64,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6c,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x73, 0x76, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x73, 0x76, 0x53, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x44, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x24, 0x0a, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x73, 0x76,
	0x10, 0x01, 0x22, 0x66, 0x0a, 0x0a, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x32,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x0e, 0x56, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x72, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x72,
	0x63, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x72, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x72, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd9, 0x02, 0x0a, 0x0f, 0x46, 0x75, 0x72, 0x6e, 0x61,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x12, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x75, 0x72, 0x69,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x75, 0x72, 0x69, 0x12,
	0x51, 0x0a, 0x0b, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x76, 0x32, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x56, 0x32, 0x52, 0x0a, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x56, 0x32, 0x12, 0x5e, 0x0a, 0x10, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73,
	0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x0e, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61,
	0x74, 0x68, 0x22, 0xe8, 0x14, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x52, 0x0a,
	0x08, 0x64, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x42, 0x48, 0x00, 0x52, 0x07, 0x64, 0x62, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x53, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x60, 0x0a, 0x10, 0x66, 0x75, 0x72, 0x6e, 0x61, 0x63,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x61, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0f, 0x66, 0x75, 0x72, 0x6e, 0x61, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x74,
	0x6d, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x54, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x75, 0x64,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x91, 0x02, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x19, 0x5f, 0x64, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x16, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x75, 0x64, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x1a, 0x40, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x73, 0x1a, 0x5a, 0x0a, 0x0e, 0x4f, 0x44,
	0x42, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x41, 0x0a, 0x07, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0xce, 0x01, 0x0a, 0x08, 0x4b, 0x65,
	0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x72, 0x62, 0x35, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x72, 0x62, 0x35, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x74, 0x61, 0x62, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x74, 0x61, 0x62, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x68, 0x69, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x64, 0x66, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x68, 0x64, 0x66, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x1a, 0x7e, 0x0a, 0x08, 0x48, 0x64,
	0x66, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64,
	0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x44, 0x69, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x70, 0x63,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xeb, 0x03, 0x0a, 0x12, 0x46,
	0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x07, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x75,
	0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x12, 0x59, 0x0a, 0x08, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f,
	0x73, 0x48, 0x00, 0x52, 0x08, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x12, 0x58, 0x0a,
	0x09, 0x68, 0x64, 0x66, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x64, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x08, 0x68,
	0x64, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x42, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xa8, 0x02, 0x0a, 0x0c, 0x44, 0x42, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x0f, 0x6f, 0x64, 0x62, 0x63, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4f, 0x44, 0x42, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x64, 0x62, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x0f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x73,
	0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xb7, 0x03, 0x0a, 0x02, 0x44, 0x42, 0x12, 0x2c, 0x0a, 0x10, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x50, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x03, 0x64, 0x73, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03,
	0x64, 0x73, 0x6e, 0x12, 0x6c, 0x0a, 0x0f, 0x6f, 0x64, 0x62, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x73,
	0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4f, 0x44, 0x42, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x01, 0x52, 0x0e, 0x6f, 0x64, 0x62, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x64, 0x0a, 0x0d, 0x64, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61,
	0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x42, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x62, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x42,
	0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x66, 0x0a,
	0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x6c, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa4, 0x05,
	0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x74, 0x0a, 0x12, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x12, 0x54, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x73, 0x76, 0x5f, 0x73, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63,
	0x73, 0x76, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x15, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x6f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x62,
	0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x1a, 0x44, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x74, 0x0a, 0x10, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x24,
	0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x43,
	0x73, 0x76, 0x10, 0x01, 0x22, 0xe9, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x59, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x73, 0x75, 0x64, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x45, 0x0a, 0x08, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x6e, 0x74, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x10, 0x04,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sudo_protobuf_infra_adapter_location_location_proto_rawDescOnce sync.Once
	file_sudo_protobuf_infra_adapter_location_location_proto_rawDescData = file_sudo_protobuf_infra_adapter_location_location_proto_rawDesc
)

func file_sudo_protobuf_infra_adapter_location_location_proto_rawDescGZIP() []byte {
	file_sudo_protobuf_infra_adapter_location_location_proto_rawDescOnce.Do(func() {
		file_sudo_protobuf_infra_adapter_location_location_proto_rawDescData = protoimpl.X.CompressGZIP(file_sudo_protobuf_infra_adapter_location_location_proto_rawDescData)
	})
	return file_sudo_protobuf_infra_adapter_location_location_proto_rawDescData
}

var file_sudo_protobuf_infra_adapter_location_location_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_sudo_protobuf_infra_adapter_location_location_proto_goTypes = []interface{}{
	(FileMetaData_FileType)(0),              // 0: sudo.protobuf.infra_adapter.location.FileMetaData.FileType
	(MetaData_FileType)(0),                  // 1: sudo.protobuf.infra_adapter.location.MetaData.FileType
	(ColumnMetaData_DataType)(0),            // 2: sudo.protobuf.infra_adapter.location.ColumnMetaData.DataType
	(*FileMetaData)(nil),                    // 3: sudo.protobuf.infra_adapter.location.FileMetaData
	(*UpstreamV2)(nil),                      // 4: sudo.protobuf.infra_adapter.location.UpstreamV2
	(*VtableWithPath)(nil),                  // 5: sudo.protobuf.infra_adapter.location.VtableWithPath
	(*FurnaceProperty)(nil),                 // 6: sudo.protobuf.infra_adapter.location.FurnaceProperty
	(*DataLocation)(nil),                    // 7: sudo.protobuf.infra_adapter.location.DataLocation
	(*MetaData)(nil),                        // 8: sudo.protobuf.infra_adapter.location.MetaData
	(*ColumnMetaData)(nil),                  // 9: sudo.protobuf.infra_adapter.location.ColumnMetaData
	nil,                                     // 10: sudo.protobuf.infra_adapter.location.FileMetaData.AdditionalConfigsEntry
	(*DataLocation_File)(nil),               // 11: sudo.protobuf.infra_adapter.location.DataLocation.File
	(*DataLocation_Table)(nil),              // 12: sudo.protobuf.infra_adapter.location.DataLocation.Table
	(*DataLocation_ODBCConnection)(nil),     // 13: sudo.protobuf.infra_adapter.location.DataLocation.ODBCConnection
	(*DataLocation_General)(nil),            // 14: sudo.protobuf.infra_adapter.location.DataLocation.General
	(*DataLocation_Kerberos)(nil),           // 15: sudo.protobuf.infra_adapter.location.DataLocation.Kerberos
	(*DataLocation_HdfsConf)(nil),           // 16: sudo.protobuf.infra_adapter.location.DataLocation.HdfsConf
	(*DataLocation_FullConnectionInfo)(nil), // 17: sudo.protobuf.infra_adapter.location.DataLocation.FullConnectionInfo
	(*DataLocation_DBConnection)(nil),       // 18: sudo.protobuf.infra_adapter.location.DataLocation.DBConnection
	(*DataLocation_DB)(nil),                 // 19: sudo.protobuf.infra_adapter.location.DataLocation.DB
	(*DataLocation_Memory)(nil),             // 20: sudo.protobuf.infra_adapter.location.DataLocation.Memory
	nil,                                     // 21: sudo.protobuf.infra_adapter.location.MetaData.AdditionalConfigsEntry
	nil,                                     // 22: sudo.protobuf.infra_adapter.location.MetaData.TableSchemaEntry
	(enums.Datasource_Type)(0),              // 23: sudo.protobuf.enums.Datasource.Type
}
var file_sudo_protobuf_infra_adapter_location_location_proto_depIdxs = []int32{
	10, // 0: sudo.protobuf.infra_adapter.location.FileMetaData.additional_configs:type_name -> sudo.protobuf.infra_adapter.location.FileMetaData.AdditionalConfigsEntry
	0,  // 1: sudo.protobuf.infra_adapter.location.FileMetaData.file_type:type_name -> sudo.protobuf.infra_adapter.location.FileMetaData.FileType
	4,  // 2: sudo.protobuf.infra_adapter.location.FurnaceProperty.upstream_v2:type_name -> sudo.protobuf.infra_adapter.location.UpstreamV2
	5,  // 3: sudo.protobuf.infra_adapter.location.FurnaceProperty.vtable_with_path:type_name -> sudo.protobuf.infra_adapter.location.VtableWithPath
	11, // 4: sudo.protobuf.infra_adapter.location.DataLocation.local_file:type_name -> sudo.protobuf.infra_adapter.location.DataLocation.File
	19, // 5: sudo.protobuf.infra_adapter.location.DataLocation.db_table:type_name -> sudo.protobuf.infra_adapter.location.DataLocation.DB
	20, // 6: sudo.protobuf.infra_adapter.location.DataLocation.memory:type_name -> sudo.protobuf.infra_adapter.location.DataLocation.Memory
	6,  // 7: sudo.protobuf.infra_adapter.location.DataLocation.furnace_property:type_name -> sudo.protobuf.infra_adapter.location.FurnaceProperty
	8,  // 8: sudo.protobuf.infra_adapter.location.DataLocation.metadata:type_name -> sudo.protobuf.infra_adapter.location.MetaData
	21, // 9: sudo.protobuf.infra_adapter.location.MetaData.additional_configs:type_name -> sudo.protobuf.infra_adapter.location.MetaData.AdditionalConfigsEntry
	1,  // 10: sudo.protobuf.infra_adapter.location.MetaData.file_type:type_name -> sudo.protobuf.infra_adapter.location.MetaData.FileType
	22, // 11: sudo.protobuf.infra_adapter.location.MetaData.table_schema:type_name -> sudo.protobuf.infra_adapter.location.MetaData.TableSchemaEntry
	2,  // 12: sudo.protobuf.infra_adapter.location.ColumnMetaData.datatype:type_name -> sudo.protobuf.infra_adapter.location.ColumnMetaData.DataType
	3,  // 13: sudo.protobuf.infra_adapter.location.DataLocation.File.metadata:type_name -> sudo.protobuf.infra_adapter.location.FileMetaData
	23, // 14: sudo.protobuf.infra_adapter.location.DataLocation.FullConnectionInfo.datasource_type:type_name -> sudo.protobuf.enums.Datasource.Type
	14, // 15: sudo.protobuf.infra_adapter.location.DataLocation.FullConnectionInfo.general:type_name -> sudo.protobuf.infra_adapter.location.DataLocation.General
	15, // 16: sudo.protobuf.infra_adapter.location.DataLocation.FullConnectionInfo.kerberos:type_name -> sudo.protobuf.infra_adapter.location.DataLocation.Kerberos
	16, // 17: sudo.protobuf.infra_adapter.location.DataLocation.FullConnectionInfo.hdfs_conf:type_name -> sudo.protobuf.infra_adapter.location.DataLocation.HdfsConf
	13, // 18: sudo.protobuf.infra_adapter.location.DataLocation.DBConnection.odbc_connection:type_name -> sudo.protobuf.infra_adapter.location.DataLocation.ODBCConnection
	17, // 19: sudo.protobuf.infra_adapter.location.DataLocation.DBConnection.full_connection:type_name -> sudo.protobuf.infra_adapter.location.DataLocation.FullConnectionInfo
	12, // 20: sudo.protobuf.infra_adapter.location.DataLocation.DB.table:type_name -> sudo.protobuf.infra_adapter.location.DataLocation.Table
	13, // 21: sudo.protobuf.infra_adapter.location.DataLocation.DB.odbc_connection:type_name -> sudo.protobuf.infra_adapter.location.DataLocation.ODBCConnection
	18, // 22: sudo.protobuf.infra_adapter.location.DataLocation.DB.db_connection:type_name -> sudo.protobuf.infra_adapter.location.DataLocation.DBConnection
	9,  // 23: sudo.protobuf.infra_adapter.location.MetaData.TableSchemaEntry.value:type_name -> sudo.protobuf.infra_adapter.location.ColumnMetaData
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_sudo_protobuf_infra_adapter_location_location_proto_init() }
func file_sudo_protobuf_infra_adapter_location_location_proto_init() {
	if File_sudo_protobuf_infra_adapter_location_location_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileMetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpstreamV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VtableWithPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FurnaceProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnMetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataLocation_File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataLocation_Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataLocation_ODBCConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataLocation_General); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataLocation_Kerberos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataLocation_HdfsConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataLocation_FullConnectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataLocation_DBConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataLocation_DB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataLocation_Memory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*DataLocation_LocalFile)(nil),
		(*DataLocation_DbTable)(nil),
		(*DataLocation_Memory_)(nil),
	}
	file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*DataLocation_FullConnectionInfo_General)(nil),
		(*DataLocation_FullConnectionInfo_Kerberos)(nil),
	}
	file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*DataLocation_DBConnection_DataSourceName)(nil),
		(*DataLocation_DBConnection_OdbcConnection)(nil),
		(*DataLocation_DBConnection_FullConnection)(nil),
	}
	file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*DataLocation_DB_Query)(nil),
		(*DataLocation_DB_Table)(nil),
		(*DataLocation_DB_Dsn)(nil),
		(*DataLocation_DB_OdbcConnection)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sudo_protobuf_infra_adapter_location_location_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sudo_protobuf_infra_adapter_location_location_proto_goTypes,
		DependencyIndexes: file_sudo_protobuf_infra_adapter_location_location_proto_depIdxs,
		EnumInfos:         file_sudo_protobuf_infra_adapter_location_location_proto_enumTypes,
		MessageInfos:      file_sudo_protobuf_infra_adapter_location_location_proto_msgTypes,
	}.Build()
	File_sudo_protobuf_infra_adapter_location_location_proto = out.File
	file_sudo_protobuf_infra_adapter_location_location_proto_rawDesc = nil
	file_sudo_protobuf_infra_adapter_location_location_proto_goTypes = nil
	file_sudo_protobuf_infra_adapter_location_location_proto_depIdxs = nil
}
