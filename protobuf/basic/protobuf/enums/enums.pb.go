// Copyright 2022 Sudo Technology Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.1
// source: sudo/enums/enums.proto

package enums

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Dag_Job_Status int32

const (
	Dag_Job_UNKNOWN_STATUS Dag_Job_Status = 0
	// preconditions not satisfied, waiting upstream job to complete
	Dag_Job_PENDING Dag_Job_Status = 1
	// preconditions satisfied, not started yet, possibly because of no resource being allocated
	Dag_Job_QUEUED  Dag_Job_Status = 2
	Dag_Job_RUNNING Dag_Job_Status = 3
	Dag_Job_SUCCESS Dag_Job_Status = 4
	Dag_Job_FAILED  Dag_Job_Status = 5
	Dag_Job_KILLED  Dag_Job_Status = 6
	// when upstream job fails, current pending job will be discarded
	Dag_Job_UPSTREAM_FAILED Dag_Job_Status = 7
	// when only partial nodes are executed and succeeded
	Dag_Job_PARTIAL_SUCCESS Dag_Job_Status = 8
)

// Enum value maps for Dag_Job_Status.
var (
	Dag_Job_Status_name = map[int32]string{
		0: "UNKNOWN_STATUS",
		1: "PENDING",
		2: "QUEUED",
		3: "RUNNING",
		4: "SUCCESS",
		5: "FAILED",
		6: "KILLED",
		7: "UPSTREAM_FAILED",
		8: "PARTIAL_SUCCESS",
	}
	Dag_Job_Status_value = map[string]int32{
		"UNKNOWN_STATUS":  0,
		"PENDING":         1,
		"QUEUED":          2,
		"RUNNING":         3,
		"SUCCESS":         4,
		"FAILED":          5,
		"KILLED":          6,
		"UPSTREAM_FAILED": 7,
		"PARTIAL_SUCCESS": 8,
	}
)

func (x Dag_Job_Status) Enum() *Dag_Job_Status {
	p := new(Dag_Job_Status)
	*p = x
	return p
}

func (x Dag_Job_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Dag_Job_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[0].Descriptor()
}

func (Dag_Job_Status) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[0]
}

func (x Dag_Job_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Dag_Job_Status.Descriptor instead.
func (Dag_Job_Status) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{0, 0, 0}
}

type Dag_Job_Action int32

const (
	Dag_Job_UNKNOWN_ACTION Dag_Job_Action = 0
	Dag_Job_ENQUE          Dag_Job_Action = 1
	Dag_Job_START          Dag_Job_Action = 2
	Dag_Job_SUCCEED        Dag_Job_Action = 3
	Dag_Job_FAIL           Dag_Job_Action = 4
	Dag_Job_KILL           Dag_Job_Action = 5
	Dag_Job_DISCARD        Dag_Job_Action = 6
	Dag_Job_RERUN          Dag_Job_Action = 7
)

// Enum value maps for Dag_Job_Action.
var (
	Dag_Job_Action_name = map[int32]string{
		0: "UNKNOWN_ACTION",
		1: "ENQUE",
		2: "START",
		3: "SUCCEED",
		4: "FAIL",
		5: "KILL",
		6: "DISCARD",
		7: "RERUN",
	}
	Dag_Job_Action_value = map[string]int32{
		"UNKNOWN_ACTION": 0,
		"ENQUE":          1,
		"START":          2,
		"SUCCEED":        3,
		"FAIL":           4,
		"KILL":           5,
		"DISCARD":        6,
		"RERUN":          7,
	}
)

func (x Dag_Job_Action) Enum() *Dag_Job_Action {
	p := new(Dag_Job_Action)
	*p = x
	return p
}

func (x Dag_Job_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Dag_Job_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[1].Descriptor()
}

func (Dag_Job_Action) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[1]
}

func (x Dag_Job_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Dag_Job_Action.Descriptor instead.
func (Dag_Job_Action) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{0, 0, 1}
}

type Dag_Graph_Action int32

const (
	// no action
	Dag_Graph_UNKNOWN_ACTION Dag_Graph_Action = 0
	// run all, if there's already node running, kill it and run from scratch
	Dag_Graph_RUN_ALL Dag_Graph_Action = 10
	// run current node
	Dag_Graph_RUN_CURRENT Dag_Graph_Action = 20
	// run up until (inclusive) current node
	Dag_Graph_RUN_TIL_CURRENT Dag_Graph_Action = 30
	// run from (inclusive) current node
	Dag_Graph_RUN_FROM_CURRENT Dag_Graph_Action = 40
	// run from (exclusive) current node
	Dag_Graph_RUN_DOWNSTREAM Dag_Graph_Action = 50
	// kill all nodes
	Dag_Graph_KILL_ALL Dag_Graph_Action = 60
	// kill current node
	Dag_Graph_KILL_CURRENT Dag_Graph_Action = 70
	// rerun from scratch
	Dag_Graph_RERUN_ALL Dag_Graph_Action = 80
	// rerun and skip succeeded nodes
	Dag_Graph_RERUN_CONTINUE Dag_Graph_Action = 90
	// submit and enter review flow, if not review flow, execute
	Dag_Graph_SUBMIT Dag_Graph_Action = 100
	// run selected sub graph
	Dag_Graph_RUN_SUB_GRAPH Dag_Graph_Action = 110
	// edit graph or task
	Dag_Graph_EDIT Dag_Graph_Action = 120
)

// Enum value maps for Dag_Graph_Action.
var (
	Dag_Graph_Action_name = map[int32]string{
		0:   "UNKNOWN_ACTION",
		10:  "RUN_ALL",
		20:  "RUN_CURRENT",
		30:  "RUN_TIL_CURRENT",
		40:  "RUN_FROM_CURRENT",
		50:  "RUN_DOWNSTREAM",
		60:  "KILL_ALL",
		70:  "KILL_CURRENT",
		80:  "RERUN_ALL",
		90:  "RERUN_CONTINUE",
		100: "SUBMIT",
		110: "RUN_SUB_GRAPH",
		120: "EDIT",
	}
	Dag_Graph_Action_value = map[string]int32{
		"UNKNOWN_ACTION":   0,
		"RUN_ALL":          10,
		"RUN_CURRENT":      20,
		"RUN_TIL_CURRENT":  30,
		"RUN_FROM_CURRENT": 40,
		"RUN_DOWNSTREAM":   50,
		"KILL_ALL":         60,
		"KILL_CURRENT":     70,
		"RERUN_ALL":        80,
		"RERUN_CONTINUE":   90,
		"SUBMIT":           100,
		"RUN_SUB_GRAPH":    110,
		"EDIT":             120,
	}
)

func (x Dag_Graph_Action) Enum() *Dag_Graph_Action {
	p := new(Dag_Graph_Action)
	*p = x
	return p
}

func (x Dag_Graph_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Dag_Graph_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[2].Descriptor()
}

func (Dag_Graph_Action) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[2]
}

func (x Dag_Graph_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Dag_Graph_Action.Descriptor instead.
func (Dag_Graph_Action) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{0, 1, 0}
}

type Task_Status int32

const (
	Task_UNKNOWN_STATUS Task_Status = 0
	Task_EDITING        Task_Status = 10
	// back end only status, indicates status after submit. status after submit will be determined based on stage in real time
	Task_SUBMITTED Task_Status = 11
	// to be reviewed
	Task_REVIEWING Task_Status = 20
	Task_REJECTED  Task_Status = 30
	Task_SCHEDULED Task_Status = 40
	Task_WAITING   Task_Status = 50
	Task_RUNNING   Task_Status = 60
	Task_SUCCESS   Task_Status = 70
	Task_FAILED    Task_Status = 80
	Task_KILLED    Task_Status = 90
	// using: already requested online service
	Task_USING             Task_Status = 100
	Task_AUTOTUNING        Task_Status = 110
	Task_AUTOTUNING_KILLED Task_Status = 120
)

// Enum value maps for Task_Status.
var (
	Task_Status_name = map[int32]string{
		0:   "UNKNOWN_STATUS",
		10:  "EDITING",
		11:  "SUBMITTED",
		20:  "REVIEWING",
		30:  "REJECTED",
		40:  "SCHEDULED",
		50:  "WAITING",
		60:  "RUNNING",
		70:  "SUCCESS",
		80:  "FAILED",
		90:  "KILLED",
		100: "USING",
		110: "AUTOTUNING",
		120: "AUTOTUNING_KILLED",
	}
	Task_Status_value = map[string]int32{
		"UNKNOWN_STATUS":    0,
		"EDITING":           10,
		"SUBMITTED":         11,
		"REVIEWING":         20,
		"REJECTED":          30,
		"SCHEDULED":         40,
		"WAITING":           50,
		"RUNNING":           60,
		"SUCCESS":           70,
		"FAILED":            80,
		"KILLED":            90,
		"USING":             100,
		"AUTOTUNING":        110,
		"AUTOTUNING_KILLED": 120,
	}
)

func (x Task_Status) Enum() *Task_Status {
	p := new(Task_Status)
	*p = x
	return p
}

func (x Task_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Task_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[3].Descriptor()
}

func (Task_Status) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[3]
}

func (x Task_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Task_Status.Descriptor instead.
func (Task_Status) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{1, 0}
}

type Task_AutoTuningAlgorithm int32

const (
	Task_UNKNOWN_ALGORITHM Task_AutoTuningAlgorithm = 0
	Task_GRID_SEARCH       Task_AutoTuningAlgorithm = 10
)

// Enum value maps for Task_AutoTuningAlgorithm.
var (
	Task_AutoTuningAlgorithm_name = map[int32]string{
		0:  "UNKNOWN_ALGORITHM",
		10: "GRID_SEARCH",
	}
	Task_AutoTuningAlgorithm_value = map[string]int32{
		"UNKNOWN_ALGORITHM": 0,
		"GRID_SEARCH":       10,
	}
)

func (x Task_AutoTuningAlgorithm) Enum() *Task_AutoTuningAlgorithm {
	p := new(Task_AutoTuningAlgorithm)
	*p = x
	return p
}

func (x Task_AutoTuningAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Task_AutoTuningAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[4].Descriptor()
}

func (Task_AutoTuningAlgorithm) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[4]
}

func (x Task_AutoTuningAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Task_AutoTuningAlgorithm.Descriptor instead.
func (Task_AutoTuningAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{1, 1}
}

type Result_Type int32

const (
	Result_UNKNOWN Result_Type = 0
	Result_SUCCESS Result_Type = 1
	// general
	Result_ERR_INTERNAL_ERROR        Result_Type = 10
	Result_ERR_NOT_LOGGED_IN         Result_Type = 11
	Result_ERR_AUTH_FAILED           Result_Type = 12
	Result_ERR_AUTH_EXPIRED          Result_Type = 13
	Result_ERR_NO_PERMISSION         Result_Type = 14
	Result_ERR_INVALID_REQUEST       Result_Type = 15
	Result_ERR_INVALID_TOKEN         Result_Type = 16
	Result_ERR_INVALID_BODY          Result_Type = 17
	Result_ERR_MISSING_PARTY_ID      Result_Type = 18
	Result_ERR_MISSING_TOKEN         Result_Type = 19
	Result_ERR_UNRECONIZED_PARTY     Result_Type = 20
	Result_ERR_OUT_OF_INVENTORY      Result_Type = 21
	Result_ERR_API_NOT_FOUND         Result_Type = 22
	Result_ERR_NO_VALID_LICENSE      Result_Type = 23
	Result_ERR_LICENSE_EXPIRES       Result_Type = 24
	Result_ERR_LICENSE_NO_PRIVILEGE  Result_Type = 25
	Result_ERR_UPDATE_RACE_CONDITION Result_Type = 26
	Result_ERR_NEED_APPLICATION      Result_Type = 27
	Result_ERR_PARTY_URL_UNAVAILABLE Result_Type = 28
	Result_ERR_NO_TUSITA_AVAILABLE   Result_Type = 29
	Result_ERR_DUPLICATE_ENTRY       Result_Type = 30
	// params
	Result_ERR_INVALID_PARAM                    Result_Type = 100
	Result_ERR_MISSING_REQUIRED                 Result_Type = 101
	Result_ERR_FIELD_NOT_NUMBER                 Result_Type = 102
	Result_ERR_FIELD_NOT_INT                    Result_Type = 103
	Result_ERR_RESOURCE_NOT_FOUND               Result_Type = 104
	Result_ERR_INVALID_FILTER                   Result_Type = 105
	Result_ERR_INVALID_ORDER_KEY                Result_Type = 106
	Result_ERR_INVALID_UPSTREAM                 Result_Type = 107
	Result_ERR_OPERATOR_INPUT_NOT_FOUND         Result_Type = 108
	Result_ERR_DELETE_NONEMPTY_DEPARTMENT       Result_Type = 109
	Result_ERR_INVALID_PARAM_HINT_CANDIDATES    Result_Type = 110
	Result_ERR_MISSING_REQUIRED_HINT_CANDIDATES Result_Type = 111
	Result_ERR_RESOURCE_EXISTS                  Result_Type = 112
	Result_ERR_ALREADY_JOINED_PROJECT           Result_Type = 113
	Result_ERR_DELETE_PROJECT_ONLY_MANAGER      Result_Type = 114
	Result_ERR_INVALID_INVITECODE               Result_Type = 115
	Result_ERR_ALREADY_APPLIED                  Result_Type = 116
	Result_ERR_ALREADY_APPROVED                 Result_Type = 117
	Result_ERR_RESOURCE_DUPLICATED              Result_Type = 118
	Result_ERR_ALREAGY_HIDDEN                   Result_Type = 119
	Result_ERR_PARTY_RESOURCE_LIMIT             Result_Type = 120
	Result_ERR_DISABLE_UPDATE                   Result_Type = 121
	// services
	Result_ERR_DB_EXEC_ERROR Result_Type = 200
	Result_ERR_DB_CONN_ERROR Result_Type = 201
	// http request
	Result_ERR_HTTP_CONN_FAILED     Result_Type = 300
	Result_ERR_HTTP_INVALID_REQUEST Result_Type = 301
	Result_ERR_CONN_REFUSED_ERROR   Result_Type = 302
)

// Enum value maps for Result_Type.
var (
	Result_Type_name = map[int32]string{
		0:   "UNKNOWN",
		1:   "SUCCESS",
		10:  "ERR_INTERNAL_ERROR",
		11:  "ERR_NOT_LOGGED_IN",
		12:  "ERR_AUTH_FAILED",
		13:  "ERR_AUTH_EXPIRED",
		14:  "ERR_NO_PERMISSION",
		15:  "ERR_INVALID_REQUEST",
		16:  "ERR_INVALID_TOKEN",
		17:  "ERR_INVALID_BODY",
		18:  "ERR_MISSING_PARTY_ID",
		19:  "ERR_MISSING_TOKEN",
		20:  "ERR_UNRECONIZED_PARTY",
		21:  "ERR_OUT_OF_INVENTORY",
		22:  "ERR_API_NOT_FOUND",
		23:  "ERR_NO_VALID_LICENSE",
		24:  "ERR_LICENSE_EXPIRES",
		25:  "ERR_LICENSE_NO_PRIVILEGE",
		26:  "ERR_UPDATE_RACE_CONDITION",
		27:  "ERR_NEED_APPLICATION",
		28:  "ERR_PARTY_URL_UNAVAILABLE",
		29:  "ERR_NO_TUSITA_AVAILABLE",
		30:  "ERR_DUPLICATE_ENTRY",
		100: "ERR_INVALID_PARAM",
		101: "ERR_MISSING_REQUIRED",
		102: "ERR_FIELD_NOT_NUMBER",
		103: "ERR_FIELD_NOT_INT",
		104: "ERR_RESOURCE_NOT_FOUND",
		105: "ERR_INVALID_FILTER",
		106: "ERR_INVALID_ORDER_KEY",
		107: "ERR_INVALID_UPSTREAM",
		108: "ERR_OPERATOR_INPUT_NOT_FOUND",
		109: "ERR_DELETE_NONEMPTY_DEPARTMENT",
		110: "ERR_INVALID_PARAM_HINT_CANDIDATES",
		111: "ERR_MISSING_REQUIRED_HINT_CANDIDATES",
		112: "ERR_RESOURCE_EXISTS",
		113: "ERR_ALREADY_JOINED_PROJECT",
		114: "ERR_DELETE_PROJECT_ONLY_MANAGER",
		115: "ERR_INVALID_INVITECODE",
		116: "ERR_ALREADY_APPLIED",
		117: "ERR_ALREADY_APPROVED",
		118: "ERR_RESOURCE_DUPLICATED",
		119: "ERR_ALREAGY_HIDDEN",
		120: "ERR_PARTY_RESOURCE_LIMIT",
		121: "ERR_DISABLE_UPDATE",
		200: "ERR_DB_EXEC_ERROR",
		201: "ERR_DB_CONN_ERROR",
		300: "ERR_HTTP_CONN_FAILED",
		301: "ERR_HTTP_INVALID_REQUEST",
		302: "ERR_CONN_REFUSED_ERROR",
	}
	Result_Type_value = map[string]int32{
		"UNKNOWN":                              0,
		"SUCCESS":                              1,
		"ERR_INTERNAL_ERROR":                   10,
		"ERR_NOT_LOGGED_IN":                    11,
		"ERR_AUTH_FAILED":                      12,
		"ERR_AUTH_EXPIRED":                     13,
		"ERR_NO_PERMISSION":                    14,
		"ERR_INVALID_REQUEST":                  15,
		"ERR_INVALID_TOKEN":                    16,
		"ERR_INVALID_BODY":                     17,
		"ERR_MISSING_PARTY_ID":                 18,
		"ERR_MISSING_TOKEN":                    19,
		"ERR_UNRECONIZED_PARTY":                20,
		"ERR_OUT_OF_INVENTORY":                 21,
		"ERR_API_NOT_FOUND":                    22,
		"ERR_NO_VALID_LICENSE":                 23,
		"ERR_LICENSE_EXPIRES":                  24,
		"ERR_LICENSE_NO_PRIVILEGE":             25,
		"ERR_UPDATE_RACE_CONDITION":            26,
		"ERR_NEED_APPLICATION":                 27,
		"ERR_PARTY_URL_UNAVAILABLE":            28,
		"ERR_NO_TUSITA_AVAILABLE":              29,
		"ERR_DUPLICATE_ENTRY":                  30,
		"ERR_INVALID_PARAM":                    100,
		"ERR_MISSING_REQUIRED":                 101,
		"ERR_FIELD_NOT_NUMBER":                 102,
		"ERR_FIELD_NOT_INT":                    103,
		"ERR_RESOURCE_NOT_FOUND":               104,
		"ERR_INVALID_FILTER":                   105,
		"ERR_INVALID_ORDER_KEY":                106,
		"ERR_INVALID_UPSTREAM":                 107,
		"ERR_OPERATOR_INPUT_NOT_FOUND":         108,
		"ERR_DELETE_NONEMPTY_DEPARTMENT":       109,
		"ERR_INVALID_PARAM_HINT_CANDIDATES":    110,
		"ERR_MISSING_REQUIRED_HINT_CANDIDATES": 111,
		"ERR_RESOURCE_EXISTS":                  112,
		"ERR_ALREADY_JOINED_PROJECT":           113,
		"ERR_DELETE_PROJECT_ONLY_MANAGER":      114,
		"ERR_INVALID_INVITECODE":               115,
		"ERR_ALREADY_APPLIED":                  116,
		"ERR_ALREADY_APPROVED":                 117,
		"ERR_RESOURCE_DUPLICATED":              118,
		"ERR_ALREAGY_HIDDEN":                   119,
		"ERR_PARTY_RESOURCE_LIMIT":             120,
		"ERR_DISABLE_UPDATE":                   121,
		"ERR_DB_EXEC_ERROR":                    200,
		"ERR_DB_CONN_ERROR":                    201,
		"ERR_HTTP_CONN_FAILED":                 300,
		"ERR_HTTP_INVALID_REQUEST":             301,
		"ERR_CONN_REFUSED_ERROR":               302,
	}
)

func (x Result_Type) Enum() *Result_Type {
	p := new(Result_Type)
	*p = x
	return p
}

func (x Result_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Result_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[5].Descriptor()
}

func (Result_Type) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[5]
}

func (x Result_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Result_Type.Descriptor instead.
func (Result_Type) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{2, 0}
}

type Job_Status int32

const (
	Job_UNKNOWN_STATUS Job_Status = 0
	Job_PENDING        Job_Status = 1
	Job_SCHEDULED      Job_Status = 2
	Job_STARTED        Job_Status = 3
	Job_SUCCESS        Job_Status = 4
	Job_FAILURE        Job_Status = 5
	Job_KILLED         Job_Status = 6
	Job_REVIEWING      Job_Status = 7
	Job_REJECTED       Job_Status = 8
	Job_EDITING        Job_Status = 9
)

// Enum value maps for Job_Status.
var (
	Job_Status_name = map[int32]string{
		0: "UNKNOWN_STATUS",
		1: "PENDING",
		2: "SCHEDULED",
		3: "STARTED",
		4: "SUCCESS",
		5: "FAILURE",
		6: "KILLED",
		7: "REVIEWING",
		8: "REJECTED",
		9: "EDITING",
	}
	Job_Status_value = map[string]int32{
		"UNKNOWN_STATUS": 0,
		"PENDING":        1,
		"SCHEDULED":      2,
		"STARTED":        3,
		"SUCCESS":        4,
		"FAILURE":        5,
		"KILLED":         6,
		"REVIEWING":      7,
		"REJECTED":       8,
		"EDITING":        9,
	}
)

func (x Job_Status) Enum() *Job_Status {
	p := new(Job_Status)
	*p = x
	return p
}

func (x Job_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Job_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[6].Descriptor()
}

func (Job_Status) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[6]
}

func (x Job_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Job_Status.Descriptor instead.
func (Job_Status) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{3, 0}
}

type Job_Priority int32

const (
	Job_UNKNOWN_PRIORITY Job_Priority = 0
	Job_LOW              Job_Priority = 1
	Job_NORMAL           Job_Priority = 2
	Job_HIGH             Job_Priority = 3
	Job_HIGHEST          Job_Priority = 4
)

// Enum value maps for Job_Priority.
var (
	Job_Priority_name = map[int32]string{
		0: "UNKNOWN_PRIORITY",
		1: "LOW",
		2: "NORMAL",
		3: "HIGH",
		4: "HIGHEST",
	}
	Job_Priority_value = map[string]int32{
		"UNKNOWN_PRIORITY": 0,
		"LOW":              1,
		"NORMAL":           2,
		"HIGH":             3,
		"HIGHEST":          4,
	}
)

func (x Job_Priority) Enum() *Job_Priority {
	p := new(Job_Priority)
	*p = x
	return p
}

func (x Job_Priority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Job_Priority) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[7].Descriptor()
}

func (Job_Priority) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[7]
}

func (x Job_Priority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Job_Priority.Descriptor instead.
func (Job_Priority) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{3, 1}
}

type Job_Type int32

const (
	Job_UNKNOWN_TYPE       Job_Type = 0
	Job_MODEL_FIT          Job_Type = 1
	Job_DIAGNOSTIC_STATICS Job_Type = 2
	Job_SQL                Job_Type = 3
	Job_PREDICT            Job_Type = 4
)

// Enum value maps for Job_Type.
var (
	Job_Type_name = map[int32]string{
		0: "UNKNOWN_TYPE",
		1: "MODEL_FIT",
		2: "DIAGNOSTIC_STATICS",
		3: "SQL",
		4: "PREDICT",
	}
	Job_Type_value = map[string]int32{
		"UNKNOWN_TYPE":       0,
		"MODEL_FIT":          1,
		"DIAGNOSTIC_STATICS": 2,
		"SQL":                3,
		"PREDICT":            4,
	}
)

func (x Job_Type) Enum() *Job_Type {
	p := new(Job_Type)
	*p = x
	return p
}

func (x Job_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Job_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[8].Descriptor()
}

func (Job_Type) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[8]
}

func (x Job_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Job_Type.Descriptor instead.
func (Job_Type) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{3, 2}
}

type Job_ComputeMode int32

const (
	Job_CLASSIC Job_ComputeMode = 0
	Job_STABLE  Job_ComputeMode = 1
)

// Enum value maps for Job_ComputeMode.
var (
	Job_ComputeMode_name = map[int32]string{
		0: "CLASSIC",
		1: "STABLE",
	}
	Job_ComputeMode_value = map[string]int32{
		"CLASSIC": 0,
		"STABLE":  1,
	}
)

func (x Job_ComputeMode) Enum() *Job_ComputeMode {
	p := new(Job_ComputeMode)
	*p = x
	return p
}

func (x Job_ComputeMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Job_ComputeMode) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[9].Descriptor()
}

func (Job_ComputeMode) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[9]
}

func (x Job_ComputeMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Job_ComputeMode.Descriptor instead.
func (Job_ComputeMode) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{3, 3}
}

type Job_Action int32

const (
	Job_UNKNOWN_ACTION Job_Action = 0
	Job_APPROVE        Job_Action = 1
	Job_REJECT         Job_Action = 2
	Job_ENABLE         Job_Action = 3
	Job_DISABLE        Job_Action = 4
	Job_RERUN          Job_Action = 5
)

// Enum value maps for Job_Action.
var (
	Job_Action_name = map[int32]string{
		0: "UNKNOWN_ACTION",
		1: "APPROVE",
		2: "REJECT",
		3: "ENABLE",
		4: "DISABLE",
		5: "RERUN",
	}
	Job_Action_value = map[string]int32{
		"UNKNOWN_ACTION": 0,
		"APPROVE":        1,
		"REJECT":         2,
		"ENABLE":         3,
		"DISABLE":        4,
		"RERUN":          5,
	}
)

func (x Job_Action) Enum() *Job_Action {
	p := new(Job_Action)
	*p = x
	return p
}

func (x Job_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Job_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[10].Descriptor()
}

func (Job_Action) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[10]
}

func (x Job_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Job_Action.Descriptor instead.
func (Job_Action) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{3, 4}
}

type Job_BlockScheduleStatus int32

const (
	Job_UNKNOWN            Job_BlockScheduleStatus = 0
	Job_PROVISION_RESOURCE Job_BlockScheduleStatus = 1
	Job_RUNNING_BLOCK      Job_BlockScheduleStatus = 2
	Job_FINISHING_BLOCK    Job_BlockScheduleStatus = 3
	Job_FINISH             Job_BlockScheduleStatus = 4
)

// Enum value maps for Job_BlockScheduleStatus.
var (
	Job_BlockScheduleStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "PROVISION_RESOURCE",
		2: "RUNNING_BLOCK",
		3: "FINISHING_BLOCK",
		4: "FINISH",
	}
	Job_BlockScheduleStatus_value = map[string]int32{
		"UNKNOWN":            0,
		"PROVISION_RESOURCE": 1,
		"RUNNING_BLOCK":      2,
		"FINISHING_BLOCK":    3,
		"FINISH":             4,
	}
)

func (x Job_BlockScheduleStatus) Enum() *Job_BlockScheduleStatus {
	p := new(Job_BlockScheduleStatus)
	*p = x
	return p
}

func (x Job_BlockScheduleStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Job_BlockScheduleStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[11].Descriptor()
}

func (Job_BlockScheduleStatus) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[11]
}

func (x Job_BlockScheduleStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Job_BlockScheduleStatus.Descriptor instead.
func (Job_BlockScheduleStatus) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{3, 5}
}

type Stage_Type int32

const (
	// should be lower case
	Stage_unknown                              Stage_Type = 0
	Stage_dummy                                Stage_Type = 1
	Stage_ping                                 Stage_Type = 2
	Stage_psi                                  Stage_Type = 3
	Stage_xgboost_predict                      Stage_Type = 4
	Stage_xgboost_train                        Stage_Type = 5
	Stage_preprocessing_train                  Stage_Type = 6
	Stage_preprocessing_predict                Stage_Type = 7
	Stage_dataanalysis                         Stage_Type = 8
	Stage_verticallinearregression_train       Stage_Type = 9
	Stage_verticallinearregression_predict     Stage_Type = 10
	Stage_verticallogisticregression_train     Stage_Type = 11
	Stage_verticallogisticregression_predict   Stage_Type = 12
	Stage_predictevaluation                    Stage_Type = 13
	Stage_dynamic_psi                          Stage_Type = 14
	Stage_static_psi                           Stage_Type = 15
	Stage_horizontalsplit                      Stage_Type = 16
	Stage_horizontallinearregression_predict   Stage_Type = 17
	Stage_horizontallinearregression_train     Stage_Type = 18
	Stage_horizontallogisticregression_predict Stage_Type = 19
	Stage_horizontallogisticregression_train   Stage_Type = 20
	Stage_downsampling                         Stage_Type = 21
	Stage_horizontaldataanalysis               Stage_Type = 22
	Stage_verticalsplit                        Stage_Type = 23
	Stage_horizontalpreprocessing_train        Stage_Type = 24
	Stage_horizontalpreprocessing_predict      Stage_Type = 25
	Stage_anonymous_query                      Stage_Type = 26
	Stage_where                                Stage_Type = 27
	Stage_greaterthan                          Stage_Type = 28
	Stage_count                                Stage_Type = 29
	Stage_open                                 Stage_Type = 30
	Stage_woetransform                         Stage_Type = 31
	Stage_batchpir                             Stage_Type = 32
	Stage_onlinepirprepare                     Stage_Type = 33
	Stage_onlinepirquery                       Stage_Type = 34
	Stage_addition                             Stage_Type = 35
	Stage_subtraction                          Stage_Type = 36
	Stage_multiplication                       Stage_Type = 37
	Stage_division                             Stage_Type = 38
	Stage_greaterorequal                       Stage_Type = 39
	Stage_lessthan                             Stage_Type = 40
	Stage_lessorequal                          Stage_Type = 41
	Stage_equality                             Stage_Type = 42
	Stage_inequality                           Stage_Type = 43
	Stage_exponentiation                       Stage_Type = 44
	Stage_squareroot                           Stage_Type = 45
	Stage_and                                  Stage_Type = 46
	Stage_or                                   Stage_Type = 47
	Stage_sum                                  Stage_Type = 48
	Stage_average                              Stage_Type = 49
	Stage_standarddeviation                    Stage_Type = 50
	Stage_showid                               Stage_Type = 51
	Stage_syncarrayinput                       Stage_Type = 52
	Stage_naivestatistic                       Stage_Type = 53
	Stage_abnormalhandling                     Stage_Type = 54
	Stage_normalization                        Stage_Type = 55
	Stage_createtable                          Stage_Type = 56
	Stage_compare                              Stage_Type = 57
	Stage_sort                                 Stage_Type = 58
	Stage_matrixmultiplication                 Stage_Type = 59
	Stage_fourpsum                             Stage_Type = 60
	Stage_fourpcompare                         Stage_Type = 61
	Stage_fourpopen                            Stage_Type = 62
	Stage_fourpproduct                         Stage_Type = 63
	Stage_garbledcircuit                       Stage_Type = 64
	Stage_variance                             Stage_Type = 65
	Stage_largesteigen                         Stage_Type = 66
	Stage_horizontalxgboost_predict            Stage_Type = 67
	Stage_horizontalxgboost_train              Stage_Type = 68
	Stage_cnnhorizontal_train                  Stage_Type = 69
	Stage_cnnhorizontal_predict                Stage_Type = 70
	Stage_horizontalbayes_train                Stage_Type = 71
	Stage_horizontalbayes_predict              Stage_Type = 72
	Stage_verticalbayes_train                  Stage_Type = 73
	Stage_verticalbayes_predict                Stage_Type = 74
	Stage_horizontalknn                        Stage_Type = 75
	Stage_verticalknn                          Stage_Type = 76
	Stage_verticalkmeans_train                 Stage_Type = 77
	Stage_verticalkmeans_predict               Stage_Type = 78
	Stage_horizontalkmeans_train               Stage_Type = 79
	Stage_horizontalkmeans_predict             Stage_Type = 80
	Stage_verticalsvm_train                    Stage_Type = 81
	Stage_verticalsvm_predict                  Stage_Type = 82
	Stage_blacklistpsi                         Stage_Type = 83
	Stage_verticalvif                          Stage_Type = 84
	Stage_horizontalvif                        Stage_Type = 85
	Stage_cnnvertical_train                    Stage_Type = 86
	Stage_cnnvertical_predict                  Stage_Type = 87
	Stage_phelinearregression_train            Stage_Type = 88
	Stage_phelinearregression_predict          Stage_Type = 89
	Stage_phelogisticregression_train          Stage_Type = 90
	Stage_phelogisticregression_predict        Stage_Type = 91
	Stage_conditionpsi                         Stage_Type = 92
	Stage_conditionalunionpsi                  Stage_Type = 93
	Stage_unionpsi                             Stage_Type = 94
	Stage_lgrtrainhuge                         Stage_Type = 95
	Stage_lgrpredicthuge                       Stage_Type = 96
	Stage_xgboosttrainhuge                     Stage_Type = 97
	Stage_xgboostpredicthuge                   Stage_Type = 98
	Stage_distributed_preprocessing_train      Stage_Type = 99
	Stage_distributed_preprocessing_predict    Stage_Type = 100
	Stage_distributed_xgboost_train            Stage_Type = 101
	Stage_distributed_xgboost_predict          Stage_Type = 102
	Stage_xgboostserver_prediction             Stage_Type = 103
	Stage_localjoin                            Stage_Type = 104
	Stage_unionpayloadpsi                      Stage_Type = 105
	Stage_horizontalconditionalunionpsi        Stage_Type = 106
	Stage_tableconcat                          Stage_Type = 107
	Stage_bucketize                            Stage_Type = 108
	// poc_sampling is deprecated.
	// Use sampling instead in the following versions.
	Stage_poc_sampling                            Stage_Type = 109
	Stage_pochlstmwords_train                     Stage_Type = 110
	Stage_pochlstmwords_predict                   Stage_Type = 111
	Stage_pochlstmtimes_train                     Stage_Type = 112
	Stage_pochlstmtimes_predict                   Stage_Type = 113
	Stage_horizontalxgboosttrainhuge              Stage_Type = 114
	Stage_horizontalxgboostpredicthuge            Stage_Type = 115
	Stage_featureconversion                       Stage_Type = 116
	Stage_hlgrtrainhuge                           Stage_Type = 117
	Stage_hlgrpredicthuge                         Stage_Type = 118
	Stage_vdecisiontree_train                     Stage_Type = 119
	Stage_vdecisiontree_predict                   Stage_Type = 120
	Stage_hdecisiontree_train                     Stage_Type = 121
	Stage_hdecisiontree_predict                   Stage_Type = 122
	Stage_localopen                               Stage_Type = 123
	Stage_localsplit                              Stage_Type = 124
	Stage_isoperator                              Stage_Type = 125
	Stage_privatesql                              Stage_Type = 126
	Stage_preprocessing2_train                    Stage_Type = 128
	Stage_preprocessing2_predict                  Stage_Type = 129
	Stage_multiverticallogisticregression_train   Stage_Type = 130
	Stage_multiverticallogisticregression_predict Stage_Type = 131
	Stage_scorecard                               Stage_Type = 132
	Stage_multipleinnerproduct                    Stage_Type = 133
	Stage_wukong_xgboost_train                    Stage_Type = 134
	Stage_verticalcnn2_predict                    Stage_Type = 135
	Stage_fuzzypsi                                Stage_Type = 136
	Stage_isop                                    Stage_Type = 137
	Stage_populationstabilityindex                Stage_Type = 138
	Stage_localclassification                     Stage_Type = 139
	Stage_fedclassification                       Stage_Type = 140
	Stage_accountdistributionoverview             Stage_Type = 141
	Stage_accountnumberassetoverview              Stage_Type = 142
	Stage_assetdistribution                       Stage_Type = 143
	Stage_fundoverview                            Stage_Type = 144
	Stage_insuranceoverview                       Stage_Type = 145
	Stage_transitionmatrix                        Stage_Type = 146
	Stage_filter                                  Stage_Type = 147
	Stage_multistatistics                         Stage_Type = 148
	Stage_secretsharinglogisticregression_train   Stage_Type = 149
	Stage_secretsharinglogisticregression_predict Stage_Type = 150
	Stage_federatedmedian                         Stage_Type = 151
	Stage_pir                                     Stage_Type = 152
	Stage_garbledcircuit_adder                    Stage_Type = 153
	Stage_sampling                                Stage_Type = 154
	Stage_wukong_psi                              Stage_Type = 155
)

// Enum value maps for Stage_Type.
var (
	Stage_Type_name = map[int32]string{
		0:   "unknown",
		1:   "dummy",
		2:   "ping",
		3:   "psi",
		4:   "xgboost_predict",
		5:   "xgboost_train",
		6:   "preprocessing_train",
		7:   "preprocessing_predict",
		8:   "dataanalysis",
		9:   "verticallinearregression_train",
		10:  "verticallinearregression_predict",
		11:  "verticallogisticregression_train",
		12:  "verticallogisticregression_predict",
		13:  "predictevaluation",
		14:  "dynamic_psi",
		15:  "static_psi",
		16:  "horizontalsplit",
		17:  "horizontallinearregression_predict",
		18:  "horizontallinearregression_train",
		19:  "horizontallogisticregression_predict",
		20:  "horizontallogisticregression_train",
		21:  "downsampling",
		22:  "horizontaldataanalysis",
		23:  "verticalsplit",
		24:  "horizontalpreprocessing_train",
		25:  "horizontalpreprocessing_predict",
		26:  "anonymous_query",
		27:  "where",
		28:  "greaterthan",
		29:  "count",
		30:  "open",
		31:  "woetransform",
		32:  "batchpir",
		33:  "onlinepirprepare",
		34:  "onlinepirquery",
		35:  "addition",
		36:  "subtraction",
		37:  "multiplication",
		38:  "division",
		39:  "greaterorequal",
		40:  "lessthan",
		41:  "lessorequal",
		42:  "equality",
		43:  "inequality",
		44:  "exponentiation",
		45:  "squareroot",
		46:  "and",
		47:  "or",
		48:  "sum",
		49:  "average",
		50:  "standarddeviation",
		51:  "showid",
		52:  "syncarrayinput",
		53:  "naivestatistic",
		54:  "abnormalhandling",
		55:  "normalization",
		56:  "createtable",
		57:  "compare",
		58:  "sort",
		59:  "matrixmultiplication",
		60:  "fourpsum",
		61:  "fourpcompare",
		62:  "fourpopen",
		63:  "fourpproduct",
		64:  "garbledcircuit",
		65:  "variance",
		66:  "largesteigen",
		67:  "horizontalxgboost_predict",
		68:  "horizontalxgboost_train",
		69:  "cnnhorizontal_train",
		70:  "cnnhorizontal_predict",
		71:  "horizontalbayes_train",
		72:  "horizontalbayes_predict",
		73:  "verticalbayes_train",
		74:  "verticalbayes_predict",
		75:  "horizontalknn",
		76:  "verticalknn",
		77:  "verticalkmeans_train",
		78:  "verticalkmeans_predict",
		79:  "horizontalkmeans_train",
		80:  "horizontalkmeans_predict",
		81:  "verticalsvm_train",
		82:  "verticalsvm_predict",
		83:  "blacklistpsi",
		84:  "verticalvif",
		85:  "horizontalvif",
		86:  "cnnvertical_train",
		87:  "cnnvertical_predict",
		88:  "phelinearregression_train",
		89:  "phelinearregression_predict",
		90:  "phelogisticregression_train",
		91:  "phelogisticregression_predict",
		92:  "conditionpsi",
		93:  "conditionalunionpsi",
		94:  "unionpsi",
		95:  "lgrtrainhuge",
		96:  "lgrpredicthuge",
		97:  "xgboosttrainhuge",
		98:  "xgboostpredicthuge",
		99:  "distributed_preprocessing_train",
		100: "distributed_preprocessing_predict",
		101: "distributed_xgboost_train",
		102: "distributed_xgboost_predict",
		103: "xgboostserver_prediction",
		104: "localjoin",
		105: "unionpayloadpsi",
		106: "horizontalconditionalunionpsi",
		107: "tableconcat",
		108: "bucketize",
		109: "poc_sampling",
		110: "pochlstmwords_train",
		111: "pochlstmwords_predict",
		112: "pochlstmtimes_train",
		113: "pochlstmtimes_predict",
		114: "horizontalxgboosttrainhuge",
		115: "horizontalxgboostpredicthuge",
		116: "featureconversion",
		117: "hlgrtrainhuge",
		118: "hlgrpredicthuge",
		119: "vdecisiontree_train",
		120: "vdecisiontree_predict",
		121: "hdecisiontree_train",
		122: "hdecisiontree_predict",
		123: "localopen",
		124: "localsplit",
		125: "isoperator",
		126: "privatesql",
		128: "preprocessing2_train",
		129: "preprocessing2_predict",
		130: "multiverticallogisticregression_train",
		131: "multiverticallogisticregression_predict",
		132: "scorecard",
		133: "multipleinnerproduct",
		134: "wukong_xgboost_train",
		135: "verticalcnn2_predict",
		136: "fuzzypsi",
		137: "isop",
		138: "populationstabilityindex",
		139: "localclassification",
		140: "fedclassification",
		141: "accountdistributionoverview",
		142: "accountnumberassetoverview",
		143: "assetdistribution",
		144: "fundoverview",
		145: "insuranceoverview",
		146: "transitionmatrix",
		147: "filter",
		148: "multistatistics",
		149: "secretsharinglogisticregression_train",
		150: "secretsharinglogisticregression_predict",
		151: "federatedmedian",
		152: "pir",
		153: "garbledcircuit_adder",
		154: "sampling",
		155: "wukong_psi",
	}
	Stage_Type_value = map[string]int32{
		"unknown":                                 0,
		"dummy":                                   1,
		"ping":                                    2,
		"psi":                                     3,
		"xgboost_predict":                         4,
		"xgboost_train":                           5,
		"preprocessing_train":                     6,
		"preprocessing_predict":                   7,
		"dataanalysis":                            8,
		"verticallinearregression_train":          9,
		"verticallinearregression_predict":        10,
		"verticallogisticregression_train":        11,
		"verticallogisticregression_predict":      12,
		"predictevaluation":                       13,
		"dynamic_psi":                             14,
		"static_psi":                              15,
		"horizontalsplit":                         16,
		"horizontallinearregression_predict":      17,
		"horizontallinearregression_train":        18,
		"horizontallogisticregression_predict":    19,
		"horizontallogisticregression_train":      20,
		"downsampling":                            21,
		"horizontaldataanalysis":                  22,
		"verticalsplit":                           23,
		"horizontalpreprocessing_train":           24,
		"horizontalpreprocessing_predict":         25,
		"anonymous_query":                         26,
		"where":                                   27,
		"greaterthan":                             28,
		"count":                                   29,
		"open":                                    30,
		"woetransform":                            31,
		"batchpir":                                32,
		"onlinepirprepare":                        33,
		"onlinepirquery":                          34,
		"addition":                                35,
		"subtraction":                             36,
		"multiplication":                          37,
		"division":                                38,
		"greaterorequal":                          39,
		"lessthan":                                40,
		"lessorequal":                             41,
		"equality":                                42,
		"inequality":                              43,
		"exponentiation":                          44,
		"squareroot":                              45,
		"and":                                     46,
		"or":                                      47,
		"sum":                                     48,
		"average":                                 49,
		"standarddeviation":                       50,
		"showid":                                  51,
		"syncarrayinput":                          52,
		"naivestatistic":                          53,
		"abnormalhandling":                        54,
		"normalization":                           55,
		"createtable":                             56,
		"compare":                                 57,
		"sort":                                    58,
		"matrixmultiplication":                    59,
		"fourpsum":                                60,
		"fourpcompare":                            61,
		"fourpopen":                               62,
		"fourpproduct":                            63,
		"garbledcircuit":                          64,
		"variance":                                65,
		"largesteigen":                            66,
		"horizontalxgboost_predict":               67,
		"horizontalxgboost_train":                 68,
		"cnnhorizontal_train":                     69,
		"cnnhorizontal_predict":                   70,
		"horizontalbayes_train":                   71,
		"horizontalbayes_predict":                 72,
		"verticalbayes_train":                     73,
		"verticalbayes_predict":                   74,
		"horizontalknn":                           75,
		"verticalknn":                             76,
		"verticalkmeans_train":                    77,
		"verticalkmeans_predict":                  78,
		"horizontalkmeans_train":                  79,
		"horizontalkmeans_predict":                80,
		"verticalsvm_train":                       81,
		"verticalsvm_predict":                     82,
		"blacklistpsi":                            83,
		"verticalvif":                             84,
		"horizontalvif":                           85,
		"cnnvertical_train":                       86,
		"cnnvertical_predict":                     87,
		"phelinearregression_train":               88,
		"phelinearregression_predict":             89,
		"phelogisticregression_train":             90,
		"phelogisticregression_predict":           91,
		"conditionpsi":                            92,
		"conditionalunionpsi":                     93,
		"unionpsi":                                94,
		"lgrtrainhuge":                            95,
		"lgrpredicthuge":                          96,
		"xgboosttrainhuge":                        97,
		"xgboostpredicthuge":                      98,
		"distributed_preprocessing_train":         99,
		"distributed_preprocessing_predict":       100,
		"distributed_xgboost_train":               101,
		"distributed_xgboost_predict":             102,
		"xgboostserver_prediction":                103,
		"localjoin":                               104,
		"unionpayloadpsi":                         105,
		"horizontalconditionalunionpsi":           106,
		"tableconcat":                             107,
		"bucketize":                               108,
		"poc_sampling":                            109,
		"pochlstmwords_train":                     110,
		"pochlstmwords_predict":                   111,
		"pochlstmtimes_train":                     112,
		"pochlstmtimes_predict":                   113,
		"horizontalxgboosttrainhuge":              114,
		"horizontalxgboostpredicthuge":            115,
		"featureconversion":                       116,
		"hlgrtrainhuge":                           117,
		"hlgrpredicthuge":                         118,
		"vdecisiontree_train":                     119,
		"vdecisiontree_predict":                   120,
		"hdecisiontree_train":                     121,
		"hdecisiontree_predict":                   122,
		"localopen":                               123,
		"localsplit":                              124,
		"isoperator":                              125,
		"privatesql":                              126,
		"preprocessing2_train":                    128,
		"preprocessing2_predict":                  129,
		"multiverticallogisticregression_train":   130,
		"multiverticallogisticregression_predict": 131,
		"scorecard":                               132,
		"multipleinnerproduct":                    133,
		"wukong_xgboost_train":                    134,
		"verticalcnn2_predict":                    135,
		"fuzzypsi":                                136,
		"isop":                                    137,
		"populationstabilityindex":                138,
		"localclassification":                     139,
		"fedclassification":                       140,
		"accountdistributionoverview":             141,
		"accountnumberassetoverview":              142,
		"assetdistribution":                       143,
		"fundoverview":                            144,
		"insuranceoverview":                       145,
		"transitionmatrix":                        146,
		"filter":                                  147,
		"multistatistics":                         148,
		"secretsharinglogisticregression_train":   149,
		"secretsharinglogisticregression_predict": 150,
		"federatedmedian":                         151,
		"pir":                                     152,
		"garbledcircuit_adder":                    153,
		"sampling":                                154,
		"wukong_psi":                              155,
	}
)

func (x Stage_Type) Enum() *Stage_Type {
	p := new(Stage_Type)
	*p = x
	return p
}

func (x Stage_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Stage_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[12].Descriptor()
}

func (Stage_Type) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[12]
}

func (x Stage_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Stage_Type.Descriptor instead.
func (Stage_Type) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{4, 0}
}

type Party_Role int32

const (
	Party_TUSITA  Party_Role = 0
	Party_FURNACE Party_Role = 1
)

// Enum value maps for Party_Role.
var (
	Party_Role_name = map[int32]string{
		0: "TUSITA",
		1: "FURNACE",
	}
	Party_Role_value = map[string]int32{
		"TUSITA":  0,
		"FURNACE": 1,
	}
)

func (x Party_Role) Enum() *Party_Role {
	p := new(Party_Role)
	*p = x
	return p
}

func (x Party_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Party_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[13].Descriptor()
}

func (Party_Role) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[13]
}

func (x Party_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Party_Role.Descriptor instead.
func (Party_Role) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{5, 0}
}

type Party_Action int32

const (
	Party_UNKNOWN_ACTION Party_Action = 0
	Party_LEAVE          Party_Action = 1
	Party_REGISTER       Party_Action = 2
	Party_PING           Party_Action = 3
	Party_APPROVE        Party_Action = 4
	Party_REJECT         Party_Action = 5
	Party_RECALL         Party_Action = 6
	Party_DELETE         Party_Action = 7
)

// Enum value maps for Party_Action.
var (
	Party_Action_name = map[int32]string{
		0: "UNKNOWN_ACTION",
		1: "LEAVE",
		2: "REGISTER",
		3: "PING",
		4: "APPROVE",
		5: "REJECT",
		6: "RECALL",
		7: "DELETE",
	}
	Party_Action_value = map[string]int32{
		"UNKNOWN_ACTION": 0,
		"LEAVE":          1,
		"REGISTER":       2,
		"PING":           3,
		"APPROVE":        4,
		"REJECT":         5,
		"RECALL":         6,
		"DELETE":         7,
	}
)

func (x Party_Action) Enum() *Party_Action {
	p := new(Party_Action)
	*p = x
	return p
}

func (x Party_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Party_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[14].Descriptor()
}

func (Party_Action) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[14]
}

func (x Party_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Party_Action.Descriptor instead.
func (Party_Action) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{5, 1}
}

type Party_Status int32

const (
	Party_UNKNOWN_STATUS Party_Status = 0
	Party_LEFT           Party_Status = 1
	Party_REGISTERING    Party_Status = 2
	Party_APPROVED       Party_Status = 3
	Party_REJECTED       Party_Status = 4
	Party_RECALLED       Party_Status = 5
	Party_DELETED        Party_Status = 6
)

// Enum value maps for Party_Status.
var (
	Party_Status_name = map[int32]string{
		0: "UNKNOWN_STATUS",
		1: "LEFT",
		2: "REGISTERING",
		3: "APPROVED",
		4: "REJECTED",
		5: "RECALLED",
		6: "DELETED",
	}
	Party_Status_value = map[string]int32{
		"UNKNOWN_STATUS": 0,
		"LEFT":           1,
		"REGISTERING":    2,
		"APPROVED":       3,
		"REJECTED":       4,
		"RECALLED":       5,
		"DELETED":        6,
	}
)

func (x Party_Status) Enum() *Party_Status {
	p := new(Party_Status)
	*p = x
	return p
}

func (x Party_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Party_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[15].Descriptor()
}

func (Party_Status) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[15]
}

func (x Party_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Party_Status.Descriptor instead.
func (Party_Status) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{5, 2}
}

type Datasource_Type int32

const (
	Datasource_UNKNOWN Datasource_Type = 0
	Datasource_FILE    Datasource_Type = 1
	Datasource_MYSQL   Datasource_Type = 2
	Datasource_HIVE    Datasource_Type = 3
	Datasource_ORACLE  Datasource_Type = 4
	// manipulate data source by io-bridge, also support adding new data source by dynamic config file
	Datasource_IO_BRIDGE Datasource_Type = 5
)

// Enum value maps for Datasource_Type.
var (
	Datasource_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "FILE",
		2: "MYSQL",
		3: "HIVE",
		4: "ORACLE",
		5: "IO_BRIDGE",
	}
	Datasource_Type_value = map[string]int32{
		"UNKNOWN":   0,
		"FILE":      1,
		"MYSQL":     2,
		"HIVE":      3,
		"ORACLE":    4,
		"IO_BRIDGE": 5,
	}
)

func (x Datasource_Type) Enum() *Datasource_Type {
	p := new(Datasource_Type)
	*p = x
	return p
}

func (x Datasource_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Datasource_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[16].Descriptor()
}

func (Datasource_Type) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[16]
}

func (x Datasource_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Datasource_Type.Descriptor instead.
func (Datasource_Type) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{6, 0}
}

type Datasource_Status int32

const (
	Datasource_UNKNOWN_STATUS Datasource_Status = 0
	Datasource_INACTIVE       Datasource_Status = 1
	Datasource_ACTIVE         Datasource_Status = 2
)

// Enum value maps for Datasource_Status.
var (
	Datasource_Status_name = map[int32]string{
		0: "UNKNOWN_STATUS",
		1: "INACTIVE",
		2: "ACTIVE",
	}
	Datasource_Status_value = map[string]int32{
		"UNKNOWN_STATUS": 0,
		"INACTIVE":       1,
		"ACTIVE":         2,
	}
)

func (x Datasource_Status) Enum() *Datasource_Status {
	p := new(Datasource_Status)
	*p = x
	return p
}

func (x Datasource_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Datasource_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[17].Descriptor()
}

func (Datasource_Status) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[17]
}

func (x Datasource_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Datasource_Status.Descriptor instead.
func (Datasource_Status) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{6, 1}
}

type Datainfo_DataType int32

const (
	Datainfo_UNKNOWN_DATA Datainfo_DataType = 0
	Datainfo_VTABLE       Datainfo_DataType = 1
	Datainfo_ARTIFACT     Datainfo_DataType = 2
	Datainfo_MODELPACK    Datainfo_DataType = 3
)

// Enum value maps for Datainfo_DataType.
var (
	Datainfo_DataType_name = map[int32]string{
		0: "UNKNOWN_DATA",
		1: "VTABLE",
		2: "ARTIFACT",
		3: "MODELPACK",
	}
	Datainfo_DataType_value = map[string]int32{
		"UNKNOWN_DATA": 0,
		"VTABLE":       1,
		"ARTIFACT":     2,
		"MODELPACK":    3,
	}
)

func (x Datainfo_DataType) Enum() *Datainfo_DataType {
	p := new(Datainfo_DataType)
	*p = x
	return p
}

func (x Datainfo_DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Datainfo_DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[18].Descriptor()
}

func (Datainfo_DataType) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[18]
}

func (x Datainfo_DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Datainfo_DataType.Descriptor instead.
func (Datainfo_DataType) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{7, 0}
}

type Datainfo_PhysicalStatus int32

const (
	Datainfo_UNKNOWN_STATUS Datainfo_PhysicalStatus = 0
	// deleted = empty
	Datainfo_EMPTY   Datainfo_PhysicalStatus = 1
	Datainfo_WRITING Datainfo_PhysicalStatus = 2
	Datainfo_READY   Datainfo_PhysicalStatus = 3
)

// Enum value maps for Datainfo_PhysicalStatus.
var (
	Datainfo_PhysicalStatus_name = map[int32]string{
		0: "UNKNOWN_STATUS",
		1: "EMPTY",
		2: "WRITING",
		3: "READY",
	}
	Datainfo_PhysicalStatus_value = map[string]int32{
		"UNKNOWN_STATUS": 0,
		"EMPTY":          1,
		"WRITING":        2,
		"READY":          3,
	}
)

func (x Datainfo_PhysicalStatus) Enum() *Datainfo_PhysicalStatus {
	p := new(Datainfo_PhysicalStatus)
	*p = x
	return p
}

func (x Datainfo_PhysicalStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Datainfo_PhysicalStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[19].Descriptor()
}

func (Datainfo_PhysicalStatus) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[19]
}

func (x Datainfo_PhysicalStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Datainfo_PhysicalStatus.Descriptor instead.
func (Datainfo_PhysicalStatus) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{7, 1}
}

type VirtualTable_Status int32

const (
	VirtualTable_UNKNOWN_STATUS VirtualTable_Status = 0
	// prepare and try to write to table
	VirtualTable_DRAFT VirtualTable_Status = 1
	// generated table
	VirtualTable_SUBMITED     VirtualTable_Status = 2
	VirtualTable_VERIFIED     VirtualTable_Status = 3
	VirtualTable_APPROVED     VirtualTable_Status = 4
	VirtualTable_IN_STOCK     VirtualTable_Status = 5
	VirtualTable_OUT_OF_STOCK VirtualTable_Status = 6
	VirtualTable_PRIVATE      VirtualTable_Status = 7
	VirtualTable_DEPRECATION  VirtualTable_Status = 8
	// table not exist
	VirtualTable_DELETED VirtualTable_Status = 9
)

// Enum value maps for VirtualTable_Status.
var (
	VirtualTable_Status_name = map[int32]string{
		0: "UNKNOWN_STATUS",
		1: "DRAFT",
		2: "SUBMITED",
		3: "VERIFIED",
		4: "APPROVED",
		5: "IN_STOCK",
		6: "OUT_OF_STOCK",
		7: "PRIVATE",
		8: "DEPRECATION",
		9: "DELETED",
	}
	VirtualTable_Status_value = map[string]int32{
		"UNKNOWN_STATUS": 0,
		"DRAFT":          1,
		"SUBMITED":       2,
		"VERIFIED":       3,
		"APPROVED":       4,
		"IN_STOCK":       5,
		"OUT_OF_STOCK":   6,
		"PRIVATE":        7,
		"DEPRECATION":    8,
		"DELETED":        9,
	}
)

func (x VirtualTable_Status) Enum() *VirtualTable_Status {
	p := new(VirtualTable_Status)
	*p = x
	return p
}

func (x VirtualTable_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VirtualTable_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[20].Descriptor()
}

func (VirtualTable_Status) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[20]
}

func (x VirtualTable_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VirtualTable_Status.Descriptor instead.
func (VirtualTable_Status) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{8, 0}
}

type VirtualTable_SourceType int32

const (
	VirtualTable_ALL_SOURCE VirtualTable_SourceType = 0
	VirtualTable_ORIGINAL   VirtualTable_SourceType = 1
	VirtualTable_AUTO_GENED VirtualTable_SourceType = 2
)

// Enum value maps for VirtualTable_SourceType.
var (
	VirtualTable_SourceType_name = map[int32]string{
		0: "ALL_SOURCE",
		1: "ORIGINAL",
		2: "AUTO_GENED",
	}
	VirtualTable_SourceType_value = map[string]int32{
		"ALL_SOURCE": 0,
		"ORIGINAL":   1,
		"AUTO_GENED": 2,
	}
)

func (x VirtualTable_SourceType) Enum() *VirtualTable_SourceType {
	p := new(VirtualTable_SourceType)
	*p = x
	return p
}

func (x VirtualTable_SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VirtualTable_SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[21].Descriptor()
}

func (VirtualTable_SourceType) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[21]
}

func (x VirtualTable_SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VirtualTable_SourceType.Descriptor instead.
func (VirtualTable_SourceType) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{8, 1}
}

type VirtualTable_Authorization int32

const (
	VirtualTable_ALL_AUTHORIZATION VirtualTable_Authorization = 0
	VirtualTable_AUTHORIZED        VirtualTable_Authorization = 1
	VirtualTable_UNAUTHORIZED      VirtualTable_Authorization = 2
)

// Enum value maps for VirtualTable_Authorization.
var (
	VirtualTable_Authorization_name = map[int32]string{
		0: "ALL_AUTHORIZATION",
		1: "AUTHORIZED",
		2: "UNAUTHORIZED",
	}
	VirtualTable_Authorization_value = map[string]int32{
		"ALL_AUTHORIZATION": 0,
		"AUTHORIZED":        1,
		"UNAUTHORIZED":      2,
	}
)

func (x VirtualTable_Authorization) Enum() *VirtualTable_Authorization {
	p := new(VirtualTable_Authorization)
	*p = x
	return p
}

func (x VirtualTable_Authorization) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VirtualTable_Authorization) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[22].Descriptor()
}

func (VirtualTable_Authorization) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[22]
}

func (x VirtualTable_Authorization) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VirtualTable_Authorization.Descriptor instead.
func (VirtualTable_Authorization) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{8, 2}
}

type VirtualTable_ShadowShape int32

const (
	VirtualTable_UNKNOWN_SHADOW VirtualTable_ShadowShape = 0
	VirtualTable_SHADOW         VirtualTable_ShadowShape = 1
	VirtualTable_UN_SHADOW      VirtualTable_ShadowShape = 2
)

// Enum value maps for VirtualTable_ShadowShape.
var (
	VirtualTable_ShadowShape_name = map[int32]string{
		0: "UNKNOWN_SHADOW",
		1: "SHADOW",
		2: "UN_SHADOW",
	}
	VirtualTable_ShadowShape_value = map[string]int32{
		"UNKNOWN_SHADOW": 0,
		"SHADOW":         1,
		"UN_SHADOW":      2,
	}
)

func (x VirtualTable_ShadowShape) Enum() *VirtualTable_ShadowShape {
	p := new(VirtualTable_ShadowShape)
	*p = x
	return p
}

func (x VirtualTable_ShadowShape) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VirtualTable_ShadowShape) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[23].Descriptor()
}

func (VirtualTable_ShadowShape) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[23]
}

func (x VirtualTable_ShadowShape) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VirtualTable_ShadowShape.Descriptor instead.
func (VirtualTable_ShadowShape) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{8, 3}
}

type VirtualTable_ShareFiltrate int32

const (
	VirtualTable_ALL_RECORD VirtualTable_ShareFiltrate = 0
	VirtualTable_SHARED     VirtualTable_ShareFiltrate = 1
	VirtualTable_UN_SHARED  VirtualTable_ShareFiltrate = 2
)

// Enum value maps for VirtualTable_ShareFiltrate.
var (
	VirtualTable_ShareFiltrate_name = map[int32]string{
		0: "ALL_RECORD",
		1: "SHARED",
		2: "UN_SHARED",
	}
	VirtualTable_ShareFiltrate_value = map[string]int32{
		"ALL_RECORD": 0,
		"SHARED":     1,
		"UN_SHARED":  2,
	}
)

func (x VirtualTable_ShareFiltrate) Enum() *VirtualTable_ShareFiltrate {
	p := new(VirtualTable_ShareFiltrate)
	*p = x
	return p
}

func (x VirtualTable_ShareFiltrate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VirtualTable_ShareFiltrate) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[24].Descriptor()
}

func (VirtualTable_ShareFiltrate) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[24]
}

func (x VirtualTable_ShareFiltrate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VirtualTable_ShareFiltrate.Descriptor instead.
func (VirtualTable_ShareFiltrate) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{8, 4}
}

type VirtualTable_VTableType int32

const (
	VirtualTable_TYPE_UNKNOWN_TABLE VirtualTable_VTableType = 0
	VirtualTable_TYPE_VIRTUAL_TABLE VirtualTable_VTableType = 1
)

// Enum value maps for VirtualTable_VTableType.
var (
	VirtualTable_VTableType_name = map[int32]string{
		0: "TYPE_UNKNOWN_TABLE",
		1: "TYPE_VIRTUAL_TABLE",
	}
	VirtualTable_VTableType_value = map[string]int32{
		"TYPE_UNKNOWN_TABLE": 0,
		"TYPE_VIRTUAL_TABLE": 1,
	}
)

func (x VirtualTable_VTableType) Enum() *VirtualTable_VTableType {
	p := new(VirtualTable_VTableType)
	*p = x
	return p
}

func (x VirtualTable_VTableType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VirtualTable_VTableType) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[25].Descriptor()
}

func (VirtualTable_VTableType) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[25]
}

func (x VirtualTable_VTableType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VirtualTable_VTableType.Descriptor instead.
func (VirtualTable_VTableType) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{8, 5}
}

type VirtualTable_Suffix int32

const (
	VirtualTable_UNKNOWN_SUFFIX VirtualTable_Suffix = 0
	VirtualTable_CHARTS         VirtualTable_Suffix = 1
	VirtualTable_CSV            VirtualTable_Suffix = 2
	VirtualTable_TABLE          VirtualTable_Suffix = 3
)

// Enum value maps for VirtualTable_Suffix.
var (
	VirtualTable_Suffix_name = map[int32]string{
		0: "UNKNOWN_SUFFIX",
		1: "CHARTS",
		2: "CSV",
		3: "TABLE",
	}
	VirtualTable_Suffix_value = map[string]int32{
		"UNKNOWN_SUFFIX": 0,
		"CHARTS":         1,
		"CSV":            2,
		"TABLE":          3,
	}
)

func (x VirtualTable_Suffix) Enum() *VirtualTable_Suffix {
	p := new(VirtualTable_Suffix)
	*p = x
	return p
}

func (x VirtualTable_Suffix) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VirtualTable_Suffix) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[26].Descriptor()
}

func (VirtualTable_Suffix) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[26]
}

func (x VirtualTable_Suffix) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VirtualTable_Suffix.Descriptor instead.
func (VirtualTable_Suffix) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{8, 6}
}

type Perm_Action int32

const (
	Perm_UNKNOWN Perm_Action = 0
	Perm_GET     Perm_Action = 1
	Perm_EXECUTE Perm_Action = 2
	Perm_POST    Perm_Action = 3
	Perm_PUT     Perm_Action = 4
	Perm_DELETE  Perm_Action = 5
	Perm_ALL     Perm_Action = 6
	Perm_PATCH   Perm_Action = 7
)

// Enum value maps for Perm_Action.
var (
	Perm_Action_name = map[int32]string{
		0: "UNKNOWN",
		1: "GET",
		2: "EXECUTE",
		3: "POST",
		4: "PUT",
		5: "DELETE",
		6: "ALL",
		7: "PATCH",
	}
	Perm_Action_value = map[string]int32{
		"UNKNOWN": 0,
		"GET":     1,
		"EXECUTE": 2,
		"POST":    3,
		"PUT":     4,
		"DELETE":  5,
		"ALL":     6,
		"PATCH":   7,
	}
)

func (x Perm_Action) Enum() *Perm_Action {
	p := new(Perm_Action)
	*p = x
	return p
}

func (x Perm_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Perm_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[27].Descriptor()
}

func (Perm_Action) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[27]
}

func (x Perm_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Perm_Action.Descriptor instead.
func (Perm_Action) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{9, 0}
}

type Order_Status int32

const (
	Order_UNKNOWN Order_Status = 0
	// draft（buyer - can be submitted）
	Order_DRAFT Order_Status = 1
	//（submit）submitted （seller - can be reviewed）
	Order_SUBMITED Order_Status = 2
	// (approve）approved （buyer - can be billed）
	Order_APPROVED Order_Status = 3
	//（deny）review denied
	Order_DENIED Order_Status = 4
	//（pay）paid （seller - can be confirmed）
	Order_PAID Order_Status = 5
	//（confirm) payment confirmed
	Order_CONFIRMED Order_Status = 6
	// shipped
	Order_SHIPED Order_Status = 7
	// (close) closed
	Order_CLOSED Order_Status = 8
)

// Enum value maps for Order_Status.
var (
	Order_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "DRAFT",
		2: "SUBMITED",
		3: "APPROVED",
		4: "DENIED",
		5: "PAID",
		6: "CONFIRMED",
		7: "SHIPED",
		8: "CLOSED",
	}
	Order_Status_value = map[string]int32{
		"UNKNOWN":   0,
		"DRAFT":     1,
		"SUBMITED":  2,
		"APPROVED":  3,
		"DENIED":    4,
		"PAID":      5,
		"CONFIRMED": 6,
		"SHIPED":    7,
		"CLOSED":    8,
	}
)

func (x Order_Status) Enum() *Order_Status {
	p := new(Order_Status)
	*p = x
	return p
}

func (x Order_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[28].Descriptor()
}

func (Order_Status) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[28]
}

func (x Order_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Order_Status.Descriptor instead.
func (Order_Status) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{10, 0}
}

type InputOutput_Type int32

const (
	InputOutput_UNKNOWN InputOutput_Type = 0
	// iff output
	InputOutput_DATASRC  InputOutput_Type = 1
	InputOutput_VTABLE   InputOutput_Type = 2
	InputOutput_ARTIFACT InputOutput_Type = 3
	// only if input
	InputOutput_UPSTREAM InputOutput_Type = 4
)

// Enum value maps for InputOutput_Type.
var (
	InputOutput_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "DATASRC",
		2: "VTABLE",
		3: "ARTIFACT",
		4: "UPSTREAM",
	}
	InputOutput_Type_value = map[string]int32{
		"UNKNOWN":  0,
		"DATASRC":  1,
		"VTABLE":   2,
		"ARTIFACT": 3,
		"UPSTREAM": 4,
	}
)

func (x InputOutput_Type) Enum() *InputOutput_Type {
	p := new(InputOutput_Type)
	*p = x
	return p
}

func (x InputOutput_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InputOutput_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[29].Descriptor()
}

func (InputOutput_Type) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[29]
}

func (x InputOutput_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InputOutput_Type.Descriptor instead.
func (InputOutput_Type) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{11, 0}
}

type Aritifact_Type int32

const (
	Aritifact_UNKNOWN Aritifact_Type = 0
	// .lgr.model, .xgb.model, .prep.model?
	Aritifact_MODEL Aritifact_Type = 1
	// .report.json
	Aritifact_REPORT Aritifact_Type = 2
	Aritifact_OTHERS Aritifact_Type = 3
)

// Enum value maps for Aritifact_Type.
var (
	Aritifact_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "MODEL",
		2: "REPORT",
		3: "OTHERS",
	}
	Aritifact_Type_value = map[string]int32{
		"UNKNOWN": 0,
		"MODEL":   1,
		"REPORT":  2,
		"OTHERS":  3,
	}
)

func (x Aritifact_Type) Enum() *Aritifact_Type {
	p := new(Aritifact_Type)
	*p = x
	return p
}

func (x Aritifact_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Aritifact_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[30].Descriptor()
}

func (Aritifact_Type) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[30]
}

func (x Aritifact_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Aritifact_Type.Descriptor instead.
func (Aritifact_Type) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{12, 0}
}

type Aritifact_Status int32

const (
	Aritifact_UNKNOWN_STATUS Aritifact_Status = 0
	Aritifact_DRAFT          Aritifact_Status = 1
	Aritifact_COMPLETED      Aritifact_Status = 2
	Aritifact_DELETED        Aritifact_Status = 3
)

// Enum value maps for Aritifact_Status.
var (
	Aritifact_Status_name = map[int32]string{
		0: "UNKNOWN_STATUS",
		1: "DRAFT",
		2: "COMPLETED",
		3: "DELETED",
	}
	Aritifact_Status_value = map[string]int32{
		"UNKNOWN_STATUS": 0,
		"DRAFT":          1,
		"COMPLETED":      2,
		"DELETED":        3,
	}
)

func (x Aritifact_Status) Enum() *Aritifact_Status {
	p := new(Aritifact_Status)
	*p = x
	return p
}

func (x Aritifact_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Aritifact_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[31].Descriptor()
}

func (Aritifact_Status) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[31]
}

func (x Aritifact_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Aritifact_Status.Descriptor instead.
func (Aritifact_Status) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{12, 1}
}

type Project_Status int32

const (
	Project_ALL    Project_Status = 0
	Project_OPEN   Project_Status = 1
	Project_CLOSED Project_Status = 2
)

// Enum value maps for Project_Status.
var (
	Project_Status_name = map[int32]string{
		0: "ALL",
		1: "OPEN",
		2: "CLOSED",
	}
	Project_Status_value = map[string]int32{
		"ALL":    0,
		"OPEN":   1,
		"CLOSED": 2,
	}
)

func (x Project_Status) Enum() *Project_Status {
	p := new(Project_Status)
	*p = x
	return p
}

func (x Project_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Project_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[32].Descriptor()
}

func (Project_Status) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[32]
}

func (x Project_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Project_Status.Descriptor instead.
func (Project_Status) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{13, 0}
}

type Project_ProgramCategory int32

const (
	Project_UNKNOWN_PROGRAM_CATEGORY Project_ProgramCategory = 0
	Project_GBA_AUTO_PROJECT         Project_ProgramCategory = 1
)

// Enum value maps for Project_ProgramCategory.
var (
	Project_ProgramCategory_name = map[int32]string{
		0: "UNKNOWN_PROGRAM_CATEGORY",
		1: "GBA_AUTO_PROJECT",
	}
	Project_ProgramCategory_value = map[string]int32{
		"UNKNOWN_PROGRAM_CATEGORY": 0,
		"GBA_AUTO_PROJECT":         1,
	}
)

func (x Project_ProgramCategory) Enum() *Project_ProgramCategory {
	p := new(Project_ProgramCategory)
	*p = x
	return p
}

func (x Project_ProgramCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Project_ProgramCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[33].Descriptor()
}

func (Project_ProgramCategory) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[33]
}

func (x Project_ProgramCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Project_ProgramCategory.Descriptor instead.
func (Project_ProgramCategory) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{13, 1}
}

type Project_ABILITY int32

const (
	Project_UNKNOWN_ABILITY Project_ABILITY = 0
	Project_ENABLE          Project_ABILITY = 1
	Project_DISABLE         Project_ABILITY = 2
)

// Enum value maps for Project_ABILITY.
var (
	Project_ABILITY_name = map[int32]string{
		0: "UNKNOWN_ABILITY",
		1: "ENABLE",
		2: "DISABLE",
	}
	Project_ABILITY_value = map[string]int32{
		"UNKNOWN_ABILITY": 0,
		"ENABLE":          1,
		"DISABLE":         2,
	}
)

func (x Project_ABILITY) Enum() *Project_ABILITY {
	p := new(Project_ABILITY)
	*p = x
	return p
}

func (x Project_ABILITY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Project_ABILITY) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[34].Descriptor()
}

func (Project_ABILITY) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[34]
}

func (x Project_ABILITY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Project_ABILITY.Descriptor instead.
func (Project_ABILITY) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{13, 2}
}

type Project_Member_Type int32

const (
	Project_Member_UNKNOWN_TYPE Project_Member_Type = 0
	Project_Member_OWNER        Project_Member_Type = 1
	Project_Member_JOINER       Project_Member_Type = 2
)

// Enum value maps for Project_Member_Type.
var (
	Project_Member_Type_name = map[int32]string{
		0: "UNKNOWN_TYPE",
		1: "OWNER",
		2: "JOINER",
	}
	Project_Member_Type_value = map[string]int32{
		"UNKNOWN_TYPE": 0,
		"OWNER":        1,
		"JOINER":       2,
	}
)

func (x Project_Member_Type) Enum() *Project_Member_Type {
	p := new(Project_Member_Type)
	*p = x
	return p
}

func (x Project_Member_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Project_Member_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[35].Descriptor()
}

func (Project_Member_Type) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[35]
}

func (x Project_Member_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Project_Member_Type.Descriptor instead.
func (Project_Member_Type) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{13, 0, 0}
}

type Project_Member_Action int32

const (
	Project_Member_UNKNOWN_ACTION Project_Member_Action = 0
	Project_Member_JOIN_PROJECT   Project_Member_Action = 1
	// party quits project
	Project_Member_QUIT_PROJECT   Project_Member_Action = 2
	Project_Member_INVITE_PARTY   Project_Member_Action = 3
	Project_Member_KICK_PARTY     Project_Member_Action = 4
	Project_Member_CLOSE_PROJECT  Project_Member_Action = 5
	Project_Member_UPDATE_PROJECT Project_Member_Action = 6
	Project_Member_GET_PROJECT    Project_Member_Action = 7
	Project_Member_CREATE_PROJECT Project_Member_Action = 8
)

// Enum value maps for Project_Member_Action.
var (
	Project_Member_Action_name = map[int32]string{
		0: "UNKNOWN_ACTION",
		1: "JOIN_PROJECT",
		2: "QUIT_PROJECT",
		3: "INVITE_PARTY",
		4: "KICK_PARTY",
		5: "CLOSE_PROJECT",
		6: "UPDATE_PROJECT",
		7: "GET_PROJECT",
		8: "CREATE_PROJECT",
	}
	Project_Member_Action_value = map[string]int32{
		"UNKNOWN_ACTION": 0,
		"JOIN_PROJECT":   1,
		"QUIT_PROJECT":   2,
		"INVITE_PARTY":   3,
		"KICK_PARTY":     4,
		"CLOSE_PROJECT":  5,
		"UPDATE_PROJECT": 6,
		"GET_PROJECT":    7,
		"CREATE_PROJECT": 8,
	}
)

func (x Project_Member_Action) Enum() *Project_Member_Action {
	p := new(Project_Member_Action)
	*p = x
	return p
}

func (x Project_Member_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Project_Member_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[36].Descriptor()
}

func (Project_Member_Action) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[36]
}

func (x Project_Member_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Project_Member_Action.Descriptor instead.
func (Project_Member_Action) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{13, 0, 1}
}

type Project_Member_Status int32

const (
	Project_Member_UNKNOWN_STATUS Project_Member_Status = 0
	Project_Member_JOINED         Project_Member_Status = 1
	Project_Member_TO_JOIN        Project_Member_Status = 2
	Project_Member_KICKED         Project_Member_Status = 3
	Project_Member_QUITIED        Project_Member_Status = 4
)

// Enum value maps for Project_Member_Status.
var (
	Project_Member_Status_name = map[int32]string{
		0: "UNKNOWN_STATUS",
		1: "JOINED",
		2: "TO_JOIN",
		3: "KICKED",
		4: "QUITIED",
	}
	Project_Member_Status_value = map[string]int32{
		"UNKNOWN_STATUS": 0,
		"JOINED":         1,
		"TO_JOIN":        2,
		"KICKED":         3,
		"QUITIED":        4,
	}
)

func (x Project_Member_Status) Enum() *Project_Member_Status {
	p := new(Project_Member_Status)
	*p = x
	return p
}

func (x Project_Member_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Project_Member_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[37].Descriptor()
}

func (Project_Member_Status) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[37]
}

func (x Project_Member_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Project_Member_Status.Descriptor instead.
func (Project_Member_Status) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{13, 0, 2}
}

type Project_User_Type int32

const (
	Project_User_UNKNOWN_TYPE Project_User_Type = 0
	Project_User_MEMBER       Project_User_Type = 1
	Project_User_MANAGER      Project_User_Type = 2
	Project_User_CREATOR      Project_User_Type = 3
)

// Enum value maps for Project_User_Type.
var (
	Project_User_Type_name = map[int32]string{
		0: "UNKNOWN_TYPE",
		1: "MEMBER",
		2: "MANAGER",
		3: "CREATOR",
	}
	Project_User_Type_value = map[string]int32{
		"UNKNOWN_TYPE": 0,
		"MEMBER":       1,
		"MANAGER":      2,
		"CREATOR":      3,
	}
)

func (x Project_User_Type) Enum() *Project_User_Type {
	p := new(Project_User_Type)
	*p = x
	return p
}

func (x Project_User_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Project_User_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[38].Descriptor()
}

func (Project_User_Type) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[38]
}

func (x Project_User_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Project_User_Type.Descriptor instead.
func (Project_User_Type) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{13, 1, 0}
}

type Project_User_Action int32

const (
	Project_User_UNKNOWN_ACTION Project_User_Action = 0
	Project_User_JOIN_PROJECT   Project_User_Action = 1
	// party quits project
	Project_User_QUIT_PROJECT   Project_User_Action = 2
	Project_User_INVITE_PARTY   Project_User_Action = 3
	Project_User_KICK_PARTY     Project_User_Action = 4
	Project_User_CLOSE_PROJECT  Project_User_Action = 5
	Project_User_UPDATE_PROJECT Project_User_Action = 6
	Project_User_ADD_USER       Project_User_Action = 7
	Project_User_KICK_USER      Project_User_Action = 8
	Project_User_GET_PROJECT    Project_User_Action = 9
	Project_User_CREATE_PROJECT Project_User_Action = 10
	// user leaves project
	Project_User_LEAVE_PROJECT Project_User_Action = 11
	Project_User_ATTACH_VTABLE Project_User_Action = 12
)

// Enum value maps for Project_User_Action.
var (
	Project_User_Action_name = map[int32]string{
		0:  "UNKNOWN_ACTION",
		1:  "JOIN_PROJECT",
		2:  "QUIT_PROJECT",
		3:  "INVITE_PARTY",
		4:  "KICK_PARTY",
		5:  "CLOSE_PROJECT",
		6:  "UPDATE_PROJECT",
		7:  "ADD_USER",
		8:  "KICK_USER",
		9:  "GET_PROJECT",
		10: "CREATE_PROJECT",
		11: "LEAVE_PROJECT",
		12: "ATTACH_VTABLE",
	}
	Project_User_Action_value = map[string]int32{
		"UNKNOWN_ACTION": 0,
		"JOIN_PROJECT":   1,
		"QUIT_PROJECT":   2,
		"INVITE_PARTY":   3,
		"KICK_PARTY":     4,
		"CLOSE_PROJECT":  5,
		"UPDATE_PROJECT": 6,
		"ADD_USER":       7,
		"KICK_USER":      8,
		"GET_PROJECT":    9,
		"CREATE_PROJECT": 10,
		"LEAVE_PROJECT":  11,
		"ATTACH_VTABLE":  12,
	}
)

func (x Project_User_Action) Enum() *Project_User_Action {
	p := new(Project_User_Action)
	*p = x
	return p
}

func (x Project_User_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Project_User_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[39].Descriptor()
}

func (Project_User_Action) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[39]
}

func (x Project_User_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Project_User_Action.Descriptor instead.
func (Project_User_Action) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{13, 1, 1}
}

type Stats_Action int32

const (
	Stats_UNKNOWN Stats_Action = 0
	// project - 1xx
	Stats_PROJECT_VIEW Stats_Action = 101
	// task - 2xx
	Stats_TASK_SUCCESS Stats_Action = 201
	Stats_TASK_FAIL    Stats_Action = 202
	Stats_TASK_OTHERS  Stats_Action = 203
	// vtable - 3xx
	Stats_VTABLE_REAL    Stats_Action = 301
	Stats_VTABLE_AUTOGEN Stats_Action = 302
	Stats_VTABLE_USE     Stats_Action = 303
)

// Enum value maps for Stats_Action.
var (
	Stats_Action_name = map[int32]string{
		0:   "UNKNOWN",
		101: "PROJECT_VIEW",
		201: "TASK_SUCCESS",
		202: "TASK_FAIL",
		203: "TASK_OTHERS",
		301: "VTABLE_REAL",
		302: "VTABLE_AUTOGEN",
		303: "VTABLE_USE",
	}
	Stats_Action_value = map[string]int32{
		"UNKNOWN":        0,
		"PROJECT_VIEW":   101,
		"TASK_SUCCESS":   201,
		"TASK_FAIL":      202,
		"TASK_OTHERS":    203,
		"VTABLE_REAL":    301,
		"VTABLE_AUTOGEN": 302,
		"VTABLE_USE":     303,
	}
)

func (x Stats_Action) Enum() *Stats_Action {
	p := new(Stats_Action)
	*p = x
	return p
}

func (x Stats_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Stats_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[40].Descriptor()
}

func (Stats_Action) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[40]
}

func (x Stats_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Stats_Action.Descriptor instead.
func (Stats_Action) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{14, 0}
}

type Stats_GroupBy int32

const (
	Stats_DATE  Stats_GroupBy = 0
	Stats_MONTH Stats_GroupBy = 1
	Stats_YEAR  Stats_GroupBy = 2
)

// Enum value maps for Stats_GroupBy.
var (
	Stats_GroupBy_name = map[int32]string{
		0: "DATE",
		1: "MONTH",
		2: "YEAR",
	}
	Stats_GroupBy_value = map[string]int32{
		"DATE":  0,
		"MONTH": 1,
		"YEAR":  2,
	}
)

func (x Stats_GroupBy) Enum() *Stats_GroupBy {
	p := new(Stats_GroupBy)
	*p = x
	return p
}

func (x Stats_GroupBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Stats_GroupBy) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[41].Descriptor()
}

func (Stats_GroupBy) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[41]
}

func (x Stats_GroupBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Stats_GroupBy.Descriptor instead.
func (Stats_GroupBy) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{14, 1}
}

type ModelPack_ModelType int32

const (
	ModelPack_UNKNOWN ModelPack_ModelType = 0
	ModelPack_MIXED   ModelPack_ModelType = 1
	ModelPack_XGB     ModelPack_ModelType = 2
	ModelPack_LGR     ModelPack_ModelType = 3
	ModelPack_LR      ModelPack_ModelType = 4
	ModelPack_CNN     ModelPack_ModelType = 5
)

// Enum value maps for ModelPack_ModelType.
var (
	ModelPack_ModelType_name = map[int32]string{
		0: "UNKNOWN",
		1: "MIXED",
		2: "XGB",
		3: "LGR",
		4: "LR",
		5: "CNN",
	}
	ModelPack_ModelType_value = map[string]int32{
		"UNKNOWN": 0,
		"MIXED":   1,
		"XGB":     2,
		"LGR":     3,
		"LR":      4,
		"CNN":     5,
	}
)

func (x ModelPack_ModelType) Enum() *ModelPack_ModelType {
	p := new(ModelPack_ModelType)
	*p = x
	return p
}

func (x ModelPack_ModelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelPack_ModelType) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[42].Descriptor()
}

func (ModelPack_ModelType) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[42]
}

func (x ModelPack_ModelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelPack_ModelType.Descriptor instead.
func (ModelPack_ModelType) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{15, 0}
}

type UserBookmark_Action int32

const (
	UserBookmark_UNKNOWN_ACT UserBookmark_Action = 0
	UserBookmark_ADD         UserBookmark_Action = 1
	UserBookmark_REMOVE      UserBookmark_Action = 2
)

// Enum value maps for UserBookmark_Action.
var (
	UserBookmark_Action_name = map[int32]string{
		0: "UNKNOWN_ACT",
		1: "ADD",
		2: "REMOVE",
	}
	UserBookmark_Action_value = map[string]int32{
		"UNKNOWN_ACT": 0,
		"ADD":         1,
		"REMOVE":      2,
	}
)

func (x UserBookmark_Action) Enum() *UserBookmark_Action {
	p := new(UserBookmark_Action)
	*p = x
	return p
}

func (x UserBookmark_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserBookmark_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[43].Descriptor()
}

func (UserBookmark_Action) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[43]
}

func (x UserBookmark_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserBookmark_Action.Descriptor instead.
func (UserBookmark_Action) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{16, 0}
}

type UserBookmark_Type int32

const (
	UserBookmark_UNKNOWN   UserBookmark_Type = 0
	UserBookmark_MODELPACK UserBookmark_Type = 1
)

// Enum value maps for UserBookmark_Type.
var (
	UserBookmark_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "MODELPACK",
	}
	UserBookmark_Type_value = map[string]int32{
		"UNKNOWN":   0,
		"MODELPACK": 1,
	}
)

func (x UserBookmark_Type) Enum() *UserBookmark_Type {
	p := new(UserBookmark_Type)
	*p = x
	return p
}

func (x UserBookmark_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserBookmark_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[44].Descriptor()
}

func (UserBookmark_Type) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[44]
}

func (x UserBookmark_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserBookmark_Type.Descriptor instead.
func (UserBookmark_Type) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{16, 1}
}

type ReadDataApplication_Status int32

const (
	ReadDataApplication_UNKNOWN_STATUS ReadDataApplication_Status = 0
	// in review
	ReadDataApplication_OPEN     ReadDataApplication_Status = 1
	ReadDataApplication_DENIED   ReadDataApplication_Status = 2
	ReadDataApplication_ACCEPTED ReadDataApplication_Status = 3
)

// Enum value maps for ReadDataApplication_Status.
var (
	ReadDataApplication_Status_name = map[int32]string{
		0: "UNKNOWN_STATUS",
		1: "OPEN",
		2: "DENIED",
		3: "ACCEPTED",
	}
	ReadDataApplication_Status_value = map[string]int32{
		"UNKNOWN_STATUS": 0,
		"OPEN":           1,
		"DENIED":         2,
		"ACCEPTED":       3,
	}
)

func (x ReadDataApplication_Status) Enum() *ReadDataApplication_Status {
	p := new(ReadDataApplication_Status)
	*p = x
	return p
}

func (x ReadDataApplication_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadDataApplication_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[45].Descriptor()
}

func (ReadDataApplication_Status) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[45]
}

func (x ReadDataApplication_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReadDataApplication_Status.Descriptor instead.
func (ReadDataApplication_Status) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{17, 0}
}

type ReadDataApplication_Action int32

const (
	ReadDataApplication_UNKNOWN_ACTION ReadDataApplication_Action = 0
	ReadDataApplication_APPROVE        ReadDataApplication_Action = 1
	ReadDataApplication_CANCEL         ReadDataApplication_Action = 2
	ReadDataApplication_DENY           ReadDataApplication_Action = 3
	ReadDataApplication_REAPPLY        ReadDataApplication_Action = 4
)

// Enum value maps for ReadDataApplication_Action.
var (
	ReadDataApplication_Action_name = map[int32]string{
		0: "UNKNOWN_ACTION",
		1: "APPROVE",
		2: "CANCEL",
		3: "DENY",
		4: "REAPPLY",
	}
	ReadDataApplication_Action_value = map[string]int32{
		"UNKNOWN_ACTION": 0,
		"APPROVE":        1,
		"CANCEL":         2,
		"DENY":           3,
		"REAPPLY":        4,
	}
)

func (x ReadDataApplication_Action) Enum() *ReadDataApplication_Action {
	p := new(ReadDataApplication_Action)
	*p = x
	return p
}

func (x ReadDataApplication_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadDataApplication_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[46].Descriptor()
}

func (ReadDataApplication_Action) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[46]
}

func (x ReadDataApplication_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReadDataApplication_Action.Descriptor instead.
func (ReadDataApplication_Action) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{17, 1}
}

type Service_Type int32

const (
	Service_UNKNOWN_TYPE Service_Type = 0
	// Private Information Retrieval
	//
	// Deprecated: Do not use.
	Service_PIR     Service_Type = 1
	Service_PREDICT Service_Type = 2
	// Deprecated: Do not use.
	Service_PSI Service_Type = 3
)

// Enum value maps for Service_Type.
var (
	Service_Type_name = map[int32]string{
		0: "UNKNOWN_TYPE",
		1: "PIR",
		2: "PREDICT",
		3: "PSI",
	}
	Service_Type_value = map[string]int32{
		"UNKNOWN_TYPE": 0,
		"PIR":          1,
		"PREDICT":      2,
		"PSI":          3,
	}
)

func (x Service_Type) Enum() *Service_Type {
	p := new(Service_Type)
	*p = x
	return p
}

func (x Service_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Service_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[47].Descriptor()
}

func (Service_Type) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[47]
}

func (x Service_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Service_Type.Descriptor instead.
func (Service_Type) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{18, 0}
}

type Service_Tab int32

const (
	Service_UNKNOWN_TAB Service_Tab = 0
	Service_SELF        Service_Tab = 1
	Service_OTHERS      Service_Tab = 2
)

// Enum value maps for Service_Tab.
var (
	Service_Tab_name = map[int32]string{
		0: "UNKNOWN_TAB",
		1: "SELF",
		2: "OTHERS",
	}
	Service_Tab_value = map[string]int32{
		"UNKNOWN_TAB": 0,
		"SELF":        1,
		"OTHERS":      2,
	}
)

func (x Service_Tab) Enum() *Service_Tab {
	p := new(Service_Tab)
	*p = x
	return p
}

func (x Service_Tab) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Service_Tab) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[48].Descriptor()
}

func (Service_Tab) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[48]
}

func (x Service_Tab) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Service_Tab.Descriptor instead.
func (Service_Tab) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{18, 1}
}

type Service_Action int32

const (
	Service_UNKNOWN_ACTION Service_Action = 0
	Service_APPROVE        Service_Action = 1
	Service_CANCEL         Service_Action = 2
	Service_DENY           Service_Action = 3
	Service_REAPPLY        Service_Action = 4
	Service_DEPLOY         Service_Action = 11
	Service_READY          Service_Action = 12
	Service_ERROR          Service_Action = 13
	Service_REBOOT         Service_Action = 21
	Service_TERMINATE      Service_Action = 22
)

// Enum value maps for Service_Action.
var (
	Service_Action_name = map[int32]string{
		0:  "UNKNOWN_ACTION",
		1:  "APPROVE",
		2:  "CANCEL",
		3:  "DENY",
		4:  "REAPPLY",
		11: "DEPLOY",
		12: "READY",
		13: "ERROR",
		21: "REBOOT",
		22: "TERMINATE",
	}
	Service_Action_value = map[string]int32{
		"UNKNOWN_ACTION": 0,
		"APPROVE":        1,
		"CANCEL":         2,
		"DENY":           3,
		"REAPPLY":        4,
		"DEPLOY":         11,
		"READY":          12,
		"ERROR":          13,
		"REBOOT":         21,
		"TERMINATE":      22,
	}
)

func (x Service_Action) Enum() *Service_Action {
	p := new(Service_Action)
	*p = x
	return p
}

func (x Service_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Service_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[49].Descriptor()
}

func (Service_Action) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[49]
}

func (x Service_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Service_Action.Descriptor instead.
func (Service_Action) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{18, 2}
}

type Service_Status int32

const (
	Service_UNKNOWN_STATUS Service_Status = 0
	// reviewing
	Service_OPEN Service_Status = 1
	// canceled by client
	Service_CANCELED Service_Status = 2
	// denied by server
	Service_DENIED Service_Status = 3
	// Once been approved
	Service_IDLE       Service_Status = 10
	Service_BOOTING    Service_Status = 11
	Service_ACTIVE     Service_Status = 12
	Service_FAILED     Service_Status = 13
	Service_TERMINATED Service_Status = 15
)

// Enum value maps for Service_Status.
var (
	Service_Status_name = map[int32]string{
		0:  "UNKNOWN_STATUS",
		1:  "OPEN",
		2:  "CANCELED",
		3:  "DENIED",
		10: "IDLE",
		11: "BOOTING",
		12: "ACTIVE",
		13: "FAILED",
		15: "TERMINATED",
	}
	Service_Status_value = map[string]int32{
		"UNKNOWN_STATUS": 0,
		"OPEN":           1,
		"CANCELED":       2,
		"DENIED":         3,
		"IDLE":           10,
		"BOOTING":        11,
		"ACTIVE":         12,
		"FAILED":         13,
		"TERMINATED":     15,
	}
)

func (x Service_Status) Enum() *Service_Status {
	p := new(Service_Status)
	*p = x
	return p
}

func (x Service_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Service_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[50].Descriptor()
}

func (Service_Status) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[50]
}

func (x Service_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Service_Status.Descriptor instead.
func (Service_Status) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{18, 3}
}

type OnlineAPIStats_Period int32

const (
	OnlineAPIStats_UNKWOWN_PERIOD OnlineAPIStats_Period = 0
	OnlineAPIStats_QTHOUR         OnlineAPIStats_Period = 4
	OnlineAPIStats_DAY            OnlineAPIStats_Period = 1
	OnlineAPIStats_WEEK           OnlineAPIStats_Period = 2
	OnlineAPIStats_MONTH          OnlineAPIStats_Period = 3
)

// Enum value maps for OnlineAPIStats_Period.
var (
	OnlineAPIStats_Period_name = map[int32]string{
		0: "UNKWOWN_PERIOD",
		4: "QTHOUR",
		1: "DAY",
		2: "WEEK",
		3: "MONTH",
	}
	OnlineAPIStats_Period_value = map[string]int32{
		"UNKWOWN_PERIOD": 0,
		"QTHOUR":         4,
		"DAY":            1,
		"WEEK":           2,
		"MONTH":          3,
	}
)

func (x OnlineAPIStats_Period) Enum() *OnlineAPIStats_Period {
	p := new(OnlineAPIStats_Period)
	*p = x
	return p
}

func (x OnlineAPIStats_Period) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OnlineAPIStats_Period) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[51].Descriptor()
}

func (OnlineAPIStats_Period) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[51]
}

func (x OnlineAPIStats_Period) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OnlineAPIStats_Period.Descriptor instead.
func (OnlineAPIStats_Period) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{19, 0}
}

type TaskSchedule_ScheduleMode int32

const (
	// Task should run immediately
	TaskSchedule_NOW        TaskSchedule_ScheduleMode = 0
	TaskSchedule_ONCE       TaskSchedule_ScheduleMode = 1
	TaskSchedule_EACH_DAY   TaskSchedule_ScheduleMode = 2
	TaskSchedule_EACH_WEEK  TaskSchedule_ScheduleMode = 3
	TaskSchedule_EACH_MONTH TaskSchedule_ScheduleMode = 4
)

// Enum value maps for TaskSchedule_ScheduleMode.
var (
	TaskSchedule_ScheduleMode_name = map[int32]string{
		0: "NOW",
		1: "ONCE",
		2: "EACH_DAY",
		3: "EACH_WEEK",
		4: "EACH_MONTH",
	}
	TaskSchedule_ScheduleMode_value = map[string]int32{
		"NOW":        0,
		"ONCE":       1,
		"EACH_DAY":   2,
		"EACH_WEEK":  3,
		"EACH_MONTH": 4,
	}
)

func (x TaskSchedule_ScheduleMode) Enum() *TaskSchedule_ScheduleMode {
	p := new(TaskSchedule_ScheduleMode)
	*p = x
	return p
}

func (x TaskSchedule_ScheduleMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskSchedule_ScheduleMode) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[52].Descriptor()
}

func (TaskSchedule_ScheduleMode) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[52]
}

func (x TaskSchedule_ScheduleMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskSchedule_ScheduleMode.Descriptor instead.
func (TaskSchedule_ScheduleMode) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{20, 0}
}

type SplicedTable_Type int32

const (
	SplicedTable_UNKNOWN_TYPE SplicedTable_Type = 0
	SplicedTable_VERTICAL     SplicedTable_Type = 1
	SplicedTable_HORIZONTAL   SplicedTable_Type = 2
)

// Enum value maps for SplicedTable_Type.
var (
	SplicedTable_Type_name = map[int32]string{
		0: "UNKNOWN_TYPE",
		1: "VERTICAL",
		2: "HORIZONTAL",
	}
	SplicedTable_Type_value = map[string]int32{
		"UNKNOWN_TYPE": 0,
		"VERTICAL":     1,
		"HORIZONTAL":   2,
	}
)

func (x SplicedTable_Type) Enum() *SplicedTable_Type {
	p := new(SplicedTable_Type)
	*p = x
	return p
}

func (x SplicedTable_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SplicedTable_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[53].Descriptor()
}

func (SplicedTable_Type) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[53]
}

func (x SplicedTable_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SplicedTable_Type.Descriptor instead.
func (SplicedTable_Type) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{21, 0}
}

type SplicedTable_Relation int32

const (
	SplicedTable_UNKNOWN_RELATION SplicedTable_Relation = 0
	SplicedTable_INNER_JOIN       SplicedTable_Relation = 1
	SplicedTable_OUTER_JOIN       SplicedTable_Relation = 2
	SplicedTable_LEFT_JOIN        SplicedTable_Relation = 3
	SplicedTable_CUSTOMIZED       SplicedTable_Relation = 4
)

// Enum value maps for SplicedTable_Relation.
var (
	SplicedTable_Relation_name = map[int32]string{
		0: "UNKNOWN_RELATION",
		1: "INNER_JOIN",
		2: "OUTER_JOIN",
		3: "LEFT_JOIN",
		4: "CUSTOMIZED",
	}
	SplicedTable_Relation_value = map[string]int32{
		"UNKNOWN_RELATION": 0,
		"INNER_JOIN":       1,
		"OUTER_JOIN":       2,
		"LEFT_JOIN":        3,
		"CUSTOMIZED":       4,
	}
)

func (x SplicedTable_Relation) Enum() *SplicedTable_Relation {
	p := new(SplicedTable_Relation)
	*p = x
	return p
}

func (x SplicedTable_Relation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SplicedTable_Relation) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[54].Descriptor()
}

func (SplicedTable_Relation) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[54]
}

func (x SplicedTable_Relation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SplicedTable_Relation.Descriptor instead.
func (SplicedTable_Relation) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{21, 1}
}

type TCache_Type int32

const (
	TCache_UNKNOWN_TYPE TCache_Type = 0
	TCache_USER         TCache_Type = 1
	TCache_SERVICE      TCache_Type = 2
)

// Enum value maps for TCache_Type.
var (
	TCache_Type_name = map[int32]string{
		0: "UNKNOWN_TYPE",
		1: "USER",
		2: "SERVICE",
	}
	TCache_Type_value = map[string]int32{
		"UNKNOWN_TYPE": 0,
		"USER":         1,
		"SERVICE":      2,
	}
)

func (x TCache_Type) Enum() *TCache_Type {
	p := new(TCache_Type)
	*p = x
	return p
}

func (x TCache_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TCache_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[55].Descriptor()
}

func (TCache_Type) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[55]
}

func (x TCache_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TCache_Type.Descriptor instead.
func (TCache_Type) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{22, 0}
}

type Register_Status int32

const (
	Register_UNKNOWN  Register_Status = 0
	Register_PENDING  Register_Status = 1
	Register_APPROVED Register_Status = 2
	Register_REJECTED Register_Status = 3
	Register_RECALLED Register_Status = 4
	Register_DELETED  Register_Status = 5
)

// Enum value maps for Register_Status.
var (
	Register_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "PENDING",
		2: "APPROVED",
		3: "REJECTED",
		4: "RECALLED",
		5: "DELETED",
	}
	Register_Status_value = map[string]int32{
		"UNKNOWN":  0,
		"PENDING":  1,
		"APPROVED": 2,
		"REJECTED": 3,
		"RECALLED": 4,
		"DELETED":  5,
	}
)

func (x Register_Status) Enum() *Register_Status {
	p := new(Register_Status)
	*p = x
	return p
}

func (x Register_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Register_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[56].Descriptor()
}

func (Register_Status) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[56]
}

func (x Register_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Register_Status.Descriptor instead.
func (Register_Status) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{23, 0}
}

type Register_Action int32

const (
	Register_UNKNOWN_ACTION Register_Action = 0
	Register_APPROVE        Register_Action = 1
	Register_REJECT         Register_Action = 2
	Register_RECALL         Register_Action = 3
	Register_DELETE         Register_Action = 4
	Register_REGISTER       Register_Action = 5
)

// Enum value maps for Register_Action.
var (
	Register_Action_name = map[int32]string{
		0: "UNKNOWN_ACTION",
		1: "APPROVE",
		2: "REJECT",
		3: "RECALL",
		4: "DELETE",
		5: "REGISTER",
	}
	Register_Action_value = map[string]int32{
		"UNKNOWN_ACTION": 0,
		"APPROVE":        1,
		"REJECT":         2,
		"RECALL":         3,
		"DELETE":         4,
		"REGISTER":       5,
	}
)

func (x Register_Action) Enum() *Register_Action {
	p := new(Register_Action)
	*p = x
	return p
}

func (x Register_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Register_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[57].Descriptor()
}

func (Register_Action) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[57]
}

func (x Register_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Register_Action.Descriptor instead.
func (Register_Action) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{23, 1}
}

type YellowPage_ServiceType int32

const (
	YellowPage_UNKNOWN_SERVICE YellowPage_ServiceType = 0
	YellowPage_FURNACE         YellowPage_ServiceType = 1
	YellowPage_OPERATOR        YellowPage_ServiceType = 2
)

// Enum value maps for YellowPage_ServiceType.
var (
	YellowPage_ServiceType_name = map[int32]string{
		0: "UNKNOWN_SERVICE",
		1: "FURNACE",
		2: "OPERATOR",
	}
	YellowPage_ServiceType_value = map[string]int32{
		"UNKNOWN_SERVICE": 0,
		"FURNACE":         1,
		"OPERATOR":        2,
	}
)

func (x YellowPage_ServiceType) Enum() *YellowPage_ServiceType {
	p := new(YellowPage_ServiceType)
	*p = x
	return p
}

func (x YellowPage_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (YellowPage_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[58].Descriptor()
}

func (YellowPage_ServiceType) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[58]
}

func (x YellowPage_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use YellowPage_ServiceType.Descriptor instead.
func (YellowPage_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{24, 0}
}

type Notification_Status int32

const (
	Notification_UNKNOWN Notification_Status = 0
	Notification_READ    Notification_Status = 1
	Notification_UNREAD  Notification_Status = 2
)

// Enum value maps for Notification_Status.
var (
	Notification_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "READ",
		2: "UNREAD",
	}
	Notification_Status_value = map[string]int32{
		"UNKNOWN": 0,
		"READ":    1,
		"UNREAD":  2,
	}
)

func (x Notification_Status) Enum() *Notification_Status {
	p := new(Notification_Status)
	*p = x
	return p
}

func (x Notification_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Notification_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[59].Descriptor()
}

func (Notification_Status) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[59]
}

func (x Notification_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Notification_Status.Descriptor instead.
func (Notification_Status) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{25, 0}
}

type Notification_Category int32

const (
	Notification_UNKNOWN_CATEGORY Notification_Category = 0
	Notification_NOTICE           Notification_Category = 1
	Notification_PERMISSION       Notification_Category = 2
	Notification_REVIEW           Notification_Category = 3
	Notification_ALTERT           Notification_Category = 4
)

// Enum value maps for Notification_Category.
var (
	Notification_Category_name = map[int32]string{
		0: "UNKNOWN_CATEGORY",
		1: "NOTICE",
		2: "PERMISSION",
		3: "REVIEW",
		4: "ALTERT",
	}
	Notification_Category_value = map[string]int32{
		"UNKNOWN_CATEGORY": 0,
		"NOTICE":           1,
		"PERMISSION":       2,
		"REVIEW":           3,
		"ALTERT":           4,
	}
)

func (x Notification_Category) Enum() *Notification_Category {
	p := new(Notification_Category)
	*p = x
	return p
}

func (x Notification_Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Notification_Category) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[60].Descriptor()
}

func (Notification_Category) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[60]
}

func (x Notification_Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Notification_Category.Descriptor instead.
func (Notification_Category) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{25, 1}
}

type Notification_Type int32

const (
	Notification_UNKNOWN_TYPE        Notification_Type = 0
	Notification_TASK_STATUS_UPDATE  Notification_Type = 1
	Notification_USER_ROLE_UPDATE    Notification_Type = 2
	Notification_PROJECT_USER_UPDATE Notification_Type = 3
	Notification_LICENSE_EXPIRE      Notification_Type = 4
	Notification_LICENSE_APPLY       Notification_Type = 5
	Notification_LICENSE_RENEW       Notification_Type = 6
	Notification_LICENSE_REJECT      Notification_Type = 7
)

// Enum value maps for Notification_Type.
var (
	Notification_Type_name = map[int32]string{
		0: "UNKNOWN_TYPE",
		1: "TASK_STATUS_UPDATE",
		2: "USER_ROLE_UPDATE",
		3: "PROJECT_USER_UPDATE",
		4: "LICENSE_EXPIRE",
		5: "LICENSE_APPLY",
		6: "LICENSE_RENEW",
		7: "LICENSE_REJECT",
	}
	Notification_Type_value = map[string]int32{
		"UNKNOWN_TYPE":        0,
		"TASK_STATUS_UPDATE":  1,
		"USER_ROLE_UPDATE":    2,
		"PROJECT_USER_UPDATE": 3,
		"LICENSE_EXPIRE":      4,
		"LICENSE_APPLY":       5,
		"LICENSE_RENEW":       6,
		"LICENSE_REJECT":      7,
	}
)

func (x Notification_Type) Enum() *Notification_Type {
	p := new(Notification_Type)
	*p = x
	return p
}

func (x Notification_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Notification_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[61].Descriptor()
}

func (Notification_Type) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[61]
}

func (x Notification_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Notification_Type.Descriptor instead.
func (Notification_Type) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{25, 2}
}

type Message_Topic int32

const (
	Message_UNKNOWN_TOPIC Message_Topic = 0
	Message_USER          Message_Topic = 1
	Message_CHAT          Message_Topic = 2
	Message_LOG           Message_Topic = 3
	Message_PROGRESS      Message_Topic = 4
	Message_TASK          Message_Topic = 5
	Message_SYSTEM        Message_Topic = 6
)

// Enum value maps for Message_Topic.
var (
	Message_Topic_name = map[int32]string{
		0: "UNKNOWN_TOPIC",
		1: "USER",
		2: "CHAT",
		3: "LOG",
		4: "PROGRESS",
		5: "TASK",
		6: "SYSTEM",
	}
	Message_Topic_value = map[string]int32{
		"UNKNOWN_TOPIC": 0,
		"USER":          1,
		"CHAT":          2,
		"LOG":           3,
		"PROGRESS":      4,
		"TASK":          5,
		"SYSTEM":        6,
	}
)

func (x Message_Topic) Enum() *Message_Topic {
	p := new(Message_Topic)
	*p = x
	return p
}

func (x Message_Topic) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_Topic) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[62].Descriptor()
}

func (Message_Topic) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[62]
}

func (x Message_Topic) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Message_Topic.Descriptor instead.
func (Message_Topic) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{26, 0}
}

type Message_PublisherType int32

const (
	Message_UNKNOWN_PUBLISHERTYPE   Message_PublisherType = 0
	Message_CREATEPARTYSUBSCRIPTION Message_PublisherType = 1
	Message_CREATEPUBLICATION       Message_PublisherType = 2
)

// Enum value maps for Message_PublisherType.
var (
	Message_PublisherType_name = map[int32]string{
		0: "UNKNOWN_PUBLISHERTYPE",
		1: "CREATEPARTYSUBSCRIPTION",
		2: "CREATEPUBLICATION",
	}
	Message_PublisherType_value = map[string]int32{
		"UNKNOWN_PUBLISHERTYPE":   0,
		"CREATEPARTYSUBSCRIPTION": 1,
		"CREATEPUBLICATION":       2,
	}
)

func (x Message_PublisherType) Enum() *Message_PublisherType {
	p := new(Message_PublisherType)
	*p = x
	return p
}

func (x Message_PublisherType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_PublisherType) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[63].Descriptor()
}

func (Message_PublisherType) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[63]
}

func (x Message_PublisherType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Message_PublisherType.Descriptor instead.
func (Message_PublisherType) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{26, 1}
}

type Message_PublicationType int32

const (
	Message_UNKNOWN_PUBLICATIONTYPE Message_PublicationType = 0
	Message_TASK_STATUS_UPDATE      Message_PublicationType = 1
)

// Enum value maps for Message_PublicationType.
var (
	Message_PublicationType_name = map[int32]string{
		0: "UNKNOWN_PUBLICATIONTYPE",
		1: "TASK_STATUS_UPDATE",
	}
	Message_PublicationType_value = map[string]int32{
		"UNKNOWN_PUBLICATIONTYPE": 0,
		"TASK_STATUS_UPDATE":      1,
	}
)

func (x Message_PublicationType) Enum() *Message_PublicationType {
	p := new(Message_PublicationType)
	*p = x
	return p
}

func (x Message_PublicationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_PublicationType) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[64].Descriptor()
}

func (Message_PublicationType) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[64]
}

func (x Message_PublicationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Message_PublicationType.Descriptor instead.
func (Message_PublicationType) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{26, 2}
}

type Message_Action int32

const (
	Message_UNKNOWN_ACTION Message_Action = 0
	Message_SUBSCRIBE      Message_Action = 1
	Message_UNSUBSCRIBE    Message_Action = 2
)

// Enum value maps for Message_Action.
var (
	Message_Action_name = map[int32]string{
		0: "UNKNOWN_ACTION",
		1: "SUBSCRIBE",
		2: "UNSUBSCRIBE",
	}
	Message_Action_value = map[string]int32{
		"UNKNOWN_ACTION": 0,
		"SUBSCRIBE":      1,
		"UNSUBSCRIBE":    2,
	}
)

func (x Message_Action) Enum() *Message_Action {
	p := new(Message_Action)
	*p = x
	return p
}

func (x Message_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[65].Descriptor()
}

func (Message_Action) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[65]
}

func (x Message_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Message_Action.Descriptor instead.
func (Message_Action) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{26, 3}
}

type Message_ClientType int32

const (
	Message_UNKNOWN_CLIENT_TYPE Message_ClientType = 0
	Message_SINGLEUSER          Message_ClientType = 1
	Message_USERGROUP           Message_ClientType = 2
	Message_PARTY               Message_ClientType = 3
)

// Enum value maps for Message_ClientType.
var (
	Message_ClientType_name = map[int32]string{
		0: "UNKNOWN_CLIENT_TYPE",
		1: "SINGLEUSER",
		2: "USERGROUP",
		3: "PARTY",
	}
	Message_ClientType_value = map[string]int32{
		"UNKNOWN_CLIENT_TYPE": 0,
		"SINGLEUSER":          1,
		"USERGROUP":           2,
		"PARTY":               3,
	}
)

func (x Message_ClientType) Enum() *Message_ClientType {
	p := new(Message_ClientType)
	*p = x
	return p
}

func (x Message_ClientType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_ClientType) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[66].Descriptor()
}

func (Message_ClientType) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[66]
}

func (x Message_ClientType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Message_ClientType.Descriptor instead.
func (Message_ClientType) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{26, 4}
}

type Message_Status int32

const (
	Message_UNKNOWN Message_Status = 0
	Message_READ    Message_Status = 1
	Message_UNREAD  Message_Status = 2
)

// Enum value maps for Message_Status.
var (
	Message_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "READ",
		2: "UNREAD",
	}
	Message_Status_value = map[string]int32{
		"UNKNOWN": 0,
		"READ":    1,
		"UNREAD":  2,
	}
)

func (x Message_Status) Enum() *Message_Status {
	p := new(Message_Status)
	*p = x
	return p
}

func (x Message_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[67].Descriptor()
}

func (Message_Status) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[67]
}

func (x Message_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Message_Status.Descriptor instead.
func (Message_Status) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{26, 5}
}

type TFA_Action int32

const (
	TFA_UNKNOWN_ACTION TFA_Action = 0
	TFA_ENABLE         TFA_Action = 1
	TFA_UPDATE         TFA_Action = 2
)

// Enum value maps for TFA_Action.
var (
	TFA_Action_name = map[int32]string{
		0: "UNKNOWN_ACTION",
		1: "ENABLE",
		2: "UPDATE",
	}
	TFA_Action_value = map[string]int32{
		"UNKNOWN_ACTION": 0,
		"ENABLE":         1,
		"UPDATE":         2,
	}
)

func (x TFA_Action) Enum() *TFA_Action {
	p := new(TFA_Action)
	*p = x
	return p
}

func (x TFA_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TFA_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[68].Descriptor()
}

func (TFA_Action) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[68]
}

func (x TFA_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TFA_Action.Descriptor instead.
func (TFA_Action) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{27, 0}
}

type LocalTask_Type int32

const (
	LocalTask_UNKNOWN_TYPE  LocalTask_Type = 0
	LocalTask_SYNC_VTABLE   LocalTask_Type = 1
	LocalTask_SPLIT_VTABLE  LocalTask_Type = 2
	LocalTask_DATA_ANALYSIS LocalTask_Type = 3
	LocalTask_SPLICE_VTABLE LocalTask_Type = 4
)

// Enum value maps for LocalTask_Type.
var (
	LocalTask_Type_name = map[int32]string{
		0: "UNKNOWN_TYPE",
		1: "SYNC_VTABLE",
		2: "SPLIT_VTABLE",
		3: "DATA_ANALYSIS",
		4: "SPLICE_VTABLE",
	}
	LocalTask_Type_value = map[string]int32{
		"UNKNOWN_TYPE":  0,
		"SYNC_VTABLE":   1,
		"SPLIT_VTABLE":  2,
		"DATA_ANALYSIS": 3,
		"SPLICE_VTABLE": 4,
	}
)

func (x LocalTask_Type) Enum() *LocalTask_Type {
	p := new(LocalTask_Type)
	*p = x
	return p
}

func (x LocalTask_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocalTask_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[69].Descriptor()
}

func (LocalTask_Type) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[69]
}

func (x LocalTask_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocalTask_Type.Descriptor instead.
func (LocalTask_Type) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{28, 0}
}

type Aggregation_Interval int32

const (
	Aggregation_UNKNOWN_INTERVAL Aggregation_Interval = 0
	Aggregation_FOUR_HOURS       Aggregation_Interval = 1
	Aggregation_ONE_DAY          Aggregation_Interval = 2
)

// Enum value maps for Aggregation_Interval.
var (
	Aggregation_Interval_name = map[int32]string{
		0: "UNKNOWN_INTERVAL",
		1: "FOUR_HOURS",
		2: "ONE_DAY",
	}
	Aggregation_Interval_value = map[string]int32{
		"UNKNOWN_INTERVAL": 0,
		"FOUR_HOURS":       1,
		"ONE_DAY":          2,
	}
)

func (x Aggregation_Interval) Enum() *Aggregation_Interval {
	p := new(Aggregation_Interval)
	*p = x
	return p
}

func (x Aggregation_Interval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Aggregation_Interval) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[70].Descriptor()
}

func (Aggregation_Interval) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[70]
}

func (x Aggregation_Interval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Aggregation_Interval.Descriptor instead.
func (Aggregation_Interval) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{29, 0}
}

type Inventory_BillingType int32

const (
	Inventory_UNKNOWN_TYPE Inventory_BillingType = 0
	Inventory_BYCOUNT      Inventory_BillingType = 1
	Inventory_BYTIME       Inventory_BillingType = 2
)

// Enum value maps for Inventory_BillingType.
var (
	Inventory_BillingType_name = map[int32]string{
		0: "UNKNOWN_TYPE",
		1: "BYCOUNT",
		2: "BYTIME",
	}
	Inventory_BillingType_value = map[string]int32{
		"UNKNOWN_TYPE": 0,
		"BYCOUNT":      1,
		"BYTIME":       2,
	}
)

func (x Inventory_BillingType) Enum() *Inventory_BillingType {
	p := new(Inventory_BillingType)
	*p = x
	return p
}

func (x Inventory_BillingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Inventory_BillingType) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[71].Descriptor()
}

func (Inventory_BillingType) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[71]
}

func (x Inventory_BillingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Inventory_BillingType.Descriptor instead.
func (Inventory_BillingType) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{30, 0}
}

type Asset_Status int32

const (
	Asset_UNKNOWN_STATUS Asset_Status = 0
	Asset_IN_SHELF       Asset_Status = 10
	Asset_REVIEWING      Asset_Status = 15
	Asset_UNSHELVED      Asset_Status = 20
)

// Enum value maps for Asset_Status.
var (
	Asset_Status_name = map[int32]string{
		0:  "UNKNOWN_STATUS",
		10: "IN_SHELF",
		15: "REVIEWING",
		20: "UNSHELVED",
	}
	Asset_Status_value = map[string]int32{
		"UNKNOWN_STATUS": 0,
		"IN_SHELF":       10,
		"REVIEWING":      15,
		"UNSHELVED":      20,
	}
)

func (x Asset_Status) Enum() *Asset_Status {
	p := new(Asset_Status)
	*p = x
	return p
}

func (x Asset_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Asset_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[72].Descriptor()
}

func (Asset_Status) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[72]
}

func (x Asset_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Asset_Status.Descriptor instead.
func (Asset_Status) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{31, 0}
}

type Asset_Action int32

const (
	Asset_UNKNOWN_ACTION Asset_Action = 0
	Asset_APPROVE        Asset_Action = 1
	Asset_CANCEL         Asset_Action = 2
	Asset_DENY           Asset_Action = 3
	Asset_DELIST         Asset_Action = 4
	Asset_APPLY          Asset_Action = 5
)

// Enum value maps for Asset_Action.
var (
	Asset_Action_name = map[int32]string{
		0: "UNKNOWN_ACTION",
		1: "APPROVE",
		2: "CANCEL",
		3: "DENY",
		4: "DELIST",
		5: "APPLY",
	}
	Asset_Action_value = map[string]int32{
		"UNKNOWN_ACTION": 0,
		"APPROVE":        1,
		"CANCEL":         2,
		"DENY":           3,
		"DELIST":         4,
		"APPLY":          5,
	}
)

func (x Asset_Action) Enum() *Asset_Action {
	p := new(Asset_Action)
	*p = x
	return p
}

func (x Asset_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Asset_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[73].Descriptor()
}

func (Asset_Action) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[73]
}

func (x Asset_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Asset_Action.Descriptor instead.
func (Asset_Action) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{31, 1}
}

type Application_Status int32

const (
	Application_UNKNOWN_STATUS Application_Status = 0
	Application_REVIEWING      Application_Status = 10
	// application status is approved if all reviewers approved
	Application_APPROVED Application_Status = 20
	// application status is approved if all reviewers approved
	Application_REVOKED Application_Status = 30
	// application status is rejected if any reviewers rejected
	Application_REJECTED Application_Status = 40
)

// Enum value maps for Application_Status.
var (
	Application_Status_name = map[int32]string{
		0:  "UNKNOWN_STATUS",
		10: "REVIEWING",
		20: "APPROVED",
		30: "REVOKED",
		40: "REJECTED",
	}
	Application_Status_value = map[string]int32{
		"UNKNOWN_STATUS": 0,
		"REVIEWING":      10,
		"APPROVED":       20,
		"REVOKED":        30,
		"REJECTED":       40,
	}
)

func (x Application_Status) Enum() *Application_Status {
	p := new(Application_Status)
	*p = x
	return p
}

func (x Application_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Application_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[74].Descriptor()
}

func (Application_Status) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[74]
}

func (x Application_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Application_Status.Descriptor instead.
func (Application_Status) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{32, 0}
}

type Application_Action int32

const (
	Application_UNKNOWN_ACTION Application_Action = 0
	Application_APPROVE        Application_Action = 10
	Application_REJECT         Application_Action = 20
	// owner only
	Application_REVOKE Application_Action = 30
)

// Enum value maps for Application_Action.
var (
	Application_Action_name = map[int32]string{
		0:  "UNKNOWN_ACTION",
		10: "APPROVE",
		20: "REJECT",
		30: "REVOKE",
	}
	Application_Action_value = map[string]int32{
		"UNKNOWN_ACTION": 0,
		"APPROVE":        10,
		"REJECT":         20,
		"REVOKE":         30,
	}
)

func (x Application_Action) Enum() *Application_Action {
	p := new(Application_Action)
	*p = x
	return p
}

func (x Application_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Application_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[75].Descriptor()
}

func (Application_Action) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[75]
}

func (x Application_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Application_Action.Descriptor instead.
func (Application_Action) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{32, 1}
}

type ApplyOrder_Type int32

const (
	ApplyOrder_UNKNOWN_STATUS ApplyOrder_Type = 0
	// my applications
	ApplyOrder_APPLY ApplyOrder_Type = 1
	// my reviews
	ApplyOrder_REVIEW ApplyOrder_Type = 2
)

// Enum value maps for ApplyOrder_Type.
var (
	ApplyOrder_Type_name = map[int32]string{
		0: "UNKNOWN_STATUS",
		1: "APPLY",
		2: "REVIEW",
	}
	ApplyOrder_Type_value = map[string]int32{
		"UNKNOWN_STATUS": 0,
		"APPLY":          1,
		"REVIEW":         2,
	}
)

func (x ApplyOrder_Type) Enum() *ApplyOrder_Type {
	p := new(ApplyOrder_Type)
	*p = x
	return p
}

func (x ApplyOrder_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApplyOrder_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[76].Descriptor()
}

func (ApplyOrder_Type) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[76]
}

func (x ApplyOrder_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApplyOrder_Type.Descriptor instead.
func (ApplyOrder_Type) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{33, 0}
}

type OrderItem_Status int32

const (
	OrderItem_UNKNOWN_STATUS OrderItem_Status = 0
	// to be reviewed
	OrderItem_REVIEWING OrderItem_Status = 10
	OrderItem_REJECTED  OrderItem_Status = 20
	OrderItem_APPROVED  OrderItem_Status = 30
	// synced to furnace，back end only，front end displays as “审核通过”
	OrderItem_SYNCHRONIZED OrderItem_Status = 40
	OrderItem_CANCELED     OrderItem_Status = 50
	OrderItem_INVALID      OrderItem_Status = 60
)

// Enum value maps for OrderItem_Status.
var (
	OrderItem_Status_name = map[int32]string{
		0:  "UNKNOWN_STATUS",
		10: "REVIEWING",
		20: "REJECTED",
		30: "APPROVED",
		40: "SYNCHRONIZED",
		50: "CANCELED",
		60: "INVALID",
	}
	OrderItem_Status_value = map[string]int32{
		"UNKNOWN_STATUS": 0,
		"REVIEWING":      10,
		"REJECTED":       20,
		"APPROVED":       30,
		"SYNCHRONIZED":   40,
		"CANCELED":       50,
		"INVALID":        60,
	}
)

func (x OrderItem_Status) Enum() *OrderItem_Status {
	p := new(OrderItem_Status)
	*p = x
	return p
}

func (x OrderItem_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderItem_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[77].Descriptor()
}

func (OrderItem_Status) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[77]
}

func (x OrderItem_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderItem_Status.Descriptor instead.
func (OrderItem_Status) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{34, 0}
}

type PreAuth_Type int32

const (
	PreAuth_UNKNOWN_TYPE PreAuth_Type = 0
	PreAuth_BY_COUNT     PreAuth_Type = 1
	PreAuth_BY_TIME      PreAuth_Type = 2
)

// Enum value maps for PreAuth_Type.
var (
	PreAuth_Type_name = map[int32]string{
		0: "UNKNOWN_TYPE",
		1: "BY_COUNT",
		2: "BY_TIME",
	}
	PreAuth_Type_value = map[string]int32{
		"UNKNOWN_TYPE": 0,
		"BY_COUNT":     1,
		"BY_TIME":      2,
	}
)

func (x PreAuth_Type) Enum() *PreAuth_Type {
	p := new(PreAuth_Type)
	*p = x
	return p
}

func (x PreAuth_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PreAuth_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[78].Descriptor()
}

func (PreAuth_Type) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[78]
}

func (x PreAuth_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PreAuth_Type.Descriptor instead.
func (PreAuth_Type) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{35, 0}
}

type PreAuth_ConsumptionStatus int32

const (
	// if preauth is set, we need to save it before job runs, so that we can deduct it after job completes
	// it's also easier for reconcilation
	PreAuth_UNKNOWN_CONSUMPTION_STATUS PreAuth_ConsumptionStatus = 0
	// start executing
	PreAuth_BEGIN    PreAuth_ConsumptionStatus = 1
	PreAuth_COMMIT   PreAuth_ConsumptionStatus = 2
	PreAuth_ROLLBACK PreAuth_ConsumptionStatus = 3
)

// Enum value maps for PreAuth_ConsumptionStatus.
var (
	PreAuth_ConsumptionStatus_name = map[int32]string{
		0: "UNKNOWN_CONSUMPTION_STATUS",
		1: "BEGIN",
		2: "COMMIT",
		3: "ROLLBACK",
	}
	PreAuth_ConsumptionStatus_value = map[string]int32{
		"UNKNOWN_CONSUMPTION_STATUS": 0,
		"BEGIN":                      1,
		"COMMIT":                     2,
		"ROLLBACK":                   3,
	}
)

func (x PreAuth_ConsumptionStatus) Enum() *PreAuth_ConsumptionStatus {
	p := new(PreAuth_ConsumptionStatus)
	*p = x
	return p
}

func (x PreAuth_ConsumptionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PreAuth_ConsumptionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[79].Descriptor()
}

func (PreAuth_ConsumptionStatus) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[79]
}

func (x PreAuth_ConsumptionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PreAuth_ConsumptionStatus.Descriptor instead.
func (PreAuth_ConsumptionStatus) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{35, 1}
}

type PirService_Action int32

const (
	PirService_UNKNOWN_ACTION PirService_Action = 0
	PirService_DEPLOY         PirService_Action = 1
	PirService_REBOOT         PirService_Action = 2
	PirService_TERMINATE      PirService_Action = 3
	PirService_ERROR          PirService_Action = 4
	PirService_SUCCESS        PirService_Action = 5
)

// Enum value maps for PirService_Action.
var (
	PirService_Action_name = map[int32]string{
		0: "UNKNOWN_ACTION",
		1: "DEPLOY",
		2: "REBOOT",
		3: "TERMINATE",
		4: "ERROR",
		5: "SUCCESS",
	}
	PirService_Action_value = map[string]int32{
		"UNKNOWN_ACTION": 0,
		"DEPLOY":         1,
		"REBOOT":         2,
		"TERMINATE":      3,
		"ERROR":          4,
		"SUCCESS":        5,
	}
)

func (x PirService_Action) Enum() *PirService_Action {
	p := new(PirService_Action)
	*p = x
	return p
}

func (x PirService_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PirService_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[80].Descriptor()
}

func (PirService_Action) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[80]
}

func (x PirService_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PirService_Action.Descriptor instead.
func (PirService_Action) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{36, 0}
}

type PirService_Status int32

const (
	PirService_UNKNOWN_STATUS PirService_Status = 0
	// to be booted
	PirService_READY_TO_BOOTING PirService_Status = 1
	PirService_BOOTING          PirService_Status = 2
	PirService_ACTIVE           PirService_Status = 3
	PirService_USING            PirService_Status = 4
	PirService_FAILED           PirService_Status = 5
	PirService_TERMINATED       PirService_Status = 6
	PirService_UPDATING         PirService_Status = 7
)

// Enum value maps for PirService_Status.
var (
	PirService_Status_name = map[int32]string{
		0: "UNKNOWN_STATUS",
		1: "READY_TO_BOOTING",
		2: "BOOTING",
		3: "ACTIVE",
		4: "USING",
		5: "FAILED",
		6: "TERMINATED",
		7: "UPDATING",
	}
	PirService_Status_value = map[string]int32{
		"UNKNOWN_STATUS":   0,
		"READY_TO_BOOTING": 1,
		"BOOTING":          2,
		"ACTIVE":           3,
		"USING":            4,
		"FAILED":           5,
		"TERMINATED":       6,
		"UPDATING":         7,
	}
)

func (x PirService_Status) Enum() *PirService_Status {
	p := new(PirService_Status)
	*p = x
	return p
}

func (x PirService_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PirService_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[81].Descriptor()
}

func (PirService_Status) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[81]
}

func (x PirService_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PirService_Status.Descriptor instead.
func (PirService_Status) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{36, 1}
}

type Token_Status int32

const (
	Token_UNKNOWN_STATUS Token_Status = 0
	// normal status
	Token_ACTIVE   Token_Status = 1
	Token_DISABLED Token_Status = 2
	// over invocation threshold
	Token_LIMITED Token_Status = 3
	// token expired
	Token_OUTDATED Token_Status = 4
)

// Enum value maps for Token_Status.
var (
	Token_Status_name = map[int32]string{
		0: "UNKNOWN_STATUS",
		1: "ACTIVE",
		2: "DISABLED",
		3: "LIMITED",
		4: "OUTDATED",
	}
	Token_Status_value = map[string]int32{
		"UNKNOWN_STATUS": 0,
		"ACTIVE":         1,
		"DISABLED":       2,
		"LIMITED":        3,
		"OUTDATED":       4,
	}
)

func (x Token_Status) Enum() *Token_Status {
	p := new(Token_Status)
	*p = x
	return p
}

func (x Token_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Token_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[82].Descriptor()
}

func (Token_Status) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[82]
}

func (x Token_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Token_Status.Descriptor instead.
func (Token_Status) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{37, 0}
}

type Token_Action int32

const (
	Token_UNKNOWN_ACTION Token_Action = 0
	// enable token
	Token_ENABLE Token_Action = 1
	// disable token
	Token_DISABLE Token_Action = 2
)

// Enum value maps for Token_Action.
var (
	Token_Action_name = map[int32]string{
		0: "UNKNOWN_ACTION",
		1: "ENABLE",
		2: "DISABLE",
	}
	Token_Action_value = map[string]int32{
		"UNKNOWN_ACTION": 0,
		"ENABLE":         1,
		"DISABLE":        2,
	}
)

func (x Token_Action) Enum() *Token_Action {
	p := new(Token_Action)
	*p = x
	return p
}

func (x Token_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Token_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[83].Descriptor()
}

func (Token_Action) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[83]
}

func (x Token_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Token_Action.Descriptor instead.
func (Token_Action) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{37, 1}
}

type Resource_Mode int32

const (
	Resource_UNKNOWN_MODE Resource_Mode = 0
	Resource_COMPETITIVE  Resource_Mode = 1
	Resource_QUEUING      Resource_Mode = 2
)

// Enum value maps for Resource_Mode.
var (
	Resource_Mode_name = map[int32]string{
		0: "UNKNOWN_MODE",
		1: "COMPETITIVE",
		2: "QUEUING",
	}
	Resource_Mode_value = map[string]int32{
		"UNKNOWN_MODE": 0,
		"COMPETITIVE":  1,
		"QUEUING":      2,
	}
)

func (x Resource_Mode) Enum() *Resource_Mode {
	p := new(Resource_Mode)
	*p = x
	return p
}

func (x Resource_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Resource_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[84].Descriptor()
}

func (Resource_Mode) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[84]
}

func (x Resource_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Resource_Mode.Descriptor instead.
func (Resource_Mode) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{38, 0}
}

type Resource_Unit int32

const (
	Resource_UNKNOWN_UNIT Resource_Unit = 0
	Resource_MI           Resource_Unit = 1
	Resource_GI           Resource_Unit = 2
)

// Enum value maps for Resource_Unit.
var (
	Resource_Unit_name = map[int32]string{
		0: "UNKNOWN_UNIT",
		1: "MI",
		2: "GI",
	}
	Resource_Unit_value = map[string]int32{
		"UNKNOWN_UNIT": 0,
		"MI":           1,
		"GI":           2,
	}
)

func (x Resource_Unit) Enum() *Resource_Unit {
	p := new(Resource_Unit)
	*p = x
	return p
}

func (x Resource_Unit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Resource_Unit) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[85].Descriptor()
}

func (Resource_Unit) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[85]
}

func (x Resource_Unit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Resource_Unit.Descriptor instead.
func (Resource_Unit) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{38, 1}
}

type Resource_RequestMode int32

const (
	Resource_UNKNOWN_REQUEST_MODE Resource_RequestMode = 0
	Resource_SHARED               Resource_RequestMode = 1
	Resource_EXCLUSIVE            Resource_RequestMode = 2
)

// Enum value maps for Resource_RequestMode.
var (
	Resource_RequestMode_name = map[int32]string{
		0: "UNKNOWN_REQUEST_MODE",
		1: "SHARED",
		2: "EXCLUSIVE",
	}
	Resource_RequestMode_value = map[string]int32{
		"UNKNOWN_REQUEST_MODE": 0,
		"SHARED":               1,
		"EXCLUSIVE":            2,
	}
)

func (x Resource_RequestMode) Enum() *Resource_RequestMode {
	p := new(Resource_RequestMode)
	*p = x
	return p
}

func (x Resource_RequestMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Resource_RequestMode) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[86].Descriptor()
}

func (Resource_RequestMode) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[86]
}

func (x Resource_RequestMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Resource_RequestMode.Descriptor instead.
func (Resource_RequestMode) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{38, 2}
}

type Resource_Type int32

const (
	Resource_UNKNOWN_TYPE Resource_Type = 0
	Resource_INSTANCE     Resource_Type = 1
	Resource_HARDWARE     Resource_Type = 2
)

// Enum value maps for Resource_Type.
var (
	Resource_Type_name = map[int32]string{
		0: "UNKNOWN_TYPE",
		1: "INSTANCE",
		2: "HARDWARE",
	}
	Resource_Type_value = map[string]int32{
		"UNKNOWN_TYPE": 0,
		"INSTANCE":     1,
		"HARDWARE":     2,
	}
)

func (x Resource_Type) Enum() *Resource_Type {
	p := new(Resource_Type)
	*p = x
	return p
}

func (x Resource_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Resource_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[87].Descriptor()
}

func (Resource_Type) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[87]
}

func (x Resource_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Resource_Type.Descriptor instead.
func (Resource_Type) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{38, 3}
}

type TripletsBitInfo_Type int32

const (
	TripletsBitInfo_DEFAULT  TripletsBitInfo_Type = 0
	TripletsBitInfo_SEAL_L42 TripletsBitInfo_Type = 1
	TripletsBitInfo_SEAL_L60 TripletsBitInfo_Type = 2
	TripletsBitInfo_CARD     TripletsBitInfo_Type = 3
	TripletsBitInfo_SERVICE  TripletsBitInfo_Type = 4
)

// Enum value maps for TripletsBitInfo_Type.
var (
	TripletsBitInfo_Type_name = map[int32]string{
		0: "DEFAULT",
		1: "SEAL_L42",
		2: "SEAL_L60",
		3: "CARD",
		4: "SERVICE",
	}
	TripletsBitInfo_Type_value = map[string]int32{
		"DEFAULT":  0,
		"SEAL_L42": 1,
		"SEAL_L60": 2,
		"CARD":     3,
		"SERVICE":  4,
	}
)

func (x TripletsBitInfo_Type) Enum() *TripletsBitInfo_Type {
	p := new(TripletsBitInfo_Type)
	*p = x
	return p
}

func (x TripletsBitInfo_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TripletsBitInfo_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_sudo_enums_enums_proto_enumTypes[88].Descriptor()
}

func (TripletsBitInfo_Type) Type() protoreflect.EnumType {
	return &file_sudo_enums_enums_proto_enumTypes[88]
}

func (x TripletsBitInfo_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TripletsBitInfo_Type.Descriptor instead.
func (TripletsBitInfo_Type) EnumDescriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{39, 0}
}

type Dag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Dag) Reset() {
	*x = Dag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dag) ProtoMessage() {}

func (x *Dag) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dag.ProtoReflect.Descriptor instead.
func (*Dag) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{0}
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{1}
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{2}
}

// Job equals task or stage
type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{3}
}

type Stage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Stage) Reset() {
	*x = Stage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stage) ProtoMessage() {}

func (x *Stage) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stage.ProtoReflect.Descriptor instead.
func (*Stage) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{4}
}

type Party struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Party) Reset() {
	*x = Party{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Party) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party) ProtoMessage() {}

func (x *Party) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party.ProtoReflect.Descriptor instead.
func (*Party) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{5}
}

type Datasource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Datasource) Reset() {
	*x = Datasource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Datasource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Datasource) ProtoMessage() {}

func (x *Datasource) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Datasource.ProtoReflect.Descriptor instead.
func (*Datasource) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{6}
}

type Datainfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Datainfo) Reset() {
	*x = Datainfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Datainfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Datainfo) ProtoMessage() {}

func (x *Datainfo) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Datainfo.ProtoReflect.Descriptor instead.
func (*Datainfo) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{7}
}

type VirtualTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VirtualTable) Reset() {
	*x = VirtualTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualTable) ProtoMessage() {}

func (x *VirtualTable) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualTable.ProtoReflect.Descriptor instead.
func (*VirtualTable) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{8}
}

type Perm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Perm) Reset() {
	*x = Perm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Perm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Perm) ProtoMessage() {}

func (x *Perm) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Perm.ProtoReflect.Descriptor instead.
func (*Perm) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{9}
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{10}
}

// possible io type of operator
type InputOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InputOutput) Reset() {
	*x = InputOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputOutput) ProtoMessage() {}

func (x *InputOutput) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputOutput.ProtoReflect.Descriptor instead.
func (*InputOutput) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{11}
}

type Aritifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Aritifact) Reset() {
	*x = Aritifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aritifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aritifact) ProtoMessage() {}

func (x *Aritifact) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aritifact.ProtoReflect.Descriptor instead.
func (*Aritifact) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{12}
}

type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{13}
}

type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{14}
}

type ModelPack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ModelPack) Reset() {
	*x = ModelPack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelPack) ProtoMessage() {}

func (x *ModelPack) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelPack.ProtoReflect.Descriptor instead.
func (*ModelPack) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{15}
}

type UserBookmark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserBookmark) Reset() {
	*x = UserBookmark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBookmark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBookmark) ProtoMessage() {}

func (x *UserBookmark) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBookmark.ProtoReflect.Descriptor instead.
func (*UserBookmark) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{16}
}

type ReadDataApplication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReadDataApplication) Reset() {
	*x = ReadDataApplication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadDataApplication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDataApplication) ProtoMessage() {}

func (x *ReadDataApplication) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDataApplication.ProtoReflect.Descriptor instead.
func (*ReadDataApplication) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{17}
}

type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{18}
}

type OnlineAPIStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OnlineAPIStats) Reset() {
	*x = OnlineAPIStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineAPIStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineAPIStats) ProtoMessage() {}

func (x *OnlineAPIStats) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineAPIStats.ProtoReflect.Descriptor instead.
func (*OnlineAPIStats) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{19}
}

type TaskSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskSchedule) Reset() {
	*x = TaskSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSchedule) ProtoMessage() {}

func (x *TaskSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSchedule.ProtoReflect.Descriptor instead.
func (*TaskSchedule) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{20}
}

type SplicedTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SplicedTable) Reset() {
	*x = SplicedTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplicedTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplicedTable) ProtoMessage() {}

func (x *SplicedTable) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplicedTable.ProtoReflect.Descriptor instead.
func (*SplicedTable) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{21}
}

type TCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TCache) Reset() {
	*x = TCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCache) ProtoMessage() {}

func (x *TCache) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCache.ProtoReflect.Descriptor instead.
func (*TCache) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{22}
}

type Register struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Register) Reset() {
	*x = Register{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Register) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Register) ProtoMessage() {}

func (x *Register) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Register.ProtoReflect.Descriptor instead.
func (*Register) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{23}
}

type YellowPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *YellowPage) Reset() {
	*x = YellowPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YellowPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YellowPage) ProtoMessage() {}

func (x *YellowPage) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YellowPage.ProtoReflect.Descriptor instead.
func (*YellowPage) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{24}
}

type Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Notification) Reset() {
	*x = Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{25}
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{26}
}

type TFA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TFA) Reset() {
	*x = TFA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFA) ProtoMessage() {}

func (x *TFA) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFA.ProtoReflect.Descriptor instead.
func (*TFA) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{27}
}

type LocalTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LocalTask) Reset() {
	*x = LocalTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalTask) ProtoMessage() {}

func (x *LocalTask) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalTask.ProtoReflect.Descriptor instead.
func (*LocalTask) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{28}
}

type Aggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Aggregation) Reset() {
	*x = Aggregation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aggregation) ProtoMessage() {}

func (x *Aggregation) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aggregation.ProtoReflect.Descriptor instead.
func (*Aggregation) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{29}
}

type Inventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Inventory) Reset() {
	*x = Inventory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inventory) ProtoMessage() {}

func (x *Inventory) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inventory.ProtoReflect.Descriptor instead.
func (*Inventory) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{30}
}

type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{31}
}

type Application struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Application) Reset() {
	*x = Application{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Application) ProtoMessage() {}

func (x *Application) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Application.ProtoReflect.Descriptor instead.
func (*Application) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{32}
}

type ApplyOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApplyOrder) Reset() {
	*x = ApplyOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyOrder) ProtoMessage() {}

func (x *ApplyOrder) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyOrder.ProtoReflect.Descriptor instead.
func (*ApplyOrder) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{33}
}

type OrderItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OrderItem) Reset() {
	*x = OrderItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderItem) ProtoMessage() {}

func (x *OrderItem) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderItem.ProtoReflect.Descriptor instead.
func (*OrderItem) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{34}
}

type PreAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PreAuth) Reset() {
	*x = PreAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreAuth) ProtoMessage() {}

func (x *PreAuth) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreAuth.ProtoReflect.Descriptor instead.
func (*PreAuth) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{35}
}

type PirService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PirService) Reset() {
	*x = PirService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PirService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PirService) ProtoMessage() {}

func (x *PirService) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PirService.ProtoReflect.Descriptor instead.
func (*PirService) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{36}
}

type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{37}
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{38}
}

// 三元组生成方式类型
type TripletsBitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TripletsBitInfo) Reset() {
	*x = TripletsBitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TripletsBitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TripletsBitInfo) ProtoMessage() {}

func (x *TripletsBitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TripletsBitInfo.ProtoReflect.Descriptor instead.
func (*TripletsBitInfo) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{39}
}

type Dag_Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Dag_Job) Reset() {
	*x = Dag_Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dag_Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dag_Job) ProtoMessage() {}

func (x *Dag_Job) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dag_Job.ProtoReflect.Descriptor instead.
func (*Dag_Job) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{0, 0}
}

type Dag_Graph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Dag_Graph) Reset() {
	*x = Dag_Graph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dag_Graph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dag_Graph) ProtoMessage() {}

func (x *Dag_Graph) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dag_Graph.ProtoReflect.Descriptor instead.
func (*Dag_Graph) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{0, 1}
}

// project member represents party involve certain project
type Project_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Project_Member) Reset() {
	*x = Project_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project_Member) ProtoMessage() {}

func (x *Project_Member) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project_Member.ProtoReflect.Descriptor instead.
func (*Project_Member) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{13, 0}
}

// project member represents furnace user involve certain project
type Project_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Project_User) Reset() {
	*x = Project_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project_User) ProtoMessage() {}

func (x *Project_User) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project_User.ProtoReflect.Descriptor instead.
func (*Project_User) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{13, 1}
}

type Service_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*Service_Config_PirConfig
	Data isService_Config_Data `protobuf_oneof:"data"`
}

func (x *Service_Config) Reset() {
	*x = Service_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Config) ProtoMessage() {}

func (x *Service_Config) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Config.ProtoReflect.Descriptor instead.
func (*Service_Config) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{18, 0}
}

func (m *Service_Config) GetData() isService_Config_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Service_Config) GetPirConfig() *Service_Config_PIR {
	if x, ok := x.GetData().(*Service_Config_PirConfig); ok {
		return x.PirConfig
	}
	return nil
}

type isService_Config_Data interface {
	isService_Config_Data()
}

type Service_Config_PirConfig struct {
	PirConfig *Service_Config_PIR `protobuf:"bytes,1,opt,name=pir_config,json=pirConfig,proto3,oneof"`
}

func (*Service_Config_PirConfig) isService_Config_Data() {}

type Service_Config_PIR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientPartyId string `protobuf:"bytes,1,opt,name=client_party_id,json=clientPartyId,proto3" json:"client_party_id,omitempty"`
	ServerPartyId string `protobuf:"bytes,2,opt,name=server_party_id,json=serverPartyId,proto3" json:"server_party_id,omitempty"`
	ClientKey     string `protobuf:"bytes,3,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
	ServerKey     string `protobuf:"bytes,4,opt,name=server_key,json=serverKey,proto3" json:"server_key,omitempty"`
}

func (x *Service_Config_PIR) Reset() {
	*x = Service_Config_PIR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sudo_enums_enums_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service_Config_PIR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Config_PIR) ProtoMessage() {}

func (x *Service_Config_PIR) ProtoReflect() protoreflect.Message {
	mi := &file_sudo_enums_enums_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Config_PIR.ProtoReflect.Descriptor instead.
func (*Service_Config_PIR) Descriptor() ([]byte, []int) {
	return file_sudo_enums_enums_proto_rawDescGZIP(), []int{18, 0, 0}
}

func (x *Service_Config_PIR) GetClientPartyId() string {
	if x != nil {
		return x.ClientPartyId
	}
	return ""
}

func (x *Service_Config_PIR) GetServerPartyId() string {
	if x != nil {
		return x.ServerPartyId
	}
	return ""
}

func (x *Service_Config_PIR) GetClientKey() string {
	if x != nil {
		return x.ClientKey
	}
	return ""
}

func (x *Service_Config_PIR) GetServerKey() string {
	if x != nil {
		return x.ServerKey
	}
	return ""
}

var File_sudo_enums_enums_proto protoreflect.FileDescriptor

var file_sudo_enums_enums_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x22, 0x80, 0x04,
	0x0a, 0x03, 0x44, 0x61, 0x67, 0x1a, 0x86, 0x02, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x22, 0x91, 0x01,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x55, 0x45,
	0x55, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x4b,
	0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x50, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x08, 0x22, 0x6b, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x4e, 0x51, 0x55, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04,
	0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52,
	0x44, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x52, 0x55, 0x4e, 0x10, 0x07, 0x1a, 0xef,
	0x01, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x70, 0x68, 0x22, 0xe5, 0x01, 0x0a, 0x06, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x5f, 0x41,
	0x4c, 0x4c, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x55, 0x4e, 0x5f, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x55, 0x4e, 0x5f, 0x54, 0x49, 0x4c,
	0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x1e, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x55,
	0x4e, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x28,
	0x12, 0x12, 0x0a, 0x0e, 0x52, 0x55, 0x4e, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x53, 0x54, 0x52, 0x45,
	0x41, 0x4d, 0x10, 0x32, 0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x41, 0x4c, 0x4c,
	0x10, 0x3c, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45,
	0x4e, 0x54, 0x10, 0x46, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x52, 0x55, 0x4e, 0x5f, 0x41, 0x4c,
	0x4c, 0x10, 0x50, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x52, 0x55, 0x4e, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x49, 0x4e, 0x55, 0x45, 0x10, 0x5a, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x42, 0x4d, 0x49,
	0x54, 0x10, 0x64, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x47,
	0x52, 0x41, 0x50, 0x48, 0x10, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x44, 0x49, 0x54, 0x10, 0x78,
	0x22, 0x9d, 0x02, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x22, 0xd5, 0x01, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x44, 0x49, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x54,
	0x45, 0x44, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x49, 0x4e,
	0x47, 0x10, 0x14, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x1e, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x28,
	0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x32, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x3c, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x46, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x50, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x5a, 0x12,
	0x09, 0x0a, 0x05, 0x55, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x64, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x55,
	0x54, 0x4f, 0x54, 0x55, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x55,
	0x54, 0x4f, 0x54, 0x55, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10,
	0x78, 0x22, 0x3d, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x47, 0x52, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x0a,
	0x22, 0xbf, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb4, 0x0a, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x10, 0x0b, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x52, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x52, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x5f,
	0x4e, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x12,
	0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x10, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x42,
	0x4f, 0x44, 0x59, 0x10, 0x11, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x5f, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x10, 0x12, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x13, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x4e,
	0x52, 0x45, 0x43, 0x4f, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10,
	0x14, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f,
	0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x15, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x52, 0x52, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x16, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x17, 0x12, 0x17, 0x0a, 0x13,
	0x45, 0x52, 0x52, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49,
	0x52, 0x45, 0x53, 0x10, 0x18, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x5f, 0x4c, 0x49, 0x43,
	0x45, 0x4e, 0x53, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47,
	0x45, 0x10, 0x19, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x1a, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x5f, 0x41,
	0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1b, 0x12, 0x1d, 0x0a, 0x19,
	0x45, 0x52, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x55, 0x4e,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x1c, 0x12, 0x1b, 0x0a, 0x17, 0x45,
	0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x55, 0x53, 0x49, 0x54, 0x41, 0x5f, 0x41, 0x56, 0x41,
	0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x1d, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x5f,
	0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10,
	0x1e, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x10, 0x64, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x5f,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44,
	0x10, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x66, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x52, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e,
	0x54, 0x10, 0x67, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x68, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46,
	0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x69, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4b, 0x45, 0x59,
	0x10, 0x6a, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x50, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x6b, 0x12, 0x20, 0x0a, 0x1c,
	0x45, 0x52, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x50,
	0x55, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x6c, 0x12, 0x22,
	0x0a, 0x1e, 0x45, 0x52, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x50, 0x41, 0x52, 0x54, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x6d, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x4e,
	0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x53, 0x10, 0x6e, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x52, 0x52,
	0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x44, 0x5f, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45,
	0x53, 0x10, 0x6f, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x70, 0x12, 0x1e, 0x0a, 0x1a,
	0x45, 0x52, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x4a, 0x4f, 0x49, 0x4e,
	0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x71, 0x12, 0x23, 0x0a, 0x1f,
	0x45, 0x52, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10,
	0x72, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x73, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x52, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x45, 0x44, 0x10, 0x74, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x5f, 0x41, 0x4c,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x75,
	0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x76, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x52, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x47, 0x59, 0x5f, 0x48, 0x49, 0x44,
	0x44, 0x45, 0x4e, 0x10, 0x77, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x10, 0x78, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x79, 0x12, 0x16, 0x0a, 0x11, 0x45,
	0x52, 0x52, 0x5f, 0x44, 0x42, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0xc8, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x5f, 0x44, 0x42, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xc9, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x45,
	0x52, 0x52, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0xac, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x5f, 0x48, 0x54,
	0x54, 0x50, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0xad, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0xae, 0x02, 0x22, 0xb5, 0x04, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x22, 0x95, 0x01, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12,
	0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06,
	0x4b, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x56, 0x49,
	0x45, 0x57, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x09, 0x22, 0x4c, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14,
	0x0a, 0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49,
	0x54, 0x59, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47,
	0x48, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x10, 0x04,
	0x22, 0x55, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f,
	0x44, 0x45, 0x4c, 0x5f, 0x46, 0x49, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x49, 0x41,
	0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x53, 0x10,
	0x02, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x51, 0x4c, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52,
	0x45, 0x44, 0x49, 0x43, 0x54, 0x10, 0x04, 0x22, 0x26, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49,
	0x43, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22,
	0x59, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45,
	0x4a, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x12,
	0x09, 0x0a, 0x05, 0x52, 0x45, 0x52, 0x55, 0x4e, 0x10, 0x05, 0x22, 0x6e, 0x0a, 0x13, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x49, 0x4e,
	0x49, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x04, 0x22, 0xf2, 0x1b, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x22, 0xe8, 0x1b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x64, 0x75,
	0x6d, 0x6d, 0x79, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12,
	0x07, 0x0a, 0x03, 0x70, 0x73, 0x69, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x78, 0x67, 0x62, 0x6f,
	0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x10, 0x04, 0x12, 0x11, 0x0a,
	0x0d, 0x78, 0x67, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x10, 0x05,
	0x12, 0x17, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x70, 0x72, 0x65,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x72, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x10, 0x0a,
	0x12, 0x24, 0x0a, 0x20, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x10, 0x0b, 0x12, 0x26, 0x0a, 0x22, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x10, 0x0c, 0x12, 0x15,
	0x0a, 0x11, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x5f, 0x70, 0x73, 0x69, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x5f, 0x70, 0x73, 0x69, 0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f,
	0x6e, 0x74, 0x61, 0x6c, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x10, 0x10, 0x12, 0x26, 0x0a, 0x22, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x72,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x10, 0x11, 0x12, 0x24, 0x0a, 0x20, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61,
	0x6c, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x10, 0x12, 0x12, 0x28, 0x0a, 0x24, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x72,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x10, 0x13, 0x12, 0x26, 0x0a, 0x22, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61,
	0x6c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x64,
	0x6f, 0x77, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x15, 0x12, 0x1a, 0x0a,
	0x16, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x10, 0x16, 0x12, 0x11, 0x0a, 0x0d, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x10, 0x17, 0x12, 0x21, 0x0a, 0x1d,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x10, 0x18, 0x12,
	0x23, 0x0a, 0x1f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x70, 0x72, 0x65,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x10, 0x19, 0x12, 0x13, 0x0a, 0x0f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75,
	0x73, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x10, 0x1a, 0x12, 0x09, 0x0a, 0x05, 0x77, 0x68, 0x65,
	0x72, 0x65, 0x10, 0x1b, 0x12, 0x0f, 0x0a, 0x0b, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x74,
	0x68, 0x61, 0x6e, 0x10, 0x1c, 0x12, 0x09, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x1d,
	0x12, 0x08, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x10, 0x1e, 0x12, 0x10, 0x0a, 0x0c, 0x77, 0x6f,
	0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x10, 0x1f, 0x12, 0x0c, 0x0a, 0x08,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x70, 0x69, 0x72, 0x10, 0x20, 0x12, 0x14, 0x0a, 0x10, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x70, 0x69, 0x72, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x10, 0x21,
	0x12, 0x12, 0x0a, 0x0e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x70, 0x69, 0x72, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x10, 0x22, 0x12, 0x0c, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x23, 0x12, 0x0f, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x24, 0x12, 0x12, 0x0a, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x25, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x10, 0x26, 0x12, 0x12, 0x0a, 0x0e, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x6f, 0x72, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x27, 0x12, 0x0c, 0x0a, 0x08, 0x6c, 0x65, 0x73,
	0x73, 0x74, 0x68, 0x61, 0x6e, 0x10, 0x28, 0x12, 0x0f, 0x0a, 0x0b, 0x6c, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x29, 0x12, 0x0c, 0x0a, 0x08, 0x65, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x10, 0x2a, 0x12, 0x0e, 0x0a, 0x0a, 0x69, 0x6e, 0x65, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x10, 0x2b, 0x12, 0x12, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x2c, 0x12, 0x0e, 0x0a, 0x0a, 0x73, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x72, 0x6f, 0x6f, 0x74, 0x10, 0x2d, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x6e,
	0x64, 0x10, 0x2e, 0x12, 0x06, 0x0a, 0x02, 0x6f, 0x72, 0x10, 0x2f, 0x12, 0x07, 0x0a, 0x03, 0x73,
	0x75, 0x6d, 0x10, 0x30, 0x12, 0x0b, 0x0a, 0x07, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x10,
	0x31, 0x12, 0x15, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x64, 0x65, 0x76,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x32, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x68, 0x6f, 0x77,
	0x69, 0x64, 0x10, 0x33, 0x12, 0x12, 0x0a, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x10, 0x34, 0x12, 0x12, 0x0a, 0x0e, 0x6e, 0x61, 0x69, 0x76,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x10, 0x35, 0x12, 0x14, 0x0a, 0x10,
	0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67,
	0x10, 0x36, 0x12, 0x11, 0x0a, 0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x37, 0x12, 0x0f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x10, 0x38, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x10, 0x39, 0x12, 0x08, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x10, 0x3a, 0x12, 0x18, 0x0a,
	0x14, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x3b, 0x12, 0x0c, 0x0a, 0x08, 0x66, 0x6f, 0x75, 0x72, 0x70,
	0x73, 0x75, 0x6d, 0x10, 0x3c, 0x12, 0x10, 0x0a, 0x0c, 0x66, 0x6f, 0x75, 0x72, 0x70, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x10, 0x3d, 0x12, 0x0d, 0x0a, 0x09, 0x66, 0x6f, 0x75, 0x72, 0x70,
	0x6f, 0x70, 0x65, 0x6e, 0x10, 0x3e, 0x12, 0x10, 0x0a, 0x0c, 0x66, 0x6f, 0x75, 0x72, 0x70, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x10, 0x3f, 0x12, 0x12, 0x0a, 0x0e, 0x67, 0x61, 0x72, 0x62,
	0x6c, 0x65, 0x64, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x10, 0x40, 0x12, 0x0c, 0x0a, 0x08,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x41, 0x12, 0x10, 0x0a, 0x0c, 0x6c, 0x61,
	0x72, 0x67, 0x65, 0x73, 0x74, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x10, 0x42, 0x12, 0x1d, 0x0a, 0x19,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x78, 0x67, 0x62, 0x6f, 0x6f, 0x73,
	0x74, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x10, 0x43, 0x12, 0x1b, 0x0a, 0x17, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x78, 0x67, 0x62, 0x6f, 0x6f, 0x73, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x10, 0x44, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x6e, 0x6e, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x10,
	0x45, 0x12, 0x19, 0x0a, 0x15, 0x63, 0x6e, 0x6e, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x10, 0x46, 0x12, 0x19, 0x0a, 0x15,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x62, 0x61, 0x79, 0x65, 0x73, 0x5f,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x10, 0x47, 0x12, 0x1b, 0x0a, 0x17, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x62, 0x61, 0x79, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x10, 0x48, 0x12, 0x17, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x62, 0x61, 0x79, 0x65, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x10, 0x49, 0x12, 0x19, 0x0a,
	0x15, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x62, 0x61, 0x79, 0x65, 0x73, 0x5f, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x10, 0x4a, 0x12, 0x11, 0x0a, 0x0d, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x6b, 0x6e, 0x6e, 0x10, 0x4b, 0x12, 0x0f, 0x0a, 0x0b, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6b, 0x6e, 0x6e, 0x10, 0x4c, 0x12, 0x18, 0x0a, 0x14,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6b, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x5f, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x10, 0x4d, 0x12, 0x1a, 0x0a, 0x16, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x6b, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x10, 0x4e, 0x12, 0x1a, 0x0a, 0x16, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c,
	0x6b, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x10, 0x4f, 0x12, 0x1c,
	0x0a, 0x18, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x6b, 0x6d, 0x65, 0x61,
	0x6e, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x10, 0x50, 0x12, 0x15, 0x0a, 0x11,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x76, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x10, 0x51, 0x12, 0x17, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x73,
	0x76, 0x6d, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x10, 0x52, 0x12, 0x10, 0x0a, 0x0c,
	0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x70, 0x73, 0x69, 0x10, 0x53, 0x12, 0x0f,
	0x0a, 0x0b, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x76, 0x69, 0x66, 0x10, 0x54, 0x12,
	0x11, 0x0a, 0x0d, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x76, 0x69, 0x66,
	0x10, 0x55, 0x12, 0x15, 0x0a, 0x11, 0x63, 0x6e, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x10, 0x56, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x6e, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x10, 0x57, 0x12, 0x1d, 0x0a, 0x19, 0x70, 0x68, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x72,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x10,
	0x58, 0x12, 0x1f, 0x0a, 0x1b, 0x70, 0x68, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x72, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x10, 0x59, 0x12, 0x1f, 0x0a, 0x1b, 0x70, 0x68, 0x65, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x10, 0x5a, 0x12, 0x21, 0x0a, 0x1d, 0x70, 0x68, 0x65, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x10, 0x5b, 0x12, 0x10, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x73, 0x69, 0x10, 0x5c, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x70, 0x73, 0x69, 0x10,
	0x5d, 0x12, 0x0c, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x70, 0x73, 0x69, 0x10, 0x5e, 0x12,
	0x10, 0x0a, 0x0c, 0x6c, 0x67, 0x72, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x68, 0x75, 0x67, 0x65, 0x10,
	0x5f, 0x12, 0x12, 0x0a, 0x0e, 0x6c, 0x67, 0x72, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x68,
	0x75, 0x67, 0x65, 0x10, 0x60, 0x12, 0x14, 0x0a, 0x10, 0x78, 0x67, 0x62, 0x6f, 0x6f, 0x73, 0x74,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x68, 0x75, 0x67, 0x65, 0x10, 0x61, 0x12, 0x16, 0x0a, 0x12, 0x78,
	0x67, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x68, 0x75, 0x67,
	0x65, 0x10, 0x62, 0x12, 0x23, 0x0a, 0x1f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x10, 0x63, 0x12, 0x25, 0x0a, 0x21, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x10, 0x64, 0x12,
	0x1d, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x78,
	0x67, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x10, 0x65, 0x12, 0x1f,
	0x0a, 0x1b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x78, 0x67,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x10, 0x66, 0x12,
	0x1c, 0x0a, 0x18, 0x78, 0x67, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x67, 0x12, 0x0d, 0x0a,
	0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x6a, 0x6f, 0x69, 0x6e, 0x10, 0x68, 0x12, 0x13, 0x0a, 0x0f,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x70, 0x73, 0x69, 0x10,
	0x69, 0x12, 0x21, 0x0a, 0x1d, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x70,
	0x73, 0x69, 0x10, 0x6a, 0x12, 0x0f, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x6f, 0x6e,
	0x63, 0x61, 0x74, 0x10, 0x6b, 0x12, 0x0d, 0x0a, 0x09, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x69,
	0x7a, 0x65, 0x10, 0x6c, 0x12, 0x10, 0x0a, 0x0c, 0x70, 0x6f, 0x63, 0x5f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x10, 0x6d, 0x12, 0x17, 0x0a, 0x13, 0x70, 0x6f, 0x63, 0x68, 0x6c, 0x73,
	0x74, 0x6d, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x10, 0x6e, 0x12,
	0x19, 0x0a, 0x15, 0x70, 0x6f, 0x63, 0x68, 0x6c, 0x73, 0x74, 0x6d, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x10, 0x6f, 0x12, 0x17, 0x0a, 0x13, 0x70, 0x6f,
	0x63, 0x68, 0x6c, 0x73, 0x74, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x10, 0x70, 0x12, 0x19, 0x0a, 0x15, 0x70, 0x6f, 0x63, 0x68, 0x6c, 0x73, 0x74, 0x6d, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x10, 0x71, 0x12, 0x1e,
	0x0a, 0x1a, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x78, 0x67, 0x62, 0x6f,
	0x6f, 0x73, 0x74, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x68, 0x75, 0x67, 0x65, 0x10, 0x72, 0x12, 0x20,
	0x0a, 0x1c, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x78, 0x67, 0x62, 0x6f,
	0x6f, 0x73, 0x74, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x68, 0x75, 0x67, 0x65, 0x10, 0x73,
	0x12, 0x15, 0x0a, 0x11, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x74, 0x12, 0x11, 0x0a, 0x0d, 0x68, 0x6c, 0x67, 0x72, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x68, 0x75, 0x67, 0x65, 0x10, 0x75, 0x12, 0x13, 0x0a, 0x0f, 0x68, 0x6c,
	0x67, 0x72, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x68, 0x75, 0x67, 0x65, 0x10, 0x76, 0x12,
	0x17, 0x0a, 0x13, 0x76, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x74, 0x72, 0x65, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x10, 0x77, 0x12, 0x19, 0x0a, 0x15, 0x76, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x10, 0x78, 0x12, 0x17, 0x0a, 0x13, 0x68, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x74, 0x72, 0x65, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x10, 0x79, 0x12, 0x19, 0x0a, 0x15,
	0x68, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x10, 0x7a, 0x12, 0x0d, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x6f, 0x70, 0x65, 0x6e, 0x10, 0x7b, 0x12, 0x0e, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x10, 0x7c, 0x12, 0x0e, 0x0a, 0x0a, 0x69, 0x73, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x10, 0x7d, 0x12, 0x0e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x73, 0x71, 0x6c, 0x10, 0x7e, 0x12, 0x19, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x10, 0x80,
	0x01, 0x12, 0x1b, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x32, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x10, 0x81, 0x01, 0x12, 0x2a,
	0x0a, 0x25, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x10, 0x82, 0x01, 0x12, 0x2c, 0x0a, 0x27, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x10, 0x83, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x72, 0x64, 0x10, 0x84, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x10, 0x85, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x77, 0x75, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x78, 0x67,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x10, 0x86, 0x01, 0x12, 0x19,
	0x0a, 0x14, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x63, 0x6e, 0x6e, 0x32, 0x5f, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x10, 0x87, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x66, 0x75, 0x7a,
	0x7a, 0x79, 0x70, 0x73, 0x69, 0x10, 0x88, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x69, 0x73, 0x6f, 0x70,
	0x10, 0x89, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x10,
	0x8a, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x8b, 0x01, 0x12, 0x16, 0x0a, 0x11,
	0x66, 0x65, 0x64, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x8c, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x76,
	0x69, 0x65, 0x77, 0x10, 0x8d, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x61, 0x73, 0x73, 0x65, 0x74, 0x6f, 0x76, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x10, 0x8e, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x8f, 0x01, 0x12,
	0x11, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x10,
	0x90, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x6f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x10, 0x91, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x10, 0x92,
	0x01, 0x12, 0x0b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x10, 0x93, 0x01, 0x12, 0x14,
	0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x10, 0x94, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x72, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x10, 0x95, 0x01,
	0x12, 0x2c, 0x0a, 0x27, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x10, 0x96, 0x01, 0x12, 0x14,
	0x0a, 0x0f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x6e, 0x10, 0x97, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x70, 0x69, 0x72, 0x10, 0x98, 0x01, 0x12, 0x19,
	0x0a, 0x14, 0x67, 0x61, 0x72, 0x62, 0x6c, 0x65, 0x64, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x65, 0x72, 0x10, 0x99, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x9a, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x77, 0x75, 0x6b, 0x6f,
	0x6e, 0x67, 0x5f, 0x70, 0x73, 0x69, 0x10, 0x9b, 0x01, 0x22, 0x04, 0x08, 0x7f, 0x10, 0x7f, 0x22,
	0x8a, 0x02, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x74, 0x79, 0x22, 0x1f, 0x0a, 0x04, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x55, 0x53, 0x49, 0x54, 0x41, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x46, 0x55, 0x52, 0x4e, 0x41, 0x43, 0x45, 0x10, 0x01, 0x22, 0x70, 0x0a, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x45, 0x41, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x41,
	0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4a, 0x45,
	0x43, 0x54, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x06,
	0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x07, 0x22, 0x6e, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45,
	0x46, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x06, 0x22, 0x93, 0x01, 0x0a,
	0x0a, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x4d, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x59,
	0x53, 0x51, 0x4c, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x49,
	0x4f, 0x5f, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x10, 0x05, 0x22, 0x36, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x02, 0x22, 0x9a, 0x01, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x45, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x56, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x52, 0x54,
	0x49, 0x46, 0x41, 0x43, 0x54, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x44, 0x45, 0x4c,
	0x50, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x22, 0x47, 0x0a, 0x0e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x52, 0x49, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x03, 0x22,
	0xa9, 0x04, 0x0a, 0x0c, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0x9c, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x55,
	0x42, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x45, 0x52, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b,
	0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x54, 0x4f,
	0x43, 0x4b, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10,
	0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x09, 0x22,
	0x3a, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41,
	0x55, 0x54, 0x4f, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x22, 0x48, 0x0a, 0x0d, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11,
	0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x02, 0x22, 0x3c, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x53,
	0x68, 0x61, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x53, 0x48, 0x41, 0x44, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x41, 0x44,
	0x4f, 0x57, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x5f, 0x53, 0x48, 0x41, 0x44, 0x4f,
	0x57, 0x10, 0x02, 0x22, 0x3a, 0x0a, 0x0d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x52, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x10, 0x02, 0x22,
	0x3c, 0x0a, 0x0a, 0x56, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x12, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49,
	0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x3c, 0x0a,
	0x06, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x53, 0x55, 0x46, 0x46, 0x49, 0x58, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43,
	0x48, 0x41, 0x52, 0x54, 0x53, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x53, 0x56, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x22, 0x66, 0x0a, 0x04, 0x50,
	0x65, 0x72, 0x6d, 0x22, 0x5e, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x45,
	0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x55,
	0x54, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x05, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x54, 0x43,
	0x48, 0x10, 0x07, 0x22, 0x82, 0x01, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x79, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x49, 0x44, 0x10,
	0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x06,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x49, 0x50, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x08, 0x22, 0x57, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x48, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x44, 0x41, 0x54, 0x41, 0x53, 0x52, 0x43, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43,
	0x54, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x50, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10,
	0x04, 0x22, 0x88, 0x01, 0x0a, 0x09, 0x41, 0x72, 0x69, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x22,
	0x36, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x53, 0x10, 0x03, 0x22, 0x43, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x22, 0xac, 0x06, 0x0a,
	0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0xba, 0x02, 0x0a, 0x06, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x2f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4a, 0x4f, 0x49, 0x4e,
	0x45, 0x52, 0x10, 0x02, 0x22, 0xae, 0x01, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x51, 0x55, 0x49, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x56, 0x49, 0x54,
	0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x49, 0x43,
	0x4b, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x06,
	0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10,
	0x07, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x10, 0x08, 0x22, 0x4e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4a, 0x4f, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x54, 0x4f, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x4b, 0x49, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x51, 0x55, 0x49, 0x54,
	0x49, 0x45, 0x44, 0x10, 0x04, 0x1a, 0xba, 0x02, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x22, 0x3e,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x03, 0x22, 0xf1,
	0x01, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x51, 0x55, 0x49, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x59, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x59, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x44,
	0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x49, 0x43, 0x4b,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d,
	0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x0b, 0x12,
	0x11, 0x0a, 0x0d, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x5f, 0x56, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x0c, 0x22, 0x27, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x02, 0x22, 0x45, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1c,
	0x0a, 0x18, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41,
	0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x47, 0x42, 0x41, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x10, 0x01, 0x22, 0x37, 0x0a, 0x07, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x12, 0x13, 0x0a,
	0x0f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x22, 0xc8, 0x01, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x65, 0x12,
	0x11, 0x0a, 0x0c, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0xc9, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10,
	0xca, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x53, 0x10, 0xcb, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x56, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52,
	0x45, 0x41, 0x4c, 0x10, 0xad, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x56, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x41, 0x55, 0x54, 0x4f, 0x47, 0x45, 0x4e, 0x10, 0xae, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x56,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x10, 0xaf, 0x02, 0x22, 0x28, 0x0a, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x59, 0x45, 0x41, 0x52, 0x10, 0x02, 0x22, 0x53, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50,
	0x61, 0x63, 0x6b, 0x22, 0x46, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x4d, 0x49, 0x58, 0x45, 0x44, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x58, 0x47, 0x42, 0x10,
	0x02, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x47, 0x52, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x52,
	0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4e, 0x4e, 0x10, 0x05, 0x22, 0x62, 0x0a, 0x0c, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x2e, 0x0a, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x02, 0x22, 0x22, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x50, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x22,
	0xa5, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x40, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x03, 0x22, 0x4c, 0x0a, 0x06, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x50, 0x50, 0x52, 0x4f,
	0x56, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45,
	0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x04, 0x22, 0xf8, 0x04, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x1a, 0xf0, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48,
	0x0a, 0x0a, 0x70, 0x69, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x49, 0x52, 0x48, 0x00, 0x52, 0x09, 0x70,
	0x69, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x93, 0x01, 0x0a, 0x03, 0x50, 0x49, 0x52,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x06,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x03, 0x50, 0x49, 0x52, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x52, 0x45, 0x44, 0x49, 0x43, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x03, 0x50, 0x53,
	0x49, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x01, 0x22, 0x2c, 0x0a, 0x03, 0x54, 0x61, 0x62, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x41, 0x42, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x53, 0x45, 0x4c, 0x46, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x53, 0x10, 0x02, 0x22, 0x89, 0x01, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x41, 0x50, 0x50,
	0x4c, 0x59, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x10, 0x0b,
	0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54,
	0x10, 0x15, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x10,
	0x16, 0x22, 0x7f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x0a, 0x12, 0x0b, 0x0a,
	0x07, 0x42, 0x4f, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x0f, 0x22, 0x58, 0x0a, 0x0e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x50, 0x49, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x22, 0x46, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x12,
	0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x57, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x54, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x04, 0x12, 0x07,
	0x0a, 0x03, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x45, 0x45, 0x4b, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x03, 0x22, 0x5e, 0x0a, 0x0c,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x4e, 0x0a, 0x0c,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03,
	0x4e, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x45, 0x41, 0x43, 0x48, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x45, 0x41, 0x43, 0x48, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a,
	0x45, 0x41, 0x43, 0x48, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x04, 0x22, 0xa7, 0x01, 0x0a,
	0x0c, 0x53, 0x70, 0x6c, 0x69, 0x63, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x36, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x45, 0x52, 0x54, 0x49,
	0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x4f, 0x4e,
	0x54, 0x41, 0x4c, 0x10, 0x02, 0x22, 0x5f, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x45, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x4e, 0x45, 0x52,
	0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x55, 0x54, 0x45, 0x52,
	0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x46, 0x54, 0x5f,
	0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x04, 0x22, 0x39, 0x0a, 0x06, 0x54, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x22, 0x2f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10,
	0x02, 0x22, 0xc2, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x22, 0x59,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x45, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x22, 0x5b, 0x0a, 0x06, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x50, 0x50, 0x52, 0x4f,
	0x56, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x45, 0x52, 0x10, 0x05, 0x22, 0x4b, 0x0a, 0x0a, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x50, 0x61, 0x67, 0x65, 0x22, 0x3d, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x55, 0x52, 0x4e,
	0x41, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x10, 0x02, 0x22, 0xc1, 0x02, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52,
	0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x44, 0x10,
	0x02, 0x22, 0x54, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a,
	0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x4c, 0x54, 0x45, 0x52, 0x54, 0x10, 0x04, 0x22, 0xad, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x49, 0x43,
	0x45, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x10, 0x04, 0x12, 0x11, 0x0a,
	0x0d, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x05,
	0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x4e, 0x45,
	0x57, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x52,
	0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x07, 0x22, 0xca, 0x03, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x5b, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x11, 0x0a, 0x0d,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x48, 0x41,
	0x54, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x47, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08,
	0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x41,
	0x53, 0x4b, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x06,
	0x22, 0x5e, 0x0a, 0x0d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x50, 0x41, 0x52, 0x54, 0x59, 0x53, 0x55, 0x42, 0x53, 0x43,
	0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x22, 0x46, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x22, 0x3c, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x42, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x55, 0x42, 0x53, 0x43,
	0x52, 0x49, 0x42, 0x45, 0x10, 0x02, 0x22, 0x4f, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x55, 0x53, 0x45, 0x52, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x03, 0x22, 0x2b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x52, 0x45,
	0x41, 0x44, 0x10, 0x02, 0x22, 0x3b, 0x0a, 0x03, 0x54, 0x46, 0x41, 0x22, 0x34, 0x0a, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x02, 0x22, 0x6e, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x61,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59, 0x4e, 0x43,
	0x5f, 0x56, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x50, 0x4c,
	0x49, 0x54, 0x5f, 0x56, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x10, 0x03, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x50, 0x4c, 0x49, 0x43, 0x45, 0x5f, 0x56, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x04, 0x22, 0x4c, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x3d, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x10,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4f, 0x55, 0x52, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x02, 0x22,
	0x45, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x38, 0x0a, 0x0b,
	0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x42, 0x59, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x59,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x22, 0xa9, 0x01, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x22, 0x48, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x49, 0x4e, 0x5f, 0x53, 0x48, 0x45, 0x4c, 0x46, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09,
	0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x49, 0x4e, 0x47, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x55,
	0x4e, 0x53, 0x48, 0x45, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x14, 0x22, 0x56, 0x0a, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x50, 0x50, 0x52,
	0x4f, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x45, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x50, 0x50, 0x4c, 0x59,
	0x10, 0x05, 0x22, 0xa6, 0x01, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x14, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x1e, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45,
	0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x28, 0x22, 0x41, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56,
	0x45, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x14, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x10, 0x1e, 0x22, 0x3f, 0x0a, 0x0a, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x31, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x02, 0x22, 0x81, 0x01, 0x0a,
	0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x74, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x56, 0x49,
	0x45, 0x57, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x14, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45,
	0x44, 0x10, 0x1e, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x28, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45,
	0x44, 0x10, 0x32, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x3c,
	0x22, 0x98, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x22, 0x33, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x59, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10,
	0x02, 0x22, 0x58, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x22, 0xec, 0x01, 0x0a, 0x0a,
	0x50, 0x69, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x5b, 0x0a, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x50, 0x4c,
	0x4f, 0x59, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x05, 0x22, 0x80, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x54, 0x4f, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x42, 0x4f, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x04,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a,
	0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x22, 0x91, 0x01, 0x0a, 0x05, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x51, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x55, 0x54,
	0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x22, 0x35, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x22, 0xe6,
	0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x36, 0x0a, 0x04, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x54, 0x49,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x51, 0x55, 0x45, 0x55, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x22, 0x28, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x06, 0x0a,
	0x02, 0x4d, 0x49, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x49, 0x10, 0x02, 0x22, 0x42, 0x0a,
	0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x56, 0x45, 0x10,
	0x02, 0x22, 0x34, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x41, 0x52,
	0x44, 0x57, 0x41, 0x52, 0x45, 0x10, 0x02, 0x22, 0x59, 0x0a, 0x0f, 0x54, 0x72, 0x69, 0x70, 0x6c,
	0x65, 0x74, 0x73, 0x42, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x46, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x45, 0x41, 0x4c, 0x5f, 0x4c, 0x34, 0x32, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x45, 0x41, 0x4c, 0x5f, 0x4c, 0x36, 0x30, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x43,
	0x41, 0x52, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x10, 0x04, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sudo_enums_enums_proto_rawDescOnce sync.Once
	file_sudo_enums_enums_proto_rawDescData = file_sudo_enums_enums_proto_rawDesc
)

func file_sudo_enums_enums_proto_rawDescGZIP() []byte {
	file_sudo_enums_enums_proto_rawDescOnce.Do(func() {
		file_sudo_enums_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_sudo_enums_enums_proto_rawDescData)
	})
	return file_sudo_enums_enums_proto_rawDescData
}

var file_sudo_enums_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 89)
var file_sudo_enums_enums_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_sudo_enums_enums_proto_goTypes = []interface{}{
	(Dag_Job_Status)(0),             // 0: sudo.protobuf.enums.Dag.Job.Status
	(Dag_Job_Action)(0),             // 1: sudo.protobuf.enums.Dag.Job.Action
	(Dag_Graph_Action)(0),           // 2: sudo.protobuf.enums.Dag.Graph.Action
	(Task_Status)(0),                // 3: sudo.protobuf.enums.Task.Status
	(Task_AutoTuningAlgorithm)(0),   // 4: sudo.protobuf.enums.Task.AutoTuningAlgorithm
	(Result_Type)(0),                // 5: sudo.protobuf.enums.Result.Type
	(Job_Status)(0),                 // 6: sudo.protobuf.enums.Job.Status
	(Job_Priority)(0),               // 7: sudo.protobuf.enums.Job.Priority
	(Job_Type)(0),                   // 8: sudo.protobuf.enums.Job.Type
	(Job_ComputeMode)(0),            // 9: sudo.protobuf.enums.Job.ComputeMode
	(Job_Action)(0),                 // 10: sudo.protobuf.enums.Job.Action
	(Job_BlockScheduleStatus)(0),    // 11: sudo.protobuf.enums.Job.BlockScheduleStatus
	(Stage_Type)(0),                 // 12: sudo.protobuf.enums.Stage.Type
	(Party_Role)(0),                 // 13: sudo.protobuf.enums.Party.Role
	(Party_Action)(0),               // 14: sudo.protobuf.enums.Party.Action
	(Party_Status)(0),               // 15: sudo.protobuf.enums.Party.Status
	(Datasource_Type)(0),            // 16: sudo.protobuf.enums.Datasource.Type
	(Datasource_Status)(0),          // 17: sudo.protobuf.enums.Datasource.Status
	(Datainfo_DataType)(0),          // 18: sudo.protobuf.enums.Datainfo.DataType
	(Datainfo_PhysicalStatus)(0),    // 19: sudo.protobuf.enums.Datainfo.PhysicalStatus
	(VirtualTable_Status)(0),        // 20: sudo.protobuf.enums.VirtualTable.Status
	(VirtualTable_SourceType)(0),    // 21: sudo.protobuf.enums.VirtualTable.SourceType
	(VirtualTable_Authorization)(0), // 22: sudo.protobuf.enums.VirtualTable.Authorization
	(VirtualTable_ShadowShape)(0),   // 23: sudo.protobuf.enums.VirtualTable.ShadowShape
	(VirtualTable_ShareFiltrate)(0), // 24: sudo.protobuf.enums.VirtualTable.ShareFiltrate
	(VirtualTable_VTableType)(0),    // 25: sudo.protobuf.enums.VirtualTable.VTableType
	(VirtualTable_Suffix)(0),        // 26: sudo.protobuf.enums.VirtualTable.Suffix
	(Perm_Action)(0),                // 27: sudo.protobuf.enums.Perm.Action
	(Order_Status)(0),               // 28: sudo.protobuf.enums.Order.Status
	(InputOutput_Type)(0),           // 29: sudo.protobuf.enums.InputOutput.Type
	(Aritifact_Type)(0),             // 30: sudo.protobuf.enums.Aritifact.Type
	(Aritifact_Status)(0),           // 31: sudo.protobuf.enums.Aritifact.Status
	(Project_Status)(0),             // 32: sudo.protobuf.enums.Project.Status
	(Project_ProgramCategory)(0),    // 33: sudo.protobuf.enums.Project.ProgramCategory
	(Project_ABILITY)(0),            // 34: sudo.protobuf.enums.Project.ABILITY
	(Project_Member_Type)(0),        // 35: sudo.protobuf.enums.Project.Member.Type
	(Project_Member_Action)(0),      // 36: sudo.protobuf.enums.Project.Member.Action
	(Project_Member_Status)(0),      // 37: sudo.protobuf.enums.Project.Member.Status
	(Project_User_Type)(0),          // 38: sudo.protobuf.enums.Project.User.Type
	(Project_User_Action)(0),        // 39: sudo.protobuf.enums.Project.User.Action
	(Stats_Action)(0),               // 40: sudo.protobuf.enums.Stats.Action
	(Stats_GroupBy)(0),              // 41: sudo.protobuf.enums.Stats.GroupBy
	(ModelPack_ModelType)(0),        // 42: sudo.protobuf.enums.ModelPack.ModelType
	(UserBookmark_Action)(0),        // 43: sudo.protobuf.enums.UserBookmark.Action
	(UserBookmark_Type)(0),          // 44: sudo.protobuf.enums.UserBookmark.Type
	(ReadDataApplication_Status)(0), // 45: sudo.protobuf.enums.ReadDataApplication.Status
	(ReadDataApplication_Action)(0), // 46: sudo.protobuf.enums.ReadDataApplication.Action
	(Service_Type)(0),               // 47: sudo.protobuf.enums.Service.Type
	(Service_Tab)(0),                // 48: sudo.protobuf.enums.Service.Tab
	(Service_Action)(0),             // 49: sudo.protobuf.enums.Service.Action
	(Service_Status)(0),             // 50: sudo.protobuf.enums.Service.Status
	(OnlineAPIStats_Period)(0),      // 51: sudo.protobuf.enums.OnlineAPIStats.Period
	(TaskSchedule_ScheduleMode)(0),  // 52: sudo.protobuf.enums.TaskSchedule.ScheduleMode
	(SplicedTable_Type)(0),          // 53: sudo.protobuf.enums.SplicedTable.Type
	(SplicedTable_Relation)(0),      // 54: sudo.protobuf.enums.SplicedTable.Relation
	(TCache_Type)(0),                // 55: sudo.protobuf.enums.TCache.Type
	(Register_Status)(0),            // 56: sudo.protobuf.enums.Register.Status
	(Register_Action)(0),            // 57: sudo.protobuf.enums.Register.Action
	(YellowPage_ServiceType)(0),     // 58: sudo.protobuf.enums.YellowPage.ServiceType
	(Notification_Status)(0),        // 59: sudo.protobuf.enums.Notification.Status
	(Notification_Category)(0),      // 60: sudo.protobuf.enums.Notification.Category
	(Notification_Type)(0),          // 61: sudo.protobuf.enums.Notification.Type
	(Message_Topic)(0),              // 62: sudo.protobuf.enums.Message.Topic
	(Message_PublisherType)(0),      // 63: sudo.protobuf.enums.Message.PublisherType
	(Message_PublicationType)(0),    // 64: sudo.protobuf.enums.Message.PublicationType
	(Message_Action)(0),             // 65: sudo.protobuf.enums.Message.Action
	(Message_ClientType)(0),         // 66: sudo.protobuf.enums.Message.ClientType
	(Message_Status)(0),             // 67: sudo.protobuf.enums.Message.Status
	(TFA_Action)(0),                 // 68: sudo.protobuf.enums.TFA.Action
	(LocalTask_Type)(0),             // 69: sudo.protobuf.enums.LocalTask.Type
	(Aggregation_Interval)(0),       // 70: sudo.protobuf.enums.Aggregation.Interval
	(Inventory_BillingType)(0),      // 71: sudo.protobuf.enums.Inventory.BillingType
	(Asset_Status)(0),               // 72: sudo.protobuf.enums.Asset.Status
	(Asset_Action)(0),               // 73: sudo.protobuf.enums.Asset.Action
	(Application_Status)(0),         // 74: sudo.protobuf.enums.Application.Status
	(Application_Action)(0),         // 75: sudo.protobuf.enums.Application.Action
	(ApplyOrder_Type)(0),            // 76: sudo.protobuf.enums.ApplyOrder.Type
	(OrderItem_Status)(0),           // 77: sudo.protobuf.enums.OrderItem.Status
	(PreAuth_Type)(0),               // 78: sudo.protobuf.enums.PreAuth.Type
	(PreAuth_ConsumptionStatus)(0),  // 79: sudo.protobuf.enums.PreAuth.ConsumptionStatus
	(PirService_Action)(0),          // 80: sudo.protobuf.enums.PirService.Action
	(PirService_Status)(0),          // 81: sudo.protobuf.enums.PirService.Status
	(Token_Status)(0),               // 82: sudo.protobuf.enums.Token.Status
	(Token_Action)(0),               // 83: sudo.protobuf.enums.Token.Action
	(Resource_Mode)(0),              // 84: sudo.protobuf.enums.Resource.Mode
	(Resource_Unit)(0),              // 85: sudo.protobuf.enums.Resource.Unit
	(Resource_RequestMode)(0),       // 86: sudo.protobuf.enums.Resource.RequestMode
	(Resource_Type)(0),              // 87: sudo.protobuf.enums.Resource.Type
	(TripletsBitInfo_Type)(0),       // 88: sudo.protobuf.enums.TripletsBitInfo.Type
	(*Dag)(nil),                     // 89: sudo.protobuf.enums.Dag
	(*Task)(nil),                    // 90: sudo.protobuf.enums.Task
	(*Result)(nil),                  // 91: sudo.protobuf.enums.Result
	(*Job)(nil),                     // 92: sudo.protobuf.enums.Job
	(*Stage)(nil),                   // 93: sudo.protobuf.enums.Stage
	(*Party)(nil),                   // 94: sudo.protobuf.enums.Party
	(*Datasource)(nil),              // 95: sudo.protobuf.enums.Datasource
	(*Datainfo)(nil),                // 96: sudo.protobuf.enums.Datainfo
	(*VirtualTable)(nil),            // 97: sudo.protobuf.enums.VirtualTable
	(*Perm)(nil),                    // 98: sudo.protobuf.enums.Perm
	(*Order)(nil),                   // 99: sudo.protobuf.enums.Order
	(*InputOutput)(nil),             // 100: sudo.protobuf.enums.InputOutput
	(*Aritifact)(nil),               // 101: sudo.protobuf.enums.Aritifact
	(*Project)(nil),                 // 102: sudo.protobuf.enums.Project
	(*Stats)(nil),                   // 103: sudo.protobuf.enums.Stats
	(*ModelPack)(nil),               // 104: sudo.protobuf.enums.ModelPack
	(*UserBookmark)(nil),            // 105: sudo.protobuf.enums.UserBookmark
	(*ReadDataApplication)(nil),     // 106: sudo.protobuf.enums.ReadDataApplication
	(*Service)(nil),                 // 107: sudo.protobuf.enums.Service
	(*OnlineAPIStats)(nil),          // 108: sudo.protobuf.enums.OnlineAPIStats
	(*TaskSchedule)(nil),            // 109: sudo.protobuf.enums.TaskSchedule
	(*SplicedTable)(nil),            // 110: sudo.protobuf.enums.SplicedTable
	(*TCache)(nil),                  // 111: sudo.protobuf.enums.TCache
	(*Register)(nil),                // 112: sudo.protobuf.enums.Register
	(*YellowPage)(nil),              // 113: sudo.protobuf.enums.YellowPage
	(*Notification)(nil),            // 114: sudo.protobuf.enums.Notification
	(*Message)(nil),                 // 115: sudo.protobuf.enums.Message
	(*TFA)(nil),                     // 116: sudo.protobuf.enums.TFA
	(*LocalTask)(nil),               // 117: sudo.protobuf.enums.LocalTask
	(*Aggregation)(nil),             // 118: sudo.protobuf.enums.Aggregation
	(*Inventory)(nil),               // 119: sudo.protobuf.enums.Inventory
	(*Asset)(nil),                   // 120: sudo.protobuf.enums.Asset
	(*Application)(nil),             // 121: sudo.protobuf.enums.Application
	(*ApplyOrder)(nil),              // 122: sudo.protobuf.enums.ApplyOrder
	(*OrderItem)(nil),               // 123: sudo.protobuf.enums.OrderItem
	(*PreAuth)(nil),                 // 124: sudo.protobuf.enums.PreAuth
	(*PirService)(nil),              // 125: sudo.protobuf.enums.PirService
	(*Token)(nil),                   // 126: sudo.protobuf.enums.Token
	(*Resource)(nil),                // 127: sudo.protobuf.enums.Resource
	(*TripletsBitInfo)(nil),         // 128: sudo.protobuf.enums.TripletsBitInfo
	(*Dag_Job)(nil),                 // 129: sudo.protobuf.enums.Dag.Job
	(*Dag_Graph)(nil),               // 130: sudo.protobuf.enums.Dag.Graph
	(*Project_Member)(nil),          // 131: sudo.protobuf.enums.Project.Member
	(*Project_User)(nil),            // 132: sudo.protobuf.enums.Project.User
	(*Service_Config)(nil),          // 133: sudo.protobuf.enums.Service.Config
	(*Service_Config_PIR)(nil),      // 134: sudo.protobuf.enums.Service.Config.PIR
}
var file_sudo_enums_enums_proto_depIdxs = []int32{
	134, // 0: sudo.protobuf.enums.Service.Config.pir_config:type_name -> sudo.protobuf.enums.Service.Config.PIR
	1,   // [1:1] is the sub-list for method output_type
	1,   // [1:1] is the sub-list for method input_type
	1,   // [1:1] is the sub-list for extension type_name
	1,   // [1:1] is the sub-list for extension extendee
	0,   // [0:1] is the sub-list for field type_name
}

func init() { file_sudo_enums_enums_proto_init() }
func file_sudo_enums_enums_proto_init() {
	if File_sudo_enums_enums_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sudo_enums_enums_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Party); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Datasource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Datainfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Perm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aritifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelPack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBookmark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadDataApplication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineAPIStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplicedTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Register); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YellowPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aggregation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inventory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Application); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PirService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TripletsBitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dag_Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dag_Graph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sudo_enums_enums_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service_Config_PIR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sudo_enums_enums_proto_msgTypes[44].OneofWrappers = []interface{}{
		(*Service_Config_PirConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sudo_enums_enums_proto_rawDesc,
			NumEnums:      89,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sudo_enums_enums_proto_goTypes,
		DependencyIndexes: file_sudo_enums_enums_proto_depIdxs,
		EnumInfos:         file_sudo_enums_enums_proto_enumTypes,
		MessageInfos:      file_sudo_enums_enums_proto_msgTypes,
	}.Build()
	File_sudo_enums_enums_proto = out.File
	file_sudo_enums_enums_proto_rawDesc = nil
	file_sudo_enums_enums_proto_goTypes = nil
	file_sudo_enums_enums_proto_depIdxs = nil
}
