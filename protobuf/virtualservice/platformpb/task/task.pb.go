// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.1
// source: mpc_virtual_service/platform/task.proto

package task

import (
	apl "github.com/sudo-privacy/sudo-sdk-go/v2/protobuf/basic/protobuf/virtualservice/platformpb/apl"
	online_service "github.com/sudo-privacy/sudo-sdk-go/v2/protobuf/basic/protobuf/virtualservice/platformpb/online_service"
	_ "github.com/sudo-privacy/sudo-sdk-go/v2/protobuf/basic/protobuf/virtualservice/platformpb/options"
	task "github.com/sudo-privacy/sudo-sdk-go/v2/protobuf/basic/protobuf/virtualservice/platformpb/task"
	cron "github.com/sudo-privacy/sudo-sdk-go/v2/protobuf/virtualservice/platformpb/cron"
	user "github.com/sudo-privacy/sudo-sdk-go/v2/protobuf/virtualservice/platformpb/user"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetStageDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId      uint64   `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	ExcludeParty []string `protobuf:"bytes,2,rep,name=exclude_party,json=excludeParty,proto3" json:"exclude_party,omitempty"`
}

func (x *GetStageDashboardRequest) Reset() {
	*x = GetStageDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStageDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStageDashboardRequest) ProtoMessage() {}

func (x *GetStageDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStageDashboardRequest.ProtoReflect.Descriptor instead.
func (*GetStageDashboardRequest) Descriptor() ([]byte, []int) {
	return file_mpc_virtual_service_platform_task_proto_rawDescGZIP(), []int{0}
}

func (x *GetStageDashboardRequest) GetStageId() uint64 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *GetStageDashboardRequest) GetExcludeParty() []string {
	if x != nil {
		return x.ExcludeParty
	}
	return nil
}

type SamplePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64   `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Value     float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SamplePair) Reset() {
	*x = SamplePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplePair) ProtoMessage() {}

func (x *SamplePair) ProtoReflect() protoreflect.Message {
	mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplePair.ProtoReflect.Descriptor instead.
func (*SamplePair) Descriptor() ([]byte, []int) {
	return file_mpc_virtual_service_platform_task_proto_rawDescGZIP(), []int{1}
}

func (x *SamplePair) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SamplePair) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type SampleStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*SamplePair `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *SampleStream) Reset() {
	*x = SampleStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleStream) ProtoMessage() {}

func (x *SampleStream) ProtoReflect() protoreflect.Message {
	mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleStream.ProtoReflect.Descriptor instead.
func (*SampleStream) Descriptor() ([]byte, []int) {
	return file_mpc_virtual_service_platform_task_proto_rawDescGZIP(), []int{2}
}

func (x *SampleStream) GetValues() []*SamplePair {
	if x != nil {
		return x.Values
	}
	return nil
}

type Matrix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*SampleStream `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Matrix) Reset() {
	*x = Matrix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Matrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Matrix) ProtoMessage() {}

func (x *Matrix) ProtoReflect() protoreflect.Message {
	mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Matrix.ProtoReflect.Descriptor instead.
func (*Matrix) Descriptor() ([]byte, []int) {
	return file_mpc_virtual_service_platform_task_proto_rawDescGZIP(), []int{3}
}

func (x *Matrix) GetValues() []*SampleStream {
	if x != nil {
		return x.Values
	}
	return nil
}

type CPUUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsageSecondsTotal []*SamplePair `protobuf:"bytes,1,rep,name=usage_seconds_total,json=usageSecondsTotal,proto3" json:"usage_seconds_total,omitempty"`
}

func (x *CPUUsage) Reset() {
	*x = CPUUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUUsage) ProtoMessage() {}

func (x *CPUUsage) ProtoReflect() protoreflect.Message {
	mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUUsage.ProtoReflect.Descriptor instead.
func (*CPUUsage) Descriptor() ([]byte, []int) {
	return file_mpc_virtual_service_platform_task_proto_rawDescGZIP(), []int{4}
}

func (x *CPUUsage) GetUsageSecondsTotal() []*SamplePair {
	if x != nil {
		return x.UsageSecondsTotal
	}
	return nil
}

type MemoryUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total      uint64  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Used       uint64  `protobuf:"varint,2,opt,name=used,proto3" json:"used,omitempty"`
	UsageBytes *Matrix `protobuf:"bytes,3,opt,name=usage_bytes,json=usageBytes,proto3" json:"usage_bytes,omitempty"`
}

func (x *MemoryUsage) Reset() {
	*x = MemoryUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryUsage) ProtoMessage() {}

func (x *MemoryUsage) ProtoReflect() protoreflect.Message {
	mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryUsage.ProtoReflect.Descriptor instead.
func (*MemoryUsage) Descriptor() ([]byte, []int) {
	return file_mpc_virtual_service_platform_task_proto_rawDescGZIP(), []int{5}
}

func (x *MemoryUsage) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MemoryUsage) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *MemoryUsage) GetUsageBytes() *Matrix {
	if x != nil {
		return x.UsageBytes
	}
	return nil
}

type NetworkUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiveBytesTotal  []*SamplePair `protobuf:"bytes,1,rep,name=receive_bytes_total,json=receiveBytesTotal,proto3" json:"receive_bytes_total,omitempty"`
	TransmitBytesTotal []*SamplePair `protobuf:"bytes,2,rep,name=transmit_bytes_total,json=transmitBytesTotal,proto3" json:"transmit_bytes_total,omitempty"`
}

func (x *NetworkUsage) Reset() {
	*x = NetworkUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkUsage) ProtoMessage() {}

func (x *NetworkUsage) ProtoReflect() protoreflect.Message {
	mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkUsage.ProtoReflect.Descriptor instead.
func (*NetworkUsage) Descriptor() ([]byte, []int) {
	return file_mpc_virtual_service_platform_task_proto_rawDescGZIP(), []int{6}
}

func (x *NetworkUsage) GetReceiveBytesTotal() []*SamplePair {
	if x != nil {
		return x.ReceiveBytesTotal
	}
	return nil
}

func (x *NetworkUsage) GetTransmitBytesTotal() []*SamplePair {
	if x != nil {
		return x.TransmitBytesTotal
	}
	return nil
}

type PartyStageDashboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpus     map[string]*CPUUsage     `protobuf:"bytes,1,rep,name=cpus,proto3" json:"cpus,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Mems     map[string]*MemoryUsage  `protobuf:"bytes,2,rep,name=mems,proto3" json:"mems,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Networks map[string]*NetworkUsage `protobuf:"bytes,3,rep,name=networks,proto3" json:"networks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PartyStageDashboard) Reset() {
	*x = PartyStageDashboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyStageDashboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyStageDashboard) ProtoMessage() {}

func (x *PartyStageDashboard) ProtoReflect() protoreflect.Message {
	mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyStageDashboard.ProtoReflect.Descriptor instead.
func (*PartyStageDashboard) Descriptor() ([]byte, []int) {
	return file_mpc_virtual_service_platform_task_proto_rawDescGZIP(), []int{7}
}

func (x *PartyStageDashboard) GetCpus() map[string]*CPUUsage {
	if x != nil {
		return x.Cpus
	}
	return nil
}

func (x *PartyStageDashboard) GetMems() map[string]*MemoryUsage {
	if x != nil {
		return x.Mems
	}
	return nil
}

func (x *PartyStageDashboard) GetNetworks() map[string]*NetworkUsage {
	if x != nil {
		return x.Networks
	}
	return nil
}

type GetStageDashboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dashboards map[string]*PartyStageDashboard `protobuf:"bytes,1,rep,name=dashboards,proto3" json:"dashboards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetStageDashboardResponse) Reset() {
	*x = GetStageDashboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStageDashboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStageDashboardResponse) ProtoMessage() {}

func (x *GetStageDashboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStageDashboardResponse.ProtoReflect.Descriptor instead.
func (*GetStageDashboardResponse) Descriptor() ([]byte, []int) {
	return file_mpc_virtual_service_platform_task_proto_rawDescGZIP(), []int{8}
}

func (x *GetStageDashboardResponse) GetDashboards() map[string]*PartyStageDashboard {
	if x != nil {
		return x.Dashboards
	}
	return nil
}

type SourceTaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId       uint64 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BeHidden     bool   `protobuf:"varint,3,opt,name=be_hidden,json=beHidden,proto3" json:"be_hidden,omitempty"`
	MajorVersion uint64 `protobuf:"varint,4,opt,name=major_version,json=majorVersion,proto3" json:"major_version,omitempty"`
	MinorVersion uint64 `protobuf:"varint,5,opt,name=minor_version,json=minorVersion,proto3" json:"minor_version,omitempty"`
}

func (x *SourceTaskInfo) Reset() {
	*x = SourceTaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceTaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceTaskInfo) ProtoMessage() {}

func (x *SourceTaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceTaskInfo.ProtoReflect.Descriptor instead.
func (*SourceTaskInfo) Descriptor() ([]byte, []int) {
	return file_mpc_virtual_service_platform_task_proto_rawDescGZIP(), []int{9}
}

func (x *SourceTaskInfo) GetTaskId() uint64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *SourceTaskInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SourceTaskInfo) GetBeHidden() bool {
	if x != nil {
		return x.BeHidden
	}
	return false
}

func (x *SourceTaskInfo) GetMajorVersion() uint64 {
	if x != nil {
		return x.MajorVersion
	}
	return 0
}

func (x *SourceTaskInfo) GetMinorVersion() uint64 {
	if x != nil {
		return x.MinorVersion
	}
	return 0
}

type AdditionalTaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AplId      uint64 `protobuf:"varint,1,opt,name=apl_id,json=aplId,proto3" json:"apl_id,omitempty"`
	Deprecated bool   `protobuf:"varint,2,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// 当任务需要审核时，提供对应审核方
	Reviewers []*apl.Reviewer `protobuf:"bytes,3,rep,name=reviewers,proto3" json:"reviewers,omitempty"`
	// 审批日志，默认只返回callback出现异常的最后一条记录
	ApplicationLog *apl.CallbackLog `protobuf:"bytes,4,opt,name=application_log,json=applicationLog,proto3" json:"application_log,omitempty"`
	// type是"预测任务"时，返回父任务信息
	SourceTaskInfo *SourceTaskInfo `protobuf:"bytes,5,opt,name=source_task_info,json=sourceTaskInfo,proto3" json:"source_task_info,omitempty"`
	ClientPartyId  string          `protobuf:"bytes,6,opt,name=client_party_id,json=clientPartyId,proto3" json:"client_party_id,omitempty"`
	// 在线服务列表
	OnlineServices []*online_service.ServiceModel `protobuf:"bytes,7,rep,name=online_services,json=onlineServices,proto3" json:"online_services,omitempty"`
	// task versioning
	AutoTune     bool   `protobuf:"varint,8,opt,name=auto_tune,json=autoTune,proto3" json:"auto_tune,omitempty"`
	MajorVersion uint64 `protobuf:"varint,9,opt,name=major_version,json=majorVersion,proto3" json:"major_version,omitempty"`
	MinorVersion uint64 `protobuf:"varint,10,opt,name=minor_version,json=minorVersion,proto3" json:"minor_version,omitempty"`
	// cron task schedule
	Schedules []*cron.Cron_Schedule `protobuf:"bytes,11,rep,name=schedules,proto3" json:"schedules,omitempty"`
}

func (x *AdditionalTaskInfo) Reset() {
	*x = AdditionalTaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdditionalTaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalTaskInfo) ProtoMessage() {}

func (x *AdditionalTaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalTaskInfo.ProtoReflect.Descriptor instead.
func (*AdditionalTaskInfo) Descriptor() ([]byte, []int) {
	return file_mpc_virtual_service_platform_task_proto_rawDescGZIP(), []int{10}
}

func (x *AdditionalTaskInfo) GetAplId() uint64 {
	if x != nil {
		return x.AplId
	}
	return 0
}

func (x *AdditionalTaskInfo) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *AdditionalTaskInfo) GetReviewers() []*apl.Reviewer {
	if x != nil {
		return x.Reviewers
	}
	return nil
}

func (x *AdditionalTaskInfo) GetApplicationLog() *apl.CallbackLog {
	if x != nil {
		return x.ApplicationLog
	}
	return nil
}

func (x *AdditionalTaskInfo) GetSourceTaskInfo() *SourceTaskInfo {
	if x != nil {
		return x.SourceTaskInfo
	}
	return nil
}

func (x *AdditionalTaskInfo) GetClientPartyId() string {
	if x != nil {
		return x.ClientPartyId
	}
	return ""
}

func (x *AdditionalTaskInfo) GetOnlineServices() []*online_service.ServiceModel {
	if x != nil {
		return x.OnlineServices
	}
	return nil
}

func (x *AdditionalTaskInfo) GetAutoTune() bool {
	if x != nil {
		return x.AutoTune
	}
	return false
}

func (x *AdditionalTaskInfo) GetMajorVersion() uint64 {
	if x != nil {
		return x.MajorVersion
	}
	return 0
}

func (x *AdditionalTaskInfo) GetMinorVersion() uint64 {
	if x != nil {
		return x.MinorVersion
	}
	return 0
}

func (x *AdditionalTaskInfo) GetSchedules() []*cron.Cron_Schedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

type BaseTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base      *task.Task `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	OwnerUser *user.User `protobuf:"bytes,2,opt,name=owner_user,json=ownerUser,proto3" json:"owner_user,omitempty"`
}

func (x *BaseTaskResponse) Reset() {
	*x = BaseTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseTaskResponse) ProtoMessage() {}

func (x *BaseTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseTaskResponse.ProtoReflect.Descriptor instead.
func (*BaseTaskResponse) Descriptor() ([]byte, []int) {
	return file_mpc_virtual_service_platform_task_proto_rawDescGZIP(), []int{11}
}

func (x *BaseTaskResponse) GetBase() *task.Task {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *BaseTaskResponse) GetOwnerUser() *user.User {
	if x != nil {
		return x.OwnerUser
	}
	return nil
}

type TaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base           *BaseTaskResponse   `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	AdditionalInfo *AdditionalTaskInfo `protobuf:"bytes,2,opt,name=additional_info,json=additionalInfo,proto3" json:"additional_info,omitempty"`
}

func (x *TaskResponse) Reset() {
	*x = TaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResponse) ProtoMessage() {}

func (x *TaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResponse.ProtoReflect.Descriptor instead.
func (*TaskResponse) Descriptor() ([]byte, []int) {
	return file_mpc_virtual_service_platform_task_proto_rawDescGZIP(), []int{12}
}

func (x *TaskResponse) GetBase() *BaseTaskResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *TaskResponse) GetAdditionalInfo() *AdditionalTaskInfo {
	if x != nil {
		return x.AdditionalInfo
	}
	return nil
}

type GetTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*TaskResponse `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetTasksResponse) Reset() {
	*x = GetTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTasksResponse) ProtoMessage() {}

func (x *GetTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTasksResponse.ProtoReflect.Descriptor instead.
func (*GetTasksResponse) Descriptor() ([]byte, []int) {
	return file_mpc_virtual_service_platform_task_proto_rawDescGZIP(), []int{13}
}

func (x *GetTasksResponse) GetData() []*TaskResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetTasksResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ActionOnTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base      *task.ActionOnTaskRequest `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Schedules []*cron.Cron_Schedule     `protobuf:"bytes,2,rep,name=schedules,proto3" json:"schedules,omitempty"`
}

func (x *ActionOnTaskRequest) Reset() {
	*x = ActionOnTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionOnTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionOnTaskRequest) ProtoMessage() {}

func (x *ActionOnTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpc_virtual_service_platform_task_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionOnTaskRequest.ProtoReflect.Descriptor instead.
func (*ActionOnTaskRequest) Descriptor() ([]byte, []int) {
	return file_mpc_virtual_service_platform_task_proto_rawDescGZIP(), []int{14}
}

func (x *ActionOnTaskRequest) GetBase() *task.ActionOnTaskRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ActionOnTaskRequest) GetSchedules() []*cron.Cron_Schedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

var File_mpc_virtual_service_platform_task_proto protoreflect.FileDescriptor

var file_mpc_virtual_service_platform_task_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x1a, 0x2f, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2c, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2b, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2f, 0x61, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x73,
	0x75, 0x64, 0x6f, 0x2f, 0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27,
	0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x22, 0x40, 0x0a, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x69,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4a, 0x0a, 0x0c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x3a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0x46, 0x0a, 0x06, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x3c, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x5e, 0x0a, 0x08, 0x43, 0x50, 0x55,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x11, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x78, 0x0a, 0x0b, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x52, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x54, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x9e,
	0x04, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x49, 0x0a, 0x04, 0x63, 0x70, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x63, 0x70, 0x75,
	0x73, 0x12, 0x49, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x65, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x73, 0x12, 0x55, 0x0a, 0x08,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x1a, 0x59, 0x0a, 0x09, 0x43, 0x70, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x50, 0x55, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c,
	0x0a, 0x09, 0x4d, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x61, 0x0a, 0x0d,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xea, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a,
	0x0a, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x1a, 0x6a, 0x0a, 0x0f, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa4, 0x01, 0x0a,
	0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x65, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x62, 0x65, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x6a,
	0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xe5, 0x04, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x70, 0x6c, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x42, 0x0a, 0x09, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x70,
	0x6c, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x70, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x50, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x5c, 0x0a, 0x0f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x75, 0x64,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x0e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x74, 0x75, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x54, 0x75, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x72,
	0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x10,
	0x42, 0x61, 0x73, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x42, 0x03, 0xc8, 0x3e, 0x01, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x22, 0xab, 0x01, 0x0a, 0x0c, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x03, 0xc8, 0x3e, 0x01, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x58, 0x0a,
	0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x03, 0xc8, 0x3e, 0x01, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x62, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xa5, 0x01, 0x0a, 0x13,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x03, 0xc8, 0x3e, 0x01, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x42, 0x35, 0x5a, 0x33, 0x70, 0x61, 0x61, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x70, 0x62, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_mpc_virtual_service_platform_task_proto_rawDescOnce sync.Once
	file_mpc_virtual_service_platform_task_proto_rawDescData = file_mpc_virtual_service_platform_task_proto_rawDesc
)

func file_mpc_virtual_service_platform_task_proto_rawDescGZIP() []byte {
	file_mpc_virtual_service_platform_task_proto_rawDescOnce.Do(func() {
		file_mpc_virtual_service_platform_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_mpc_virtual_service_platform_task_proto_rawDescData)
	})
	return file_mpc_virtual_service_platform_task_proto_rawDescData
}

var file_mpc_virtual_service_platform_task_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_mpc_virtual_service_platform_task_proto_goTypes = []interface{}{
	(*GetStageDashboardRequest)(nil),    // 0: protobuf.platform.task.GetStageDashboardRequest
	(*SamplePair)(nil),                  // 1: protobuf.platform.task.SamplePair
	(*SampleStream)(nil),                // 2: protobuf.platform.task.SampleStream
	(*Matrix)(nil),                      // 3: protobuf.platform.task.Matrix
	(*CPUUsage)(nil),                    // 4: protobuf.platform.task.CPUUsage
	(*MemoryUsage)(nil),                 // 5: protobuf.platform.task.MemoryUsage
	(*NetworkUsage)(nil),                // 6: protobuf.platform.task.NetworkUsage
	(*PartyStageDashboard)(nil),         // 7: protobuf.platform.task.PartyStageDashboard
	(*GetStageDashboardResponse)(nil),   // 8: protobuf.platform.task.GetStageDashboardResponse
	(*SourceTaskInfo)(nil),              // 9: protobuf.platform.task.SourceTaskInfo
	(*AdditionalTaskInfo)(nil),          // 10: protobuf.platform.task.AdditionalTaskInfo
	(*BaseTaskResponse)(nil),            // 11: protobuf.platform.task.BaseTaskResponse
	(*TaskResponse)(nil),                // 12: protobuf.platform.task.TaskResponse
	(*GetTasksResponse)(nil),            // 13: protobuf.platform.task.GetTasksResponse
	(*ActionOnTaskRequest)(nil),         // 14: protobuf.platform.task.ActionOnTaskRequest
	nil,                                 // 15: protobuf.platform.task.PartyStageDashboard.CpusEntry
	nil,                                 // 16: protobuf.platform.task.PartyStageDashboard.MemsEntry
	nil,                                 // 17: protobuf.platform.task.PartyStageDashboard.NetworksEntry
	nil,                                 // 18: protobuf.platform.task.GetStageDashboardResponse.DashboardsEntry
	(*apl.Reviewer)(nil),                // 19: sudo.protobuf.platform.apl.Reviewer
	(*apl.CallbackLog)(nil),             // 20: sudo.protobuf.platform.apl.CallbackLog
	(*online_service.ServiceModel)(nil), // 21: sudo.protobuf.platform.online_service.ServiceModel
	(*cron.Cron_Schedule)(nil),          // 22: protobuf.platform.cron.Cron.Schedule
	(*task.Task)(nil),                   // 23: sudo.protobuf.platform.task.Task
	(*user.User)(nil),                   // 24: protobuf.platform.user.User
	(*task.ActionOnTaskRequest)(nil),    // 25: sudo.protobuf.platform.task.ActionOnTaskRequest
}
var file_mpc_virtual_service_platform_task_proto_depIdxs = []int32{
	1,  // 0: protobuf.platform.task.SampleStream.values:type_name -> protobuf.platform.task.SamplePair
	2,  // 1: protobuf.platform.task.Matrix.values:type_name -> protobuf.platform.task.SampleStream
	1,  // 2: protobuf.platform.task.CPUUsage.usage_seconds_total:type_name -> protobuf.platform.task.SamplePair
	3,  // 3: protobuf.platform.task.MemoryUsage.usage_bytes:type_name -> protobuf.platform.task.Matrix
	1,  // 4: protobuf.platform.task.NetworkUsage.receive_bytes_total:type_name -> protobuf.platform.task.SamplePair
	1,  // 5: protobuf.platform.task.NetworkUsage.transmit_bytes_total:type_name -> protobuf.platform.task.SamplePair
	15, // 6: protobuf.platform.task.PartyStageDashboard.cpus:type_name -> protobuf.platform.task.PartyStageDashboard.CpusEntry
	16, // 7: protobuf.platform.task.PartyStageDashboard.mems:type_name -> protobuf.platform.task.PartyStageDashboard.MemsEntry
	17, // 8: protobuf.platform.task.PartyStageDashboard.networks:type_name -> protobuf.platform.task.PartyStageDashboard.NetworksEntry
	18, // 9: protobuf.platform.task.GetStageDashboardResponse.dashboards:type_name -> protobuf.platform.task.GetStageDashboardResponse.DashboardsEntry
	19, // 10: protobuf.platform.task.AdditionalTaskInfo.reviewers:type_name -> sudo.protobuf.platform.apl.Reviewer
	20, // 11: protobuf.platform.task.AdditionalTaskInfo.application_log:type_name -> sudo.protobuf.platform.apl.CallbackLog
	9,  // 12: protobuf.platform.task.AdditionalTaskInfo.source_task_info:type_name -> protobuf.platform.task.SourceTaskInfo
	21, // 13: protobuf.platform.task.AdditionalTaskInfo.online_services:type_name -> sudo.protobuf.platform.online_service.ServiceModel
	22, // 14: protobuf.platform.task.AdditionalTaskInfo.schedules:type_name -> protobuf.platform.cron.Cron.Schedule
	23, // 15: protobuf.platform.task.BaseTaskResponse.base:type_name -> sudo.protobuf.platform.task.Task
	24, // 16: protobuf.platform.task.BaseTaskResponse.owner_user:type_name -> protobuf.platform.user.User
	11, // 17: protobuf.platform.task.TaskResponse.base:type_name -> protobuf.platform.task.BaseTaskResponse
	10, // 18: protobuf.platform.task.TaskResponse.additional_info:type_name -> protobuf.platform.task.AdditionalTaskInfo
	12, // 19: protobuf.platform.task.GetTasksResponse.data:type_name -> protobuf.platform.task.TaskResponse
	25, // 20: protobuf.platform.task.ActionOnTaskRequest.base:type_name -> sudo.protobuf.platform.task.ActionOnTaskRequest
	22, // 21: protobuf.platform.task.ActionOnTaskRequest.schedules:type_name -> protobuf.platform.cron.Cron.Schedule
	4,  // 22: protobuf.platform.task.PartyStageDashboard.CpusEntry.value:type_name -> protobuf.platform.task.CPUUsage
	5,  // 23: protobuf.platform.task.PartyStageDashboard.MemsEntry.value:type_name -> protobuf.platform.task.MemoryUsage
	6,  // 24: protobuf.platform.task.PartyStageDashboard.NetworksEntry.value:type_name -> protobuf.platform.task.NetworkUsage
	7,  // 25: protobuf.platform.task.GetStageDashboardResponse.DashboardsEntry.value:type_name -> protobuf.platform.task.PartyStageDashboard
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_mpc_virtual_service_platform_task_proto_init() }
func file_mpc_virtual_service_platform_task_proto_init() {
	if File_mpc_virtual_service_platform_task_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mpc_virtual_service_platform_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStageDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpc_virtual_service_platform_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpc_virtual_service_platform_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpc_virtual_service_platform_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Matrix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpc_virtual_service_platform_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpc_virtual_service_platform_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpc_virtual_service_platform_task_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpc_virtual_service_platform_task_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyStageDashboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpc_virtual_service_platform_task_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStageDashboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpc_virtual_service_platform_task_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceTaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpc_virtual_service_platform_task_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdditionalTaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpc_virtual_service_platform_task_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpc_virtual_service_platform_task_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpc_virtual_service_platform_task_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpc_virtual_service_platform_task_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionOnTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mpc_virtual_service_platform_task_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mpc_virtual_service_platform_task_proto_goTypes,
		DependencyIndexes: file_mpc_virtual_service_platform_task_proto_depIdxs,
		MessageInfos:      file_mpc_virtual_service_platform_task_proto_msgTypes,
	}.Build()
	File_mpc_virtual_service_platform_task_proto = out.File
	file_mpc_virtual_service_platform_task_proto_rawDesc = nil
	file_mpc_virtual_service_platform_task_proto_goTypes = nil
	file_mpc_virtual_service_platform_task_proto_depIdxs = nil
}
