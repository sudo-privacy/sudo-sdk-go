// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.1
// source: protobuf/mpc_virtual_service/platform/service/furnace.proto

package platformpb

import (
	context "context"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	service "github.com/sudo-privacy/sudo-sdk-go/protobuf/basic/protobuf/service"
	_ "github.com/sudo-privacy/sudo-sdk-go/protobuf/basic/protobuf/virtualservice/platformpb/options"
	online_service "github.com/sudo-privacy/sudo-sdk-go/protobuf/online_service"
	cron "github.com/sudo-privacy/sudo-sdk-go/protobuf/virtualservice/platformpb/cron"
	feature "github.com/sudo-privacy/sudo-sdk-go/protobuf/virtualservice/platformpb/feature"
	furnacestatus "github.com/sudo-privacy/sudo-sdk-go/protobuf/virtualservice/platformpb/furnacestatus"
	vtable "github.com/sudo-privacy/sudo-sdk-go/protobuf/virtualservice/platformpb/vtable"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_protobuf_mpc_virtual_service_platform_service_furnace_proto protoreflect.FileDescriptor

var file_protobuf_mpc_virtual_service_platform_service_furnace_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x70, 0x63, 0x5f, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x66, 0x75, 0x72, 0x6e, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x70,
	0x63, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x76, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63,
	0x72, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x66, 0x75, 0x72, 0x6e, 0x61, 0x63, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x33, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x73, 0x75, 0x64, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x6d, 0x70, 0x63, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31,
	0x73, 0x75, 0x64, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x32, 0xeb, 0x0a, 0x0a, 0x07, 0x46, 0x75, 0x72, 0x6e, 0x61, 0x63, 0x65, 0x12, 0x91, 0x01,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0xc2, 0x3e, 0x03, 0x0a, 0x01, 0x04, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x56, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0xa6, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x34, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e,
	0x22, 0x09, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x92, 0x41,
	0x09, 0x0a, 0x07, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x89, 0x01, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x2b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x72, 0x6f,
	0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x92, 0x41, 0x09, 0x0a, 0x07, 0x43,
	0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x74, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x72, 0x6f, 0x6e,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x2a, 0x09, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x6f, 0x6e,
	0x92, 0x41, 0x09, 0x0a, 0x07, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x97, 0x01, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x46, 0x75, 0x72, 0x6e, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x66, 0x75, 0x72, 0x6e, 0x61, 0x63, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x66, 0x75, 0x72, 0x6e, 0x61, 0x63, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d,
	0x12, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x92, 0x41, 0x06,
	0x0a, 0x04, 0x4d, 0x69, 0x73, 0x63, 0x12, 0x94, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x11, 0x22, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x3a,
	0x01, 0x2a, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xb9, 0x01,
	0x0a, 0x13, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x53, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x33, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x61, 0x64,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x53, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x33, 0x53, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x66, 0x33, 0x73, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0f, 0x0a, 0x0d, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa4, 0x01, 0x0a, 0x19, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x33, 0x53, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x79, 0x73, 0x71,
	0x6c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x2a, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x72, 0x70, 0x63, 0x47, 0x57, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x72, 0x70, 0x63,
	0x47, 0x57, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2e, 0x88, 0x02, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x33, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x3a, 0x01, 0x2a, 0x92, 0x41,
	0x0f, 0x0a, 0x0d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x8c, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x92, 0x41, 0x06, 0x0a, 0x04, 0x4d, 0x69, 0x73, 0x63, 0x42,
	0xa9, 0x03, 0x5a, 0x2e, 0x70, 0x61, 0x61, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x70, 0x62, 0x92, 0x41, 0xf5, 0x02, 0x12, 0x59, 0x0a, 0x0b, 0x46, 0x75, 0x72, 0x6e, 0x61, 0x63,
	0x65, 0x20, 0x41, 0x50, 0x49, 0x12, 0x30, 0xe9, 0x9a, 0x90, 0xe7, 0xa7, 0x81, 0xe8, 0xae, 0xa1,
	0xe7, 0xae, 0x97, 0xe5, 0x90, 0x84, 0xe4, 0xb8, 0xaa, 0xe5, 0x8f, 0x82, 0xe4, 0xb8, 0x8e, 0xe6,
	0x96, 0xb9, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xa1, 0xe7, 0xae, 0x97, 0xe7, 0xae, 0xa1, 0xe7, 0x90,
	0x86, 0xe5, 0x8d, 0x95, 0xe5, 0x85, 0x83, 0x2a, 0x11, 0x0a, 0x0f, 0x53, 0x75, 0x64, 0x6f, 0x20,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x32, 0x05, 0x31, 0x2e, 0x30, 0x2e,
	0x30, 0x2a, 0x02, 0x02, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0xce, 0x01, 0x0a, 0x1d, 0x0a, 0x06,
	0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x13, 0x08, 0x02, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x0a, 0xac, 0x01, 0x0a, 0x0d,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x2d, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x9a, 0x01,
	0x08, 0x02, 0x12, 0x81, 0x01, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe5, 0x8f, 0x91, 0xe9, 0x80,
	0x81, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe4, 0xb8, 0x8e,
	0xe6, 0x96, 0xb9, 0x69, 0x64, 0xef, 0xbc, 0x9b, 0xe5, 0x8f, 0xaa, 0xe6, 0x9c, 0x89, 0xe5, 0xbd,
	0x93, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe7, 0xab, 0xaf, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae,
	0xe4, 0xb8, 0xad, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x60, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x60, 0xe6,
	0x97, 0xb6, 0xe6, 0x89, 0x8d, 0xe4, 0xbc, 0x9a, 0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88, 0xef, 0xbc,
	0x8c, 0xe4, 0xb8, 0x80, 0xe8, 0x88, 0xac, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0xb0, 0x83,
	0xe8, 0xaf, 0x95, 0xe3, 0x80, 0x82, 0x1a, 0x10, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x2d,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x2d, 0x49, 0x44, 0x20, 0x02, 0x62, 0x1f, 0x0a, 0x0a, 0x0a, 0x06,
	0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x00, 0x0a, 0x11, 0x0a, 0x0d, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x2d, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var file_protobuf_mpc_virtual_service_platform_service_furnace_proto_goTypes = []interface{}{
	(*vtable.ListVtablesRequest)(nil),             // 0: protobuf.platform.vtable.ListVtablesRequest
	(*cron.CreateOrUpdateCronJobRequest)(nil),     // 1: protobuf.platform.cron.CreateOrUpdateCronJobRequest
	(*cron.ListCronJobsRequest)(nil),              // 2: protobuf.platform.cron.ListCronJobsRequest
	(*cron.DeleteCronJobRequest)(nil),             // 3: protobuf.platform.cron.DeleteCronJobRequest
	(*furnacestatus.GetStatusRequest)(nil),        // 4: protobuf.platform.furnacestatus.GetStatusRequest
	(*vtable.CreateVtablesRequest)(nil),           // 5: protobuf.platform.vtable.CreateVtablesRequest
	(*online_service.Factor3SVerifyRequest)(nil),  // 6: infra_adapter.online_service.Factor3SVerifyRequest
	(*service.GrpcGWDeployRequest)(nil),           // 7: sudo.protobuf.service.GrpcGWDeployRequest
	(*feature.GetFeaturesRequest)(nil),            // 8: protobuf.platform.feature.GetFeaturesRequest
	(*vtable.ListVtablesResponse)(nil),            // 9: protobuf.platform.vtable.ListVtablesResponse
	(*cron.CreateOrUpdateCronJobResponse)(nil),    // 10: protobuf.platform.cron.CreateOrUpdateCronJobResponse
	(*cron.ListCronJobsResponse)(nil),             // 11: protobuf.platform.cron.ListCronJobsResponse
	(*emptypb.Empty)(nil),                         // 12: google.protobuf.Empty
	(*furnacestatus.GetStatusResponse)(nil),       // 13: protobuf.platform.furnacestatus.GetStatusResponse
	(*vtable.CreateVtablesResponse)(nil),          // 14: protobuf.platform.vtable.CreateVtablesResponse
	(*online_service.Factor3SVerifyResponse)(nil), // 15: infra_adapter.online_service.Factor3SVerifyResponse
	(*service.GrpcGWDeployResponse)(nil),          // 16: sudo.protobuf.service.GrpcGWDeployResponse
	(*feature.GetFeaturesResponse)(nil),           // 17: protobuf.platform.feature.GetFeaturesResponse
}
var file_protobuf_mpc_virtual_service_platform_service_furnace_proto_depIdxs = []int32{
	0,  // 0: protobuf.platform.service.Furnace.ListVtables:input_type -> protobuf.platform.vtable.ListVtablesRequest
	1,  // 1: protobuf.platform.service.Furnace.CreateOrUpdateCronJob:input_type -> protobuf.platform.cron.CreateOrUpdateCronJobRequest
	2,  // 2: protobuf.platform.service.Furnace.ListCronJobs:input_type -> protobuf.platform.cron.ListCronJobsRequest
	3,  // 3: protobuf.platform.service.Furnace.DeleteCronJob:input_type -> protobuf.platform.cron.DeleteCronJobRequest
	4,  // 4: protobuf.platform.service.Furnace.GetFurnaceStatus:input_type -> protobuf.platform.furnacestatus.GetStatusRequest
	5,  // 5: protobuf.platform.service.Furnace.CreateVtables:input_type -> protobuf.platform.vtable.CreateVtablesRequest
	6,  // 6: protobuf.platform.service.Furnace.Factor3SVerifyQuery:input_type -> infra_adapter.online_service.Factor3SVerifyRequest
	7,  // 7: protobuf.platform.service.Furnace.Factor3SVerifyMysqlDeploy:input_type -> sudo.protobuf.service.GrpcGWDeployRequest
	8,  // 8: protobuf.platform.service.Furnace.GetFeatures:input_type -> protobuf.platform.feature.GetFeaturesRequest
	9,  // 9: protobuf.platform.service.Furnace.ListVtables:output_type -> protobuf.platform.vtable.ListVtablesResponse
	10, // 10: protobuf.platform.service.Furnace.CreateOrUpdateCronJob:output_type -> protobuf.platform.cron.CreateOrUpdateCronJobResponse
	11, // 11: protobuf.platform.service.Furnace.ListCronJobs:output_type -> protobuf.platform.cron.ListCronJobsResponse
	12, // 12: protobuf.platform.service.Furnace.DeleteCronJob:output_type -> google.protobuf.Empty
	13, // 13: protobuf.platform.service.Furnace.GetFurnaceStatus:output_type -> protobuf.platform.furnacestatus.GetStatusResponse
	14, // 14: protobuf.platform.service.Furnace.CreateVtables:output_type -> protobuf.platform.vtable.CreateVtablesResponse
	15, // 15: protobuf.platform.service.Furnace.Factor3SVerifyQuery:output_type -> infra_adapter.online_service.Factor3SVerifyResponse
	16, // 16: protobuf.platform.service.Furnace.Factor3SVerifyMysqlDeploy:output_type -> sudo.protobuf.service.GrpcGWDeployResponse
	17, // 17: protobuf.platform.service.Furnace.GetFeatures:output_type -> protobuf.platform.feature.GetFeaturesResponse
	9,  // [9:18] is the sub-list for method output_type
	0,  // [0:9] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_protobuf_mpc_virtual_service_platform_service_furnace_proto_init() }
func file_protobuf_mpc_virtual_service_platform_service_furnace_proto_init() {
	if File_protobuf_mpc_virtual_service_platform_service_furnace_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_mpc_virtual_service_platform_service_furnace_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protobuf_mpc_virtual_service_platform_service_furnace_proto_goTypes,
		DependencyIndexes: file_protobuf_mpc_virtual_service_platform_service_furnace_proto_depIdxs,
	}.Build()
	File_protobuf_mpc_virtual_service_platform_service_furnace_proto = out.File
	file_protobuf_mpc_virtual_service_platform_service_furnace_proto_rawDesc = nil
	file_protobuf_mpc_virtual_service_platform_service_furnace_proto_goTypes = nil
	file_protobuf_mpc_virtual_service_platform_service_furnace_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FurnaceClient is the client API for Furnace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FurnaceClient interface {
	ListVtables(ctx context.Context, in *vtable.ListVtablesRequest, opts ...grpc.CallOption) (*vtable.ListVtablesResponse, error)
	CreateOrUpdateCronJob(ctx context.Context, in *cron.CreateOrUpdateCronJobRequest, opts ...grpc.CallOption) (*cron.CreateOrUpdateCronJobResponse, error)
	ListCronJobs(ctx context.Context, in *cron.ListCronJobsRequest, opts ...grpc.CallOption) (*cron.ListCronJobsResponse, error)
	DeleteCronJob(ctx context.Context, in *cron.DeleteCronJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFurnaceStatus(ctx context.Context, in *furnacestatus.GetStatusRequest, opts ...grpc.CallOption) (*furnacestatus.GetStatusResponse, error)
	CreateVtables(ctx context.Context, in *vtable.CreateVtablesRequest, opts ...grpc.CallOption) (*vtable.CreateVtablesResponse, error)
	// 用于前端查询的grpcgw service
	Factor3SVerifyQuery(ctx context.Context, in *online_service.Factor3SVerifyRequest, opts ...grpc.CallOption) (*online_service.Factor3SVerifyResponse, error)
	// Deprecated: Do not use.
	// 用于前端部署三要素server的grpcgw service -- 不再使用，统一使用take action
	Factor3SVerifyMysqlDeploy(ctx context.Context, in *service.GrpcGWDeployRequest, opts ...grpc.CallOption) (*service.GrpcGWDeployResponse, error)
	// 获取Features配置
	//
	// 获取各个Features的配置情况
	GetFeatures(ctx context.Context, in *feature.GetFeaturesRequest, opts ...grpc.CallOption) (*feature.GetFeaturesResponse, error)
}

type furnaceClient struct {
	cc grpc.ClientConnInterface
}

func NewFurnaceClient(cc grpc.ClientConnInterface) FurnaceClient {
	return &furnaceClient{cc}
}

func (c *furnaceClient) ListVtables(ctx context.Context, in *vtable.ListVtablesRequest, opts ...grpc.CallOption) (*vtable.ListVtablesResponse, error) {
	out := new(vtable.ListVtablesResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/ListVtables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) CreateOrUpdateCronJob(ctx context.Context, in *cron.CreateOrUpdateCronJobRequest, opts ...grpc.CallOption) (*cron.CreateOrUpdateCronJobResponse, error) {
	out := new(cron.CreateOrUpdateCronJobResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/CreateOrUpdateCronJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) ListCronJobs(ctx context.Context, in *cron.ListCronJobsRequest, opts ...grpc.CallOption) (*cron.ListCronJobsResponse, error) {
	out := new(cron.ListCronJobsResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/ListCronJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) DeleteCronJob(ctx context.Context, in *cron.DeleteCronJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/DeleteCronJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) GetFurnaceStatus(ctx context.Context, in *furnacestatus.GetStatusRequest, opts ...grpc.CallOption) (*furnacestatus.GetStatusResponse, error) {
	out := new(furnacestatus.GetStatusResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/GetFurnaceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) CreateVtables(ctx context.Context, in *vtable.CreateVtablesRequest, opts ...grpc.CallOption) (*vtable.CreateVtablesResponse, error) {
	out := new(vtable.CreateVtablesResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/CreateVtables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) Factor3SVerifyQuery(ctx context.Context, in *online_service.Factor3SVerifyRequest, opts ...grpc.CallOption) (*online_service.Factor3SVerifyResponse, error) {
	out := new(online_service.Factor3SVerifyResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/Factor3SVerifyQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *furnaceClient) Factor3SVerifyMysqlDeploy(ctx context.Context, in *service.GrpcGWDeployRequest, opts ...grpc.CallOption) (*service.GrpcGWDeployResponse, error) {
	out := new(service.GrpcGWDeployResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/Factor3SVerifyMysqlDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furnaceClient) GetFeatures(ctx context.Context, in *feature.GetFeaturesRequest, opts ...grpc.CallOption) (*feature.GetFeaturesResponse, error) {
	out := new(feature.GetFeaturesResponse)
	err := c.cc.Invoke(ctx, "/protobuf.platform.service.Furnace/GetFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FurnaceServer is the server API for Furnace service.
type FurnaceServer interface {
	ListVtables(context.Context, *vtable.ListVtablesRequest) (*vtable.ListVtablesResponse, error)
	CreateOrUpdateCronJob(context.Context, *cron.CreateOrUpdateCronJobRequest) (*cron.CreateOrUpdateCronJobResponse, error)
	ListCronJobs(context.Context, *cron.ListCronJobsRequest) (*cron.ListCronJobsResponse, error)
	DeleteCronJob(context.Context, *cron.DeleteCronJobRequest) (*emptypb.Empty, error)
	GetFurnaceStatus(context.Context, *furnacestatus.GetStatusRequest) (*furnacestatus.GetStatusResponse, error)
	CreateVtables(context.Context, *vtable.CreateVtablesRequest) (*vtable.CreateVtablesResponse, error)
	// 用于前端查询的grpcgw service
	Factor3SVerifyQuery(context.Context, *online_service.Factor3SVerifyRequest) (*online_service.Factor3SVerifyResponse, error)
	// Deprecated: Do not use.
	// 用于前端部署三要素server的grpcgw service -- 不再使用，统一使用take action
	Factor3SVerifyMysqlDeploy(context.Context, *service.GrpcGWDeployRequest) (*service.GrpcGWDeployResponse, error)
	// 获取Features配置
	//
	// 获取各个Features的配置情况
	GetFeatures(context.Context, *feature.GetFeaturesRequest) (*feature.GetFeaturesResponse, error)
}

// UnimplementedFurnaceServer can be embedded to have forward compatible implementations.
type UnimplementedFurnaceServer struct {
}

func (*UnimplementedFurnaceServer) ListVtables(context.Context, *vtable.ListVtablesRequest) (*vtable.ListVtablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVtables not implemented")
}
func (*UnimplementedFurnaceServer) CreateOrUpdateCronJob(context.Context, *cron.CreateOrUpdateCronJobRequest) (*cron.CreateOrUpdateCronJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateCronJob not implemented")
}
func (*UnimplementedFurnaceServer) ListCronJobs(context.Context, *cron.ListCronJobsRequest) (*cron.ListCronJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCronJobs not implemented")
}
func (*UnimplementedFurnaceServer) DeleteCronJob(context.Context, *cron.DeleteCronJobRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCronJob not implemented")
}
func (*UnimplementedFurnaceServer) GetFurnaceStatus(context.Context, *furnacestatus.GetStatusRequest) (*furnacestatus.GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFurnaceStatus not implemented")
}
func (*UnimplementedFurnaceServer) CreateVtables(context.Context, *vtable.CreateVtablesRequest) (*vtable.CreateVtablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVtables not implemented")
}
func (*UnimplementedFurnaceServer) Factor3SVerifyQuery(context.Context, *online_service.Factor3SVerifyRequest) (*online_service.Factor3SVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Factor3SVerifyQuery not implemented")
}
func (*UnimplementedFurnaceServer) Factor3SVerifyMysqlDeploy(context.Context, *service.GrpcGWDeployRequest) (*service.GrpcGWDeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Factor3SVerifyMysqlDeploy not implemented")
}
func (*UnimplementedFurnaceServer) GetFeatures(context.Context, *feature.GetFeaturesRequest) (*feature.GetFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatures not implemented")
}

func RegisterFurnaceServer(s *grpc.Server, srv FurnaceServer) {
	s.RegisterService(&_Furnace_serviceDesc, srv)
}

func _Furnace_ListVtables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vtable.ListVtablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).ListVtables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/ListVtables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).ListVtables(ctx, req.(*vtable.ListVtablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_CreateOrUpdateCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cron.CreateOrUpdateCronJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).CreateOrUpdateCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/CreateOrUpdateCronJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).CreateOrUpdateCronJob(ctx, req.(*cron.CreateOrUpdateCronJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_ListCronJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cron.ListCronJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).ListCronJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/ListCronJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).ListCronJobs(ctx, req.(*cron.ListCronJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_DeleteCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cron.DeleteCronJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).DeleteCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/DeleteCronJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).DeleteCronJob(ctx, req.(*cron.DeleteCronJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_GetFurnaceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(furnacestatus.GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).GetFurnaceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/GetFurnaceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).GetFurnaceStatus(ctx, req.(*furnacestatus.GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_CreateVtables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vtable.CreateVtablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).CreateVtables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/CreateVtables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).CreateVtables(ctx, req.(*vtable.CreateVtablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_Factor3SVerifyQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(online_service.Factor3SVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).Factor3SVerifyQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/Factor3SVerifyQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).Factor3SVerifyQuery(ctx, req.(*online_service.Factor3SVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_Factor3SVerifyMysqlDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(service.GrpcGWDeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).Factor3SVerifyMysqlDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/Factor3SVerifyMysqlDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).Factor3SVerifyMysqlDeploy(ctx, req.(*service.GrpcGWDeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Furnace_GetFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(feature.GetFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurnaceServer).GetFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.platform.service.Furnace/GetFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurnaceServer).GetFeatures(ctx, req.(*feature.GetFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Furnace_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.platform.service.Furnace",
	HandlerType: (*FurnaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVtables",
			Handler:    _Furnace_ListVtables_Handler,
		},
		{
			MethodName: "CreateOrUpdateCronJob",
			Handler:    _Furnace_CreateOrUpdateCronJob_Handler,
		},
		{
			MethodName: "ListCronJobs",
			Handler:    _Furnace_ListCronJobs_Handler,
		},
		{
			MethodName: "DeleteCronJob",
			Handler:    _Furnace_DeleteCronJob_Handler,
		},
		{
			MethodName: "GetFurnaceStatus",
			Handler:    _Furnace_GetFurnaceStatus_Handler,
		},
		{
			MethodName: "CreateVtables",
			Handler:    _Furnace_CreateVtables_Handler,
		},
		{
			MethodName: "Factor3SVerifyQuery",
			Handler:    _Furnace_Factor3SVerifyQuery_Handler,
		},
		{
			MethodName: "Factor3SVerifyMysqlDeploy",
			Handler:    _Furnace_Factor3SVerifyMysqlDeploy_Handler,
		},
		{
			MethodName: "GetFeatures",
			Handler:    _Furnace_GetFeatures_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/mpc_virtual_service/platform/service/furnace.proto",
}
